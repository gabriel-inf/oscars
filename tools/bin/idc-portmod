#!/bin/sh 
############################################################################
# Script to change ports used by OSCARS services.
# Call with a context and a list of servers to view ports of .
# ALL will list all the service ports.Individual server args are:
#  authN authZ api coord topoBridge rm stubPSS lookup wbui
#bwPCE connPCE dijPCE vlanPCE nullAGG notifyBridge wsnbroker
############################################################################
#check if $OSCARS_HOME is set
REPO_PATH=""
if [ -n "$OSCARS_HOME" ]; then
        REPO_PATH=OSCARS_HOME
else
        echo "ERROR: OSCARS_HOME is not set. Re-run this script after setting OSCARS_HOME."
        exit 1
fi

#TBD Remove later
if  [ -z $OSCARS_DIST ]; then
	echo "Please set the environment var OSCARS_DIST to the OSCARS source directory"
	exit -1
fi


###########################################################################
#Subroutine to print usage details
###########################################################################
printUsage() {
	echo -e "\nusage idc-portview <context> <server >"
	echo "<context> is one of: PRODUCTION|pro DEVELOPMENT|dev SDK|sdk"
	echo "<server> is either ALL or one or more of:"
	echo -e "\t authN authZ api coord topoBridge rm stubPSS lookup wbui"
	#echo "\t stubPCE bwPCE connPCE dijPCE vlanPCE nullAGG stubPSS"
	echo -e "\t bwPCE connPCE dijPCE vlanPCE nullAGG notifyBridge wsnbroker"
	exit 1
}

###########################################################################
#Subroutines to find port
###########################################################################
findPort() {
	#prompt user for port number
	printf "Enter the new port number to run $SERVICE on: "
	read userport;
	stty echo;
	echo "";

	Config=$(sh $OSCARS_DIST/bin/parseManifest.sh $SERVICE $CONTEXT $fileLoc | sed "s/'//g")
	echo "Config file:$Config"
	Service=$(echo $Config | awk -F/ '$1~//{print $2}')
echo "Service :$Service"	
	Conf=$(echo $Config | awk -F/ '$1~//{print $3}')
	Yaml=$(echo $Config | awk -F/ '$1~//{print $4}' | sed "s/'//g")
	#echo "Conf: $Conf, Yaml=$Yaml";
	#get server configuration from server-cxf...yaml now
	serverConfig=$(sh $OSCARS_DIST/bin/parseManifest.sh $SERVICE $CONTEXT $fileLoc server-cxf.xml| sed "s/'//g")
	#echo "Server config file: $serverConfig"
	Service_cxf=$(echo $serverConfig | awk -F/ '$1~//{print $2}')
	Conf_cxf=$(echo $serverConfig| awk -F/ '$1~//{print $3}')
	Yaml_cxf=$(echo $serverConfig | awk -F/ '$1~//{print $4}' | sed "s/'//g")
	#echo "Conf: $Conf_cxf, Yaml=$Yaml_cxf";	
	if [ "$Conf" == "conf" ]; then
		port=$(awk -F: '$1~/publishTo/{print $4}' $OSCARS_HOME/$Service/$Conf/$Yaml)
	elif [ "$Conf" == "config" ]; then
		port=$(awk -F: '$1~/publishTo/{print $4}' $OSCARS_DIST/$Service/$Conf/$Yaml)
	fi
	port=$(echo $port | sed "s/[^0-9]//g") 
	printf "Are you sure you want to replace port number from $port to $userport? y/n ";
	ans=0;
	while [ $ans == 0 ]; do
   		read ans;
   		if [ "$ans" != "y" ] && [ "$ans" != "Y" ] && [ "$ans" != "n" ] && [ "$ans" != "N" ]; then
			ans=0;
   		fi
	done	
	if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
		########## The below set of code may be a better way to replace the port, so that no other matching numeric (say, password)
		############# which may happen to be the same as port number, gets replaced.
		################ However, need to revisit the "SED" command. Commenting for now
		#toReplace=$(awk -F: '$1~/publishTo/{print $0}' $OSCARS_HOME/$Service/$Conf/$Yaml)
		#echo "ToReplace == $toReplace"
		#replaced=$(echo $toReplace | sed "s/[0-9][0-9]*/$userport/g")
		#echo "replaced: $replaced END";
		#sed -i -e "s/$toReplace/$replaced/" $OSCARS_HOME/$Service/$Conf/$Yaml;
		#################end comment for searching "publishTo...port...etc #################		
		#sed -i -e "s/[0-9][0-9]*/$userport/g" $OSCARS_HOME/$Service/$Conf/$Yaml;# this would work too
	
	  	#######replace the original port with the new one	
		sed -i -e "s/$port/$userport/g" $OSCARS_HOME/$Service/$Conf/$Yaml;
		#replace in server_cxf.xml
		sed -i -e 's/<httpj:engine port=\"'$port'\">/<httpj:engine port=\"'$userport'\">/' $OSCARS_HOME/$Service_cxf/$Conf_cxf/$Yaml_cxf
		echo "The port number for $SERVICE has been replaced to $userport";
   		echo $SERVICE set to run in context $CONTEXT on port $userport. Restart service to start using this port.
	fi
   	port=0  
}

viewWebUIPort(){
	# prompt user for port number
	printf "Enter the new port number to run $SERVICE on: "
   	read jettyport;
   	stty echo;
   	echo "";

	#Config=$(sh $OSCARS_DIST/bin/parseManifest.sh $SERVICE $CONTEXT $fileLoc )
	Config=$(sh $OSCARS_DIST/bin/parseManifest.sh WBUIService $CONTEXT wbui jetty.xml)
	Service=$(echo $Config | awk -F/ '$1~//{print $2}')
	Conf=$(echo $Config | awk -F/ '$1~//{print $3}')
	Yaml=$(echo $Config | awk -F/ '$1~//{print $4}' | sed "s/'//g")
	if [ "$Conf" == "conf" ]; then
		port=$(awk -F\" '$4~/jetty.port/{print $6}' $OSCARS_HOME/$Service/$Conf/$Yaml)
	elif [ "$Conf" == "config" ]; then
		port=$(awk -F\" '$4~/jetty.port/{print $6}' $OSCARS_DIST/$Service/$Conf/$Yaml)
	fi
	port=$(echo $port | sed "s/[^0-9]//g")
	printf "Are you sure you want to replace port number from $port to $jettyport? y/n ";
 	ans=0;
	while [ $ans == 0 ]; do
		read ans;
		if [ "$ans" != "y" ] && [ "$ans" != "Y" ] && [ "$ans" != "n" ] && [ "$ans" != "N" ]; then
			ans=0;
		fi
	done
 	if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
	#Again, like in the above subroutine, search for "<SystemProperty name="jetty.port" default="xxxx" before replacing
 		sed -i -e "s/$port/$jettyport/" $OSCARS_HOME/$Service/$Conf/$Yaml;
		echo "The port number for $Service has been replaced to $jettyport";
		if [ $? != 0 ]; then
			echo "--The port number change was not successful."
			echo "--Please change it manually by changing the entry in lines like "<SystemProperty name="jetty.port" default="xxxx"/>" in file $OSCARS_HOME/$Service/$Conf/$Yaml"
			exit 1;
        	fi
	fi
	
	echo WBUISERVICE set to run in context $CONTEXT on port $jettyport. Please restart this service to start using this port.
	#neutralize
	port=0 
}

#######
# execution starts here
if [ $# -lt 2 ]; then
    printUsage
fi

currDir=$(pwd)
CONTEXT=$1
case $1 in
    d|D|dev|DEV) CONTEXT="DEVELOPMENT";;
    p|P|pro|PRO) CONTEXT="PRODUCTION";;
    t|T|test|TEST) CONTEXT="UNITTEST";;
    s|S|sdk) CONTEXT="SDK";;
esac
   
if [ "$CONTEXT" ==  "PRODUCTION" ] || [ "$CONTEXT" == "UNITTEST" ] || [ "$CONTEXT" == "DEVELOPMENT" ] || [ "$CONTEXT" == "SDK" ]; then
    echo "Finding ports for services in CONTEXT $CONTEXT"
else
    echo "CONTEXT  $CONTEXT is not recognized"
    printUsage
fi
shift

#loop for "ALL" option
#Removed WBUI for specific handling
#_allLocations=(authN authZ api coordinator topoBridge resourceManager stubPSS lookup pce bandwidthPCE connectivityPCE dijkstraPCE vlanPCE pce notificationBridge wsnbroker) #TBD:nullAGG==pce check
#_allServices=(AuthNService AuthZService OSCARSService CoordService TopoBridgeService ResourceManagerService PSSService LookupService StubPCE BandwidthPCE ConnectivityPCE DijkstraPCE VlanPCE NullAggregator NotificationBridgeService WSNBrokerService)
_allLocations=(authN authZ api coordinator topoBridge resourceManager stubPSS lookup bandwidthPCE connectivityPCE dijkstraPCE vlanPCE pce notificationBridge wsnbroker) #TBD:nullAGG==pce check
_allServices=(AuthNService AuthZService OSCARSService CoordService TopoBridgeService ResourceManagerService PSSService LookupService BandwidthPCE ConnectivityPCE DijkstraPCE VlanPCE NullAggregator NotificationBridgeService WSNBrokerService)

while [ ! -z $1 ]
    do 
    case $1 in
    ALL)
	index=0;
	for fileN in ${_allLocations[@]}
        do
		SERVICE=${_allServices[$index]};
		index=`expr $index + 1`;
		fileLoc=$fileN;
		findPort;		
	done
	# now separately call WBUI processing
	viewWebUIPort;
	#file location for each varies
	;;
    	authN)    SERVICE=${_allServices[0]}; fileLoc=${_allLocations[0]};findPort ;;#startauthN;;
    	authZ)    SERVICE=${_allServices[1]}; fileLoc=${_allLocations[0]};findPort;;
    	api)      SERVICE=${_allServices[2]}; fileLoc=${_allLocations[0]};findPort;;
    	coord)    SERVICE=${_allServices[3]}; fileLoc=${_allLocations[0]};findPort;;
    	topoBridge) SERVICE=${_allServices[4]}; fileLoc=${_allLocations[0]};findPort;;
    	rm)       SERVICE=${_allServices[5]}; fileLoc=${_allLocations[5]};findPort;;
    	stubPSS)  SERVICE=${_allServices[6]}; fileLoc=${_allLocations[6]};findPort;;
    	lookup)   SERVICE=${_allServices[7]}; fileLoc=${_allLocations[7]};findPort;;
    	#wbui)     SERVICE=${_allServices[8]}; fileLoc="${_allLocations[8]} jetty.xml";viewWebUIPort;;
    	wbui)     viewWebUIPort;;
    	#stubPCE)  SERVICE=${_allServices[8]}; fileLoc=${_allLocations[8]};findPort;;
    	bwPCE)    SERVICE=${_allServices[8]}; fileLoc=${_allLocations[8]};findPort;;
    	connPCE)  SERVICE=${_allServices[9]}; fileLoc=${_allLocations[9]};findPort;;
    	dijPCE)   SERVICE=${_allServices[10]}; fileLoc=${_allLocations[10]};findPort;;
    	vlanPCE)  SERVICE=${_allServices[11]}; fileLoc=${_allLocations[11]};findPort;;
    	nullAGG)  SERVICE=${_allServices[12]}; fileLoc=${_allLocations[12]};findPort;;
    	notifyBridge)     SERVICE=${_allServices[13]}; fileLoc=${_allLocations[13]};findPort;;
    	wsnbroker) SERVICE=${_allServices[14]}; fileLoc=${_allLocations[14]};findPort;;
    	*)        echo $1 not a recognized server
  esac
  shift
done

