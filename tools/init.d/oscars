#!/bin/bash

# Linux-style init.d OSCARS startup script

#
# Change and uncomment these to reflect your OSCARS environment
# if running this script under /etc/init.d
#
# No need to set if running this script directly from the
# tools/init.d directory.
#
# OSCARS_BASE=/path/to/installation/dir
# USER=username




# Get function library. Try the system functions first, then fail
# through to the local copy.
if [ -f /etc/rc.d/init.d/functions ]; then
    . /etc/rc.d/init.d/functions
elif [ -f ./functions ]; then
    . ./functions
else
    echo "init.d function library not found!"
    exit 2
fi





DESC="OSCARS core";
PROGNAME="oscars_core";
OSCARS_DIR_GUESS=`pwd`/../..
export OSCARS_BASE;
CORE_COMMAND=${OSCARS_BASE-$OSCARS_DIR_GUESS}/oscars_core.sh
PID_FILE=/tmp/${PROGNAME}.pid
LOCK_FILE=/tmp/${PROGNAME}.lock
DAEMON_STYLE=1
export DAEMON_STYLE;
export PID_FILE;


DAEMON_ARGS=" $CORE_COMMAND\
 --user=$USER \
--pid-file=$PID_FILE "

start() {
    echo -n $"Starting ${DESC}... "
    if [ -f $LOCK_FILE ]; then
        if [ -f $PID_FILE ]; then
            PID=`cat $PID_FILE`
            echo "Already running with pid: $PID"
        else
            echo "Locked at $LOCK_FILE. PID file not found at $PID_FILE."
        fi

        exit 2;
    elif [ -f $PID_FILE ]; then
        PID=`cat $PID_FILE`
        echo "Already running with pid: $PID"
        exit 2;
    else
        cd ${OSCARS_BASE-$OSCARS_DIR_GUESS}
        daemon $DAEMON_ARGS
        touch ${LOCK_FILE}
        sleep 1
        PID=`cat $PID_FILE`
        echo
        echo "PID: $PID"

        return
    fi
}
stop() {
    echo -n "Stopping ${DESC}... "
    if [ -f $LOCK_FILE ]; then
        if [ -f $PID_FILE ]; then
            PID=`cat $PID_FILE`
            echo -n "PID: $PID"
            killproc -p $PID_FILE
            rm -f ${LOCK_FILE}
            echo
            return
        else
            echo "Locked at $LOCK_FILE. PID file not found at $PID_FILE ."
            exit 2;
        fi
    elif [ -f $PID_FILE ]; then
        PID=`cat $PID_FILE`
        echo -n " PID: $PID"
        killproc -p $PID_FILE
        echo
        return
    else
        echo "Process is not running."
        exit 2;
    fi
 }



# See how we were called.
case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  status)
        status -p $PID_FILE $PROGNAME
        ;;
  restart)
        stop
        start
        ;;
  *)
        echo "Usage: ${DESC} {start|stop|restart}"
        exit 1
esac

exit $?
