################################################## 
# OSCARSNotify_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://docs.oasis-open.org/wsrf/bf-2
##############################

class ns1:
    targetNamespace = "http://docs.oasis-open.org/wsrf/bf-2"

    class BaseFaultType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://docs.oasis-open.org/wsrf/bf-2"
        type = (schema, "BaseFaultType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.BaseFaultType_Def.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax"), ZSI.TCtimes.gDateTime(pname=(ns,"Timestamp"), aname="_Timestamp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.w3.org/2005/08/addressing","EndpointReferenceType",lazy=False)(pname=(ns,"Originator"), aname="_Originator", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.ErrorCode_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.Description_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), self.__class__.FaultCause_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    self._Timestamp = None
                    self._Originator = None
                    self._ErrorCode = None
                    self._Description = []
                    self._FaultCause = None
                    return
            Holder.__name__ = "BaseFaultType_Holder"
            self.pyclass = Holder


        class ErrorCode_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "ErrorCode"
            schema = "http://docs.oasis-open.org/wsrf/bf-2"
            def __init__(self, **kw):
                ns = ns1.BaseFaultType_Def.ErrorCode_Dec.schema
                TClist = []
                kw["pname"] = ("http://docs.oasis-open.org/wsrf/bf-2","ErrorCode")
                kw["aname"] = "_ErrorCode"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    typecode = self
                    def __init__(self):
                        # pyclass
                        return
                Holder.__name__ = "ErrorCode_Holder"
                self.pyclass = Holder





        class Description_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Description"
            schema = "http://docs.oasis-open.org/wsrf/bf-2"
            def __init__(self, **kw):
                ns = ns1.BaseFaultType_Def.Description_Dec.schema
                TClist = []
                kw["pname"] = ("http://docs.oasis-open.org/wsrf/bf-2","Description")
                kw["aname"] = "_Description"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    typecode = self
                    def __init__(self):
                        # pyclass
                        return
                Holder.__name__ = "Description_Holder"
                self.pyclass = Holder





        class FaultCause_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "FaultCause"
            schema = "http://docs.oasis-open.org/wsrf/bf-2"
            def __init__(self, **kw):
                ns = ns1.BaseFaultType_Def.FaultCause_Dec.schema
                TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=1, maxOccurs=1, nillable=False, processContents="lax")]
                kw["pname"] = ("http://docs.oasis-open.org/wsrf/bf-2","FaultCause")
                kw["aname"] = "_FaultCause"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._any = None
                        return
                Holder.__name__ = "FaultCause_Holder"
                self.pyclass = Holder




    class BaseFault_Dec(ElementDeclaration):
        literal = "BaseFault"
        schema = "http://docs.oasis-open.org/wsrf/bf-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsrf/bf-2","BaseFault")
            kw["aname"] = "_BaseFault"
            if ns1.BaseFaultType_Def not in ns1.BaseFault_Dec.__bases__:
                bases = list(ns1.BaseFault_Dec.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns1.BaseFault_Dec.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "BaseFault_Dec_Holder"

# end class ns1 (tns: http://docs.oasis-open.org/wsrf/bf-2)

##############################
# targetNamespace
# http://ogf.org/schema/network/topology/ctrlPlane/20070626/
##############################

class ns2:
    targetNamespace = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"

    class CtrlPlaneTopologyContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlaneTopologyContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CtrlPlaneTopologyContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"idcId"), aname="_idcId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","domain",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GTD("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","CtrlPlaneDomainSignatureContent",lazy=False)(pname=(ns,"domainSignature"), aname="_domainSignature", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["id"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._idcId = None
                    self._domain = None
                    self._domainSignature = []
                    return
            Holder.__name__ = "CtrlPlaneTopologyContent_Holder"
            self.pyclass = Holder

    class CtrlPlaneDomainContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlaneDomainContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CtrlPlaneDomainContent_Def.schema
            TClist = [GED("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","node",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GED("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","port",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GED("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","link",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["id"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._node = None
                    self._port = None
                    self._link = None
                    return
            Holder.__name__ = "CtrlPlaneDomainContent_Holder"
            self.pyclass = Holder

    class CtrlPlaneNodeContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlaneNodeContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CtrlPlaneNodeContent_Def.schema
            TClist = [GTD("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","CtrlPlaneAddressContent",lazy=False)(pname=(ns,"address"), aname="_address", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","port",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["id"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._address = None
                    self._port = None
                    return
            Holder.__name__ = "CtrlPlaneNodeContent_Holder"
            self.pyclass = Holder

    class CtrlPlanePortContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlanePortContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CtrlPlanePortContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"capacity"), aname="_capacity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"maximumReservableCapacity"), aname="_maximumReservableCapacity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"minimumReservableCapacity"), aname="_minimumReservableCapacity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"granularity"), aname="_granularity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"unreservedCapacity"), aname="_unreservedCapacity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","link",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["id"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._capacity = None
                    self._maximumReservableCapacity = None
                    self._minimumReservableCapacity = None
                    self._granularity = None
                    self._unreservedCapacity = None
                    self._link = None
                    return
            Holder.__name__ = "CtrlPlanePortContent_Holder"
            self.pyclass = Holder

    class CtrlPlaneLinkContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlaneLinkContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CtrlPlaneLinkContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"remoteLinkId"), aname="_remoteLinkId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"remotePortId"), aname="_remotePortId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"remoteNodeId"), aname="_remoteNodeId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"remoteDomainId"), aname="_remoteDomainId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trafficEngineeringMetric"), aname="_trafficEngineeringMetric", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"linkProtectionTypes"), aname="_linkProtectionTypes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"capacity"), aname="_capacity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"maximumReservableCapacity"), aname="_maximumReservableCapacity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"minimumReservableCapacity"), aname="_minimumReservableCapacity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"granularity"), aname="_granularity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"unreservedCapacity"), aname="_unreservedCapacity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","CtrlPlaneAdministrativeGroup",lazy=False)(pname=(ns,"administrativeGroups"), aname="_administrativeGroups", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","CtrlPlaneSwcapContent",lazy=False)(pname=(ns,"SwitchingCapabilityDescriptors"), aname="_SwitchingCapabilityDescriptors", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["id"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._remoteLinkId = None
                    self._remotePortId = None
                    self._remoteNodeId = None
                    self._remoteDomainId = None
                    self._trafficEngineeringMetric = None
                    self._linkProtectionTypes = []
                    self._capacity = None
                    self._maximumReservableCapacity = None
                    self._minimumReservableCapacity = None
                    self._granularity = None
                    self._unreservedCapacity = None
                    self._administrativeGroups = []
                    self._SwitchingCapabilityDescriptors = None
                    return
            Holder.__name__ = "CtrlPlaneLinkContent_Holder"
            self.pyclass = Holder

    class CtrlPlanePathContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlanePathContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CtrlPlanePathContent_Def.schema
            TClist = [GTD("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","CtrlPlaneHopContent",lazy=False)(pname=(ns,"hop"), aname="_hop", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["id"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hop = []
                    return
            Holder.__name__ = "CtrlPlanePathContent_Holder"
            self.pyclass = Holder

    class CtrlPlaneHopContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlaneHopContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CtrlPlaneHopContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"domainIdRef"), aname="_domainIdRef", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"nodeIdRef"), aname="_nodeIdRef", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"portIdRef"), aname="_portIdRef", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"linkIdRef"), aname="_linkIdRef", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["id"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._domainIdRef = None
                    self._nodeIdRef = None
                    self._portIdRef = None
                    self._linkIdRef = None
                    return
            Holder.__name__ = "CtrlPlaneHopContent_Holder"
            self.pyclass = Holder

    class CtrlPlaneDomainSignatureContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlaneDomainSignatureContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CtrlPlaneDomainSignatureContent_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["domainId"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "CtrlPlaneDomainSignatureContent_Holder"
            self.pyclass = Holder

    class CtrlPlaneAddressContent_Def(ZSI.TC.String, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlaneAddressContent")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["value"] = ZSI.TC.String()
            self.attribute_typecode_dict["type"] = ZSI.TC.String()
            ZSI.TC.String.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CtrlPlaneSwcapContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlaneSwcapContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CtrlPlaneSwcapContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"switchingcapType"), aname="_switchingcapType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"encodingType"), aname="_encodingType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","CtrlPlaneSwitchingCapabilitySpecficInfo",lazy=False)(pname=(ns,"switchingCapabilitySpecficInfo"), aname="_switchingCapabilitySpecficInfo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._switchingcapType = None
                    self._encodingType = None
                    self._switchingCapabilitySpecficInfo = None
                    return
            Holder.__name__ = "CtrlPlaneSwcapContent_Holder"
            self.pyclass = Holder

    class CtrlPlaneAdministrativeGroup_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlaneAdministrativeGroup")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CtrlPlaneAdministrativeGroup_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"group"), aname="_group", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"groupID"), aname="_groupID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._group = None
                    self._groupID = None
                    return
            Holder.__name__ = "CtrlPlaneAdministrativeGroup_Holder"
            self.pyclass = Holder

    class CtrlPlaneSwitchingCapabilitySpecficInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlaneSwitchingCapabilitySpecficInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CtrlPlaneSwitchingCapabilitySpecficInfo_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"capability"), aname="_capability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"interfaceMTU"), aname="_interfaceMTU", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"vlanRangeAvailability"), aname="_vlanRangeAvailability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._capability = None
                    self._interfaceMTU = None
                    self._vlanRangeAvailability = None
                    return
            Holder.__name__ = "CtrlPlaneSwitchingCapabilitySpecficInfo_Holder"
            self.pyclass = Holder

    class topology_Dec(ElementDeclaration):
        literal = "topology"
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        def __init__(self, **kw):
            kw["pname"] = ("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","topology")
            kw["aname"] = "_topology"
            if ns2.CtrlPlaneTopologyContent_Def not in ns2.topology_Dec.__bases__:
                bases = list(ns2.topology_Dec.__bases__)
                bases.insert(0, ns2.CtrlPlaneTopologyContent_Def)
                ns2.topology_Dec.__bases__ = tuple(bases)

            ns2.CtrlPlaneTopologyContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "topology_Dec_Holder"

    class domain_Dec(ElementDeclaration):
        literal = "domain"
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        def __init__(self, **kw):
            kw["pname"] = ("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","domain")
            kw["aname"] = "_domain"
            if ns2.CtrlPlaneDomainContent_Def not in ns2.domain_Dec.__bases__:
                bases = list(ns2.domain_Dec.__bases__)
                bases.insert(0, ns2.CtrlPlaneDomainContent_Def)
                ns2.domain_Dec.__bases__ = tuple(bases)

            ns2.CtrlPlaneDomainContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "domain_Dec_Holder"

    class node_Dec(ElementDeclaration):
        literal = "node"
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        def __init__(self, **kw):
            kw["pname"] = ("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","node")
            kw["aname"] = "_node"
            if ns2.CtrlPlaneNodeContent_Def not in ns2.node_Dec.__bases__:
                bases = list(ns2.node_Dec.__bases__)
                bases.insert(0, ns2.CtrlPlaneNodeContent_Def)
                ns2.node_Dec.__bases__ = tuple(bases)

            ns2.CtrlPlaneNodeContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "node_Dec_Holder"

    class port_Dec(ElementDeclaration):
        literal = "port"
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        def __init__(self, **kw):
            kw["pname"] = ("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","port")
            kw["aname"] = "_port"
            if ns2.CtrlPlanePortContent_Def not in ns2.port_Dec.__bases__:
                bases = list(ns2.port_Dec.__bases__)
                bases.insert(0, ns2.CtrlPlanePortContent_Def)
                ns2.port_Dec.__bases__ = tuple(bases)

            ns2.CtrlPlanePortContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "port_Dec_Holder"

    class link_Dec(ElementDeclaration):
        literal = "link"
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        def __init__(self, **kw):
            kw["pname"] = ("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","link")
            kw["aname"] = "_link"
            if ns2.CtrlPlaneLinkContent_Def not in ns2.link_Dec.__bases__:
                bases = list(ns2.link_Dec.__bases__)
                bases.insert(0, ns2.CtrlPlaneLinkContent_Def)
                ns2.link_Dec.__bases__ = tuple(bases)

            ns2.CtrlPlaneLinkContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "link_Dec_Holder"

    class path_Dec(ElementDeclaration):
        literal = "path"
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        def __init__(self, **kw):
            kw["pname"] = ("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","path")
            kw["aname"] = "_path"
            if ns2.CtrlPlanePathContent_Def not in ns2.path_Dec.__bases__:
                bases = list(ns2.path_Dec.__bases__)
                bases.insert(0, ns2.CtrlPlanePathContent_Def)
                ns2.path_Dec.__bases__ = tuple(bases)

            ns2.CtrlPlanePathContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "path_Dec_Holder"

# end class ns2 (tns: http://ogf.org/schema/network/topology/ctrlPlane/20070626/)

##############################
# targetNamespace
# http://www.w3.org/2005/08/addressing
##############################

class ns3:
    targetNamespace = "http://www.w3.org/2005/08/addressing"

    class EndpointReferenceType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.w3.org/2005/08/addressing"
        type = (schema, "EndpointReferenceType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.EndpointReferenceType_Def.schema
            TClist = [GTD("http://www.w3.org/2005/08/addressing","AttributedURIType",lazy=False)(pname=(ns,"Address"), aname="_Address", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.w3.org/2005/08/addressing","ReferenceParametersType",lazy=False)(pname=(ns,"ReferenceParameters"), aname="_ReferenceParameters", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://www.w3.org/2005/08/addressing","Metadata",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Address = None
                    self._ReferenceParameters = None
                    self._Metadata = None
                    self._any = []
                    return
            Holder.__name__ = "EndpointReferenceType_Holder"
            self.pyclass = Holder

    class ReferenceParametersType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.w3.org/2005/08/addressing"
        type = (schema, "ReferenceParametersType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ReferenceParametersType_Def.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "ReferenceParametersType_Holder"
            self.pyclass = Holder

    class MetadataType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.w3.org/2005/08/addressing"
        type = (schema, "MetadataType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.MetadataType_Def.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "MetadataType_Holder"
            self.pyclass = Holder

    class RelatesToType_Def(ZSI.TC.URI, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://www.w3.org/2005/08/addressing"
        type = (schema, "RelatesToType")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["RelationshipType"] = ns3.RelationshipTypeOpenEnum_Def(None)
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.URI.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RelationshipTypeOpenEnum_Def(ZSI.TC.Union, TypeDefinition):
        memberTypes = [(u'http://www.w3.org/2005/08/addressing', u'RelationshipType'), (u'http://www.w3.org/2001/XMLSchema', u'anyURI')]
        schema = "http://www.w3.org/2005/08/addressing"
        type = (schema, "RelationshipTypeOpenEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.Union.__init__(self, pname, **kw)

    class RelationshipType_Def(ZSI.TC.URI, TypeDefinition):
        schema = "http://www.w3.org/2005/08/addressing"
        type = (schema, "RelationshipType")
        def __init__(self, pname, **kw):
            ZSI.TC.URI.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AttributedURIType_Def(ZSI.TC.URI, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://www.w3.org/2005/08/addressing"
        type = (schema, "AttributedURIType")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.URI.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FaultCodesOpenEnumType_Def(ZSI.TC.Union, TypeDefinition):
        memberTypes = [(u'http://www.w3.org/2005/08/addressing', u'FaultCodesType'), (u'http://www.w3.org/2001/XMLSchema', u'QName')]
        schema = "http://www.w3.org/2005/08/addressing"
        type = (schema, "FaultCodesOpenEnumType")
        def __init__(self, pname, **kw):
            ZSI.TC.Union.__init__(self, pname, **kw)

    class FaultCodesType_Def(ZSI.TC.QName, TypeDefinition):
        schema = "http://www.w3.org/2005/08/addressing"
        type = (schema, "FaultCodesType")
        def __init__(self, pname, **kw):
            ZSI.TC.QName.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AttributedUnsignedLongType_Def(ZSI.TCnumbers.IunsignedLong, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://www.w3.org/2005/08/addressing"
        type = (schema, "AttributedUnsignedLongType")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.IunsignedLong.__init__(self, pname, **kw)
            class Holder(long):
                typecode = self
            self.pyclass = Holder

    class AttributedQNameType_Def(ZSI.TC.QName, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://www.w3.org/2005/08/addressing"
        type = (schema, "AttributedQNameType")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.QName.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AttributedAnyType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.w3.org/2005/08/addressing"
        type = (schema, "AttributedAnyType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.AttributedAnyType_Def.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=1, maxOccurs=1, nillable=False, processContents="lax")]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = None
                    return
            Holder.__name__ = "AttributedAnyType_Holder"
            self.pyclass = Holder

    class ProblemActionType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.w3.org/2005/08/addressing"
        type = (schema, "ProblemActionType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ProblemActionType_Def.schema
            TClist = [GED("http://www.w3.org/2005/08/addressing","Action",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.URI(pname=(ns,"SoapAction"), aname="_SoapAction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Action = None
                    self._SoapAction = None
                    return
            Holder.__name__ = "ProblemActionType_Holder"
            self.pyclass = Holder

    class EndpointReference_Dec(ElementDeclaration):
        literal = "EndpointReference"
        schema = "http://www.w3.org/2005/08/addressing"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.w3.org/2005/08/addressing","EndpointReference")
            kw["aname"] = "_EndpointReference"
            if ns3.EndpointReferenceType_Def not in ns3.EndpointReference_Dec.__bases__:
                bases = list(ns3.EndpointReference_Dec.__bases__)
                bases.insert(0, ns3.EndpointReferenceType_Def)
                ns3.EndpointReference_Dec.__bases__ = tuple(bases)

            ns3.EndpointReferenceType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "EndpointReference_Dec_Holder"

    class Metadata_Dec(ElementDeclaration):
        literal = "Metadata"
        schema = "http://www.w3.org/2005/08/addressing"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.w3.org/2005/08/addressing","Metadata")
            kw["aname"] = "_Metadata"
            if ns3.MetadataType_Def not in ns3.Metadata_Dec.__bases__:
                bases = list(ns3.Metadata_Dec.__bases__)
                bases.insert(0, ns3.MetadataType_Def)
                ns3.Metadata_Dec.__bases__ = tuple(bases)

            ns3.MetadataType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Metadata_Dec_Holder"

    class MessageID_Dec(ElementDeclaration):
        literal = "MessageID"
        schema = "http://www.w3.org/2005/08/addressing"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.w3.org/2005/08/addressing","MessageID")
            kw["aname"] = "_MessageID"
            if ns3.AttributedURIType_Def not in ns3.MessageID_Dec.__bases__:
                bases = list(ns3.MessageID_Dec.__bases__)
                bases.insert(0, ns3.AttributedURIType_Def)
                ns3.MessageID_Dec.__bases__ = tuple(bases)

            ns3.AttributedURIType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "MessageID_Dec_Holder"

    class RelatesTo_Dec(ElementDeclaration):
        literal = "RelatesTo"
        schema = "http://www.w3.org/2005/08/addressing"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.w3.org/2005/08/addressing","RelatesTo")
            kw["aname"] = "_RelatesTo"
            if ns3.RelatesToType_Def not in ns3.RelatesTo_Dec.__bases__:
                bases = list(ns3.RelatesTo_Dec.__bases__)
                bases.insert(0, ns3.RelatesToType_Def)
                ns3.RelatesTo_Dec.__bases__ = tuple(bases)

            ns3.RelatesToType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RelatesTo_Dec_Holder"

    class ReplyTo_Dec(ElementDeclaration):
        literal = "ReplyTo"
        schema = "http://www.w3.org/2005/08/addressing"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.w3.org/2005/08/addressing","ReplyTo")
            kw["aname"] = "_ReplyTo"
            if ns3.EndpointReferenceType_Def not in ns3.ReplyTo_Dec.__bases__:
                bases = list(ns3.ReplyTo_Dec.__bases__)
                bases.insert(0, ns3.EndpointReferenceType_Def)
                ns3.ReplyTo_Dec.__bases__ = tuple(bases)

            ns3.EndpointReferenceType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ReplyTo_Dec_Holder"

    class From_Dec(ElementDeclaration):
        literal = "From"
        schema = "http://www.w3.org/2005/08/addressing"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.w3.org/2005/08/addressing","From")
            kw["aname"] = "_From"
            if ns3.EndpointReferenceType_Def not in ns3.From_Dec.__bases__:
                bases = list(ns3.From_Dec.__bases__)
                bases.insert(0, ns3.EndpointReferenceType_Def)
                ns3.From_Dec.__bases__ = tuple(bases)

            ns3.EndpointReferenceType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "From_Dec_Holder"

    class FaultTo_Dec(ElementDeclaration):
        literal = "FaultTo"
        schema = "http://www.w3.org/2005/08/addressing"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.w3.org/2005/08/addressing","FaultTo")
            kw["aname"] = "_FaultTo"
            if ns3.EndpointReferenceType_Def not in ns3.FaultTo_Dec.__bases__:
                bases = list(ns3.FaultTo_Dec.__bases__)
                bases.insert(0, ns3.EndpointReferenceType_Def)
                ns3.FaultTo_Dec.__bases__ = tuple(bases)

            ns3.EndpointReferenceType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "FaultTo_Dec_Holder"

    class To_Dec(ElementDeclaration):
        literal = "To"
        schema = "http://www.w3.org/2005/08/addressing"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.w3.org/2005/08/addressing","To")
            kw["aname"] = "_To"
            if ns3.AttributedURIType_Def not in ns3.To_Dec.__bases__:
                bases = list(ns3.To_Dec.__bases__)
                bases.insert(0, ns3.AttributedURIType_Def)
                ns3.To_Dec.__bases__ = tuple(bases)

            ns3.AttributedURIType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "To_Dec_Holder"

    class Action_Dec(ElementDeclaration):
        literal = "Action"
        schema = "http://www.w3.org/2005/08/addressing"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.w3.org/2005/08/addressing","Action")
            kw["aname"] = "_Action"
            if ns3.AttributedURIType_Def not in ns3.Action_Dec.__bases__:
                bases = list(ns3.Action_Dec.__bases__)
                bases.insert(0, ns3.AttributedURIType_Def)
                ns3.Action_Dec.__bases__ = tuple(bases)

            ns3.AttributedURIType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Action_Dec_Holder"

    class RetryAfter_Dec(ElementDeclaration):
        literal = "RetryAfter"
        schema = "http://www.w3.org/2005/08/addressing"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.w3.org/2005/08/addressing","RetryAfter")
            kw["aname"] = "_RetryAfter"
            if ns3.AttributedUnsignedLongType_Def not in ns3.RetryAfter_Dec.__bases__:
                bases = list(ns3.RetryAfter_Dec.__bases__)
                bases.insert(0, ns3.AttributedUnsignedLongType_Def)
                ns3.RetryAfter_Dec.__bases__ = tuple(bases)

            ns3.AttributedUnsignedLongType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RetryAfter_Dec_Holder"

    class ProblemHeaderQName_Dec(ElementDeclaration):
        literal = "ProblemHeaderQName"
        schema = "http://www.w3.org/2005/08/addressing"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.w3.org/2005/08/addressing","ProblemHeaderQName")
            kw["aname"] = "_ProblemHeaderQName"
            if ns3.AttributedQNameType_Def not in ns3.ProblemHeaderQName_Dec.__bases__:
                bases = list(ns3.ProblemHeaderQName_Dec.__bases__)
                bases.insert(0, ns3.AttributedQNameType_Def)
                ns3.ProblemHeaderQName_Dec.__bases__ = tuple(bases)

            ns3.AttributedQNameType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ProblemHeaderQName_Dec_Holder"

    class ProblemHeader_Dec(ElementDeclaration):
        literal = "ProblemHeader"
        schema = "http://www.w3.org/2005/08/addressing"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.w3.org/2005/08/addressing","ProblemHeader")
            kw["aname"] = "_ProblemHeader"
            if ns3.AttributedAnyType_Def not in ns3.ProblemHeader_Dec.__bases__:
                bases = list(ns3.ProblemHeader_Dec.__bases__)
                bases.insert(0, ns3.AttributedAnyType_Def)
                ns3.ProblemHeader_Dec.__bases__ = tuple(bases)

            ns3.AttributedAnyType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ProblemHeader_Dec_Holder"

    class ProblemIRI_Dec(ElementDeclaration):
        literal = "ProblemIRI"
        schema = "http://www.w3.org/2005/08/addressing"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.w3.org/2005/08/addressing","ProblemIRI")
            kw["aname"] = "_ProblemIRI"
            if ns3.AttributedURIType_Def not in ns3.ProblemIRI_Dec.__bases__:
                bases = list(ns3.ProblemIRI_Dec.__bases__)
                bases.insert(0, ns3.AttributedURIType_Def)
                ns3.ProblemIRI_Dec.__bases__ = tuple(bases)

            ns3.AttributedURIType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ProblemIRI_Dec_Holder"

    class ProblemAction_Dec(ElementDeclaration):
        literal = "ProblemAction"
        schema = "http://www.w3.org/2005/08/addressing"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.w3.org/2005/08/addressing","ProblemAction")
            kw["aname"] = "_ProblemAction"
            if ns3.ProblemActionType_Def not in ns3.ProblemAction_Dec.__bases__:
                bases = list(ns3.ProblemAction_Dec.__bases__)
                bases.insert(0, ns3.ProblemActionType_Def)
                ns3.ProblemAction_Dec.__bases__ = tuple(bases)

            ns3.ProblemActionType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ProblemAction_Dec_Holder"

# end class ns3 (tns: http://www.w3.org/2005/08/addressing)

##############################
# targetNamespace
# http://docs.oasis-open.org/wsn/b-2
##############################

class ns4:
    targetNamespace = "http://docs.oasis-open.org/wsn/b-2"

    class QueryExpressionType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "QueryExpressionType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns4.QueryExpressionType_Def.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs=1, nillable=False, processContents="lax")]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["Dialect"] = ZSI.TC.URI()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, mixed=True, mixed_aname="_text", **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = None
                    return
            Holder.__name__ = "QueryExpressionType_Holder"
            self.pyclass = Holder

    class TopicExpressionType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "TopicExpressionType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns4.TopicExpressionType_Def.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs=1, nillable=False, processContents="lax")]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["Dialect"] = ZSI.TC.URI()
                self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, mixed=True, mixed_aname="_text", **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = None
                    return
            Holder.__name__ = "TopicExpressionType_Holder"
            self.pyclass = Holder

    class FilterType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "FilterType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns4.FilterType_Def.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="strict")]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "FilterType_Holder"
            self.pyclass = Holder

    class SubscriptionPolicyType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "SubscriptionPolicyType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns4.SubscriptionPolicyType_Def.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "SubscriptionPolicyType_Holder"
            self.pyclass = Holder

    class NotificationMessageHolderType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "NotificationMessageHolderType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns4.NotificationMessageHolderType_Def.schema
            TClist = [GED("http://docs.oasis-open.org/wsn/b-2","SubscriptionReference",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://docs.oasis-open.org/wsn/b-2","Topic",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://docs.oasis-open.org/wsn/b-2","ProducerReference",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.Message_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SubscriptionReference = None
                    self._Topic = None
                    self._ProducerReference = None
                    self._Message = None
                    return
            Holder.__name__ = "NotificationMessageHolderType_Holder"
            self.pyclass = Holder


        class Message_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Message"
            schema = "http://docs.oasis-open.org/wsn/b-2"
            def __init__(self, **kw):
                ns = ns4.NotificationMessageHolderType_Def.Message_Dec.schema
                TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=1, maxOccurs=1, nillable=False, processContents="lax")]
                kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","Message")
                kw["aname"] = "_Message"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._any = None
                        return
                Holder.__name__ = "Message_Holder"
                self.pyclass = Holder




    class AbsoluteOrRelativeTimeType_Def(ZSI.TC.Union, TypeDefinition):
        memberTypes = [(u'http://www.w3.org/2001/XMLSchema', u'dateTime'), (u'http://www.w3.org/2001/XMLSchema', u'duration')]
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "AbsoluteOrRelativeTimeType")
        def __init__(self, pname, **kw):
            ZSI.TC.Union.__init__(self, pname, **kw)

    class SubscribeCreationFailedFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "SubscribeCreationFailedFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.SubscribeCreationFailedFaultType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns4.SubscribeCreationFailedFaultType_Def.__bases__:
                bases = list(ns4.SubscribeCreationFailedFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns4.SubscribeCreationFailedFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InvalidFilterFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "InvalidFilterFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.InvalidFilterFaultType_Def.schema
            TClist = [ZSI.TC.QName(pname=(ns,"UnknownFilter"), aname="_UnknownFilter", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns4.InvalidFilterFaultType_Def.__bases__:
                bases = list(ns4.InvalidFilterFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns4.InvalidFilterFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TopicExpressionDialectUnknownFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "TopicExpressionDialectUnknownFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.TopicExpressionDialectUnknownFaultType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns4.TopicExpressionDialectUnknownFaultType_Def.__bases__:
                bases = list(ns4.TopicExpressionDialectUnknownFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns4.TopicExpressionDialectUnknownFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InvalidTopicExpressionFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "InvalidTopicExpressionFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.InvalidTopicExpressionFaultType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns4.InvalidTopicExpressionFaultType_Def.__bases__:
                bases = list(ns4.InvalidTopicExpressionFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns4.InvalidTopicExpressionFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TopicNotSupportedFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "TopicNotSupportedFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.TopicNotSupportedFaultType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns4.TopicNotSupportedFaultType_Def.__bases__:
                bases = list(ns4.TopicNotSupportedFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns4.TopicNotSupportedFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MultipleTopicsSpecifiedFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "MultipleTopicsSpecifiedFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.MultipleTopicsSpecifiedFaultType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns4.MultipleTopicsSpecifiedFaultType_Def.__bases__:
                bases = list(ns4.MultipleTopicsSpecifiedFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns4.MultipleTopicsSpecifiedFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InvalidProducerPropertiesExpressionFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "InvalidProducerPropertiesExpressionFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.InvalidProducerPropertiesExpressionFaultType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns4.InvalidProducerPropertiesExpressionFaultType_Def.__bases__:
                bases = list(ns4.InvalidProducerPropertiesExpressionFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns4.InvalidProducerPropertiesExpressionFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InvalidMessageContentExpressionFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "InvalidMessageContentExpressionFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.InvalidMessageContentExpressionFaultType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns4.InvalidMessageContentExpressionFaultType_Def.__bases__:
                bases = list(ns4.InvalidMessageContentExpressionFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns4.InvalidMessageContentExpressionFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UnrecognizedPolicyRequestFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "UnrecognizedPolicyRequestFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.UnrecognizedPolicyRequestFaultType_Def.schema
            TClist = [ZSI.TC.QName(pname=(ns,"UnrecognizedPolicy"), aname="_UnrecognizedPolicy", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns4.UnrecognizedPolicyRequestFaultType_Def.__bases__:
                bases = list(ns4.UnrecognizedPolicyRequestFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns4.UnrecognizedPolicyRequestFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UnsupportedPolicyRequestFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "UnsupportedPolicyRequestFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.UnsupportedPolicyRequestFaultType_Def.schema
            TClist = [ZSI.TC.QName(pname=(ns,"UnsupportedPolicy"), aname="_UnsupportedPolicy", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns4.UnsupportedPolicyRequestFaultType_Def.__bases__:
                bases = list(ns4.UnsupportedPolicyRequestFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns4.UnsupportedPolicyRequestFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NotifyMessageNotSupportedFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "NotifyMessageNotSupportedFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.NotifyMessageNotSupportedFaultType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns4.NotifyMessageNotSupportedFaultType_Def.__bases__:
                bases = list(ns4.NotifyMessageNotSupportedFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns4.NotifyMessageNotSupportedFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UnacceptableInitialTerminationTimeFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "UnacceptableInitialTerminationTimeFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.UnacceptableInitialTerminationTimeFaultType_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname=(ns,"MinimumTime"), aname="_MinimumTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"MaximumTime"), aname="_MaximumTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns4.UnacceptableInitialTerminationTimeFaultType_Def.__bases__:
                bases = list(ns4.UnacceptableInitialTerminationTimeFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns4.UnacceptableInitialTerminationTimeFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NoCurrentMessageOnTopicFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "NoCurrentMessageOnTopicFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.NoCurrentMessageOnTopicFaultType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns4.NoCurrentMessageOnTopicFaultType_Def.__bases__:
                bases = list(ns4.NoCurrentMessageOnTopicFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns4.NoCurrentMessageOnTopicFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UnableToGetMessagesFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "UnableToGetMessagesFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.UnableToGetMessagesFaultType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns4.UnableToGetMessagesFaultType_Def.__bases__:
                bases = list(ns4.UnableToGetMessagesFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns4.UnableToGetMessagesFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UnableToDestroyPullPointFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "UnableToDestroyPullPointFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.UnableToDestroyPullPointFaultType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns4.UnableToDestroyPullPointFaultType_Def.__bases__:
                bases = list(ns4.UnableToDestroyPullPointFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns4.UnableToDestroyPullPointFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UnableToCreatePullPointFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "UnableToCreatePullPointFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.UnableToCreatePullPointFaultType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns4.UnableToCreatePullPointFaultType_Def.__bases__:
                bases = list(ns4.UnableToCreatePullPointFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns4.UnableToCreatePullPointFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UnacceptableTerminationTimeFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "UnacceptableTerminationTimeFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.UnacceptableTerminationTimeFaultType_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname=(ns,"MinimumTime"), aname="_MinimumTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"MaximumTime"), aname="_MaximumTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns4.UnacceptableTerminationTimeFaultType_Def.__bases__:
                bases = list(ns4.UnacceptableTerminationTimeFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns4.UnacceptableTerminationTimeFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UnableToDestroySubscriptionFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "UnableToDestroySubscriptionFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.UnableToDestroySubscriptionFaultType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns4.UnableToDestroySubscriptionFaultType_Def.__bases__:
                bases = list(ns4.UnableToDestroySubscriptionFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns4.UnableToDestroySubscriptionFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PauseFailedFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "PauseFailedFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.PauseFailedFaultType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns4.PauseFailedFaultType_Def.__bases__:
                bases = list(ns4.PauseFailedFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns4.PauseFailedFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ResumeFailedFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/b-2"
        type = (schema, "ResumeFailedFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.ResumeFailedFaultType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns4.ResumeFailedFaultType_Def.__bases__:
                bases = list(ns4.ResumeFailedFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns4.ResumeFailedFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TopicExpression_Dec(ElementDeclaration):
        literal = "TopicExpression"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","TopicExpression")
            kw["aname"] = "_TopicExpression"
            if ns4.TopicExpressionType_Def not in ns4.TopicExpression_Dec.__bases__:
                bases = list(ns4.TopicExpression_Dec.__bases__)
                bases.insert(0, ns4.TopicExpressionType_Def)
                ns4.TopicExpression_Dec.__bases__ = tuple(bases)

            ns4.TopicExpressionType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "TopicExpression_Dec_Holder"

    class FixedTopicSet_Dec(ZSI.TC.Boolean, ElementDeclaration):
        literal = "FixedTopicSet"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","FixedTopicSet")
            kw["aname"] = "_FixedTopicSet"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_FixedTopicSet_immutable_holder"
            ZSI.TC.Boolean.__init__(self, **kw)

    class TopicExpressionDialect_Dec(ZSI.TC.URI, ElementDeclaration):
        literal = "TopicExpressionDialect"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","TopicExpressionDialect")
            kw["aname"] = "_TopicExpressionDialect"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_TopicExpressionDialect_immutable_holder"
            ZSI.TC.URI.__init__(self, **kw)

    class NotificationProducerRP_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "NotificationProducerRP"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.NotificationProducerRP_Dec.schema
            TClist = [GED("http://docs.oasis-open.org/wsn/b-2","TopicExpression",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GED("http://docs.oasis-open.org/wsn/b-2","FixedTopicSet",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://docs.oasis-open.org/wsn/b-2","TopicExpressionDialect",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GED("http://docs.oasis-open.org/wsn/t-1","TopicSet",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","NotificationProducerRP")
            kw["aname"] = "_NotificationProducerRP"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TopicExpression = None
                    self._FixedTopicSet = None
                    self._TopicExpressionDialect = None
                    self._TopicSet = None
                    return
            Holder.__name__ = "NotificationProducerRP_Holder"
            self.pyclass = Holder

    class ConsumerReference_Dec(ElementDeclaration):
        literal = "ConsumerReference"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","ConsumerReference")
            kw["aname"] = "_ConsumerReference"
            if ns3.EndpointReferenceType_Def not in ns4.ConsumerReference_Dec.__bases__:
                bases = list(ns4.ConsumerReference_Dec.__bases__)
                bases.insert(0, ns3.EndpointReferenceType_Def)
                ns4.ConsumerReference_Dec.__bases__ = tuple(bases)

            ns3.EndpointReferenceType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ConsumerReference_Dec_Holder"

    class Filter_Dec(ElementDeclaration):
        literal = "Filter"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","Filter")
            kw["aname"] = "_Filter"
            if ns4.FilterType_Def not in ns4.Filter_Dec.__bases__:
                bases = list(ns4.Filter_Dec.__bases__)
                bases.insert(0, ns4.FilterType_Def)
                ns4.Filter_Dec.__bases__ = tuple(bases)

            ns4.FilterType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Filter_Dec_Holder"

    class SubscriptionPolicy_Dec(ElementDeclaration):
        literal = "SubscriptionPolicy"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","SubscriptionPolicy")
            kw["aname"] = "_SubscriptionPolicy"
            if ns4.SubscriptionPolicyType_Def not in ns4.SubscriptionPolicy_Dec.__bases__:
                bases = list(ns4.SubscriptionPolicy_Dec.__bases__)
                bases.insert(0, ns4.SubscriptionPolicyType_Def)
                ns4.SubscriptionPolicy_Dec.__bases__ = tuple(bases)

            ns4.SubscriptionPolicyType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SubscriptionPolicy_Dec_Holder"

    class CreationTime_Dec(ZSI.TCtimes.gDateTime, ElementDeclaration):
        literal = "CreationTime"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","CreationTime")
            kw["aname"] = "_CreationTime"
            class IHolder(tuple): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_CreationTime_immutable_holder"
            ZSI.TCtimes.gDateTime.__init__(self, **kw)

    class SubscriptionManagerRP_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SubscriptionManagerRP"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.SubscriptionManagerRP_Dec.schema
            TClist = [GED("http://docs.oasis-open.org/wsn/b-2","ConsumerReference",lazy=False, isref=True)(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://docs.oasis-open.org/wsn/b-2","Filter",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://docs.oasis-open.org/wsn/b-2","SubscriptionPolicy",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://docs.oasis-open.org/wsn/b-2","CreationTime",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","SubscriptionManagerRP")
            kw["aname"] = "_SubscriptionManagerRP"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ConsumerReference = None
                    self._Filter = None
                    self._SubscriptionPolicy = None
                    self._CreationTime = None
                    return
            Holder.__name__ = "SubscriptionManagerRP_Holder"
            self.pyclass = Holder

    class SubscriptionReference_Dec(ElementDeclaration):
        literal = "SubscriptionReference"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","SubscriptionReference")
            kw["aname"] = "_SubscriptionReference"
            if ns3.EndpointReferenceType_Def not in ns4.SubscriptionReference_Dec.__bases__:
                bases = list(ns4.SubscriptionReference_Dec.__bases__)
                bases.insert(0, ns3.EndpointReferenceType_Def)
                ns4.SubscriptionReference_Dec.__bases__ = tuple(bases)

            ns3.EndpointReferenceType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SubscriptionReference_Dec_Holder"

    class Topic_Dec(ElementDeclaration):
        literal = "Topic"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","Topic")
            kw["aname"] = "_Topic"
            if ns4.TopicExpressionType_Def not in ns4.Topic_Dec.__bases__:
                bases = list(ns4.Topic_Dec.__bases__)
                bases.insert(0, ns4.TopicExpressionType_Def)
                ns4.Topic_Dec.__bases__ = tuple(bases)

            ns4.TopicExpressionType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Topic_Dec_Holder"

    class ProducerReference_Dec(ElementDeclaration):
        literal = "ProducerReference"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","ProducerReference")
            kw["aname"] = "_ProducerReference"
            if ns3.EndpointReferenceType_Def not in ns4.ProducerReference_Dec.__bases__:
                bases = list(ns4.ProducerReference_Dec.__bases__)
                bases.insert(0, ns3.EndpointReferenceType_Def)
                ns4.ProducerReference_Dec.__bases__ = tuple(bases)

            ns3.EndpointReferenceType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ProducerReference_Dec_Holder"

    class NotificationMessage_Dec(ElementDeclaration):
        literal = "NotificationMessage"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","NotificationMessage")
            kw["aname"] = "_NotificationMessage"
            if ns4.NotificationMessageHolderType_Def not in ns4.NotificationMessage_Dec.__bases__:
                bases = list(ns4.NotificationMessage_Dec.__bases__)
                bases.insert(0, ns4.NotificationMessageHolderType_Def)
                ns4.NotificationMessage_Dec.__bases__ = tuple(bases)

            ns4.NotificationMessageHolderType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "NotificationMessage_Dec_Holder"

    class Notify_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Notify"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.Notify_Dec.schema
            TClist = [GED("http://docs.oasis-open.org/wsn/b-2","NotificationMessage",lazy=False, isref=True)(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","Notify")
            kw["aname"] = "_Notify"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._NotificationMessage = None
                    self._any = []
                    return
            Holder.__name__ = "Notify_Holder"
            self.pyclass = Holder

    class CurrentTime_Dec(ZSI.TCtimes.gDateTime, ElementDeclaration):
        literal = "CurrentTime"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","CurrentTime")
            kw["aname"] = "_CurrentTime"
            class IHolder(tuple): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_CurrentTime_immutable_holder"
            ZSI.TCtimes.gDateTime.__init__(self, **kw)

    class TerminationTime_Dec(ZSI.TCtimes.gDateTime, ElementDeclaration):
        literal = "TerminationTime"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","TerminationTime")
            kw["aname"] = "_TerminationTime"
            class IHolder(tuple): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_TerminationTime_immutable_holder"
            ZSI.TCtimes.gDateTime.__init__(self, **kw)

    class ProducerProperties_Dec(ElementDeclaration):
        literal = "ProducerProperties"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","ProducerProperties")
            kw["aname"] = "_ProducerProperties"
            if ns4.QueryExpressionType_Def not in ns4.ProducerProperties_Dec.__bases__:
                bases = list(ns4.ProducerProperties_Dec.__bases__)
                bases.insert(0, ns4.QueryExpressionType_Def)
                ns4.ProducerProperties_Dec.__bases__ = tuple(bases)

            ns4.QueryExpressionType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ProducerProperties_Dec_Holder"

    class MessageContent_Dec(ElementDeclaration):
        literal = "MessageContent"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","MessageContent")
            kw["aname"] = "_MessageContent"
            if ns4.QueryExpressionType_Def not in ns4.MessageContent_Dec.__bases__:
                bases = list(ns4.MessageContent_Dec.__bases__)
                bases.insert(0, ns4.QueryExpressionType_Def)
                ns4.MessageContent_Dec.__bases__ = tuple(bases)

            ns4.QueryExpressionType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "MessageContent_Dec_Holder"

    class UseRaw_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "UseRaw"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.UseRaw_Dec.schema
            TClist = []
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","UseRaw")
            kw["aname"] = "_UseRaw"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "UseRaw_Holder"
            self.pyclass = Holder

    class Subscribe_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Subscribe"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.Subscribe_Dec.schema
            TClist = [GTD("http://www.w3.org/2005/08/addressing","EndpointReferenceType",lazy=False)(pname=(ns,"ConsumerReference"), aname="_ConsumerReference", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://docs.oasis-open.org/wsn/b-2","FilterType",lazy=False)(pname=(ns,"Filter"), aname="_Filter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://docs.oasis-open.org/wsn/b-2","AbsoluteOrRelativeTimeType",lazy=False)(pname=(ns,"InitialTerminationTime"), aname="_InitialTerminationTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), self.__class__.SubscriptionPolicy_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","Subscribe")
            kw["aname"] = "_Subscribe"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ConsumerReference = None
                    self._Filter = None
                    self._InitialTerminationTime = None
                    self._SubscriptionPolicy = None
                    self._any = []
                    return
            Holder.__name__ = "Subscribe_Holder"
            self.pyclass = Holder


        class SubscriptionPolicy_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "SubscriptionPolicy"
            schema = "http://docs.oasis-open.org/wsn/b-2"
            def __init__(self, **kw):
                ns = ns4.Subscribe_Dec.SubscriptionPolicy_Dec.schema
                TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
                kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","SubscriptionPolicy")
                kw["aname"] = "_SubscriptionPolicy"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._any = []
                        return
                Holder.__name__ = "SubscriptionPolicy_Holder"
                self.pyclass = Holder




    class SubscribeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SubscribeResponse"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.SubscribeResponse_Dec.schema
            TClist = [GTD("http://www.w3.org/2005/08/addressing","EndpointReferenceType",lazy=False)(pname=(ns,"SubscriptionReference"), aname="_SubscriptionReference", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://docs.oasis-open.org/wsn/b-2","CurrentTime",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://docs.oasis-open.org/wsn/b-2","TerminationTime",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","SubscribeResponse")
            kw["aname"] = "_SubscribeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SubscriptionReference = None
                    self._CurrentTime = None
                    self._TerminationTime = None
                    self._any = []
                    return
            Holder.__name__ = "SubscribeResponse_Holder"
            self.pyclass = Holder

    class GetCurrentMessage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetCurrentMessage"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.GetCurrentMessage_Dec.schema
            TClist = [GTD("http://docs.oasis-open.org/wsn/b-2","TopicExpressionType",lazy=False)(pname=(ns,"Topic"), aname="_Topic", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","GetCurrentMessage")
            kw["aname"] = "_GetCurrentMessage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Topic = None
                    self._any = []
                    return
            Holder.__name__ = "GetCurrentMessage_Holder"
            self.pyclass = Holder

    class GetCurrentMessageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetCurrentMessageResponse"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.GetCurrentMessageResponse_Dec.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","GetCurrentMessageResponse")
            kw["aname"] = "_GetCurrentMessageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "GetCurrentMessageResponse_Holder"
            self.pyclass = Holder

    class SubscribeCreationFailedFault_Dec(ElementDeclaration):
        literal = "SubscribeCreationFailedFault"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","SubscribeCreationFailedFault")
            kw["aname"] = "_SubscribeCreationFailedFault"
            if ns4.SubscribeCreationFailedFaultType_Def not in ns4.SubscribeCreationFailedFault_Dec.__bases__:
                bases = list(ns4.SubscribeCreationFailedFault_Dec.__bases__)
                bases.insert(0, ns4.SubscribeCreationFailedFaultType_Def)
                ns4.SubscribeCreationFailedFault_Dec.__bases__ = tuple(bases)

            ns4.SubscribeCreationFailedFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SubscribeCreationFailedFault_Dec_Holder"

    class InvalidFilterFault_Dec(ElementDeclaration):
        literal = "InvalidFilterFault"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","InvalidFilterFault")
            kw["aname"] = "_InvalidFilterFault"
            if ns4.InvalidFilterFaultType_Def not in ns4.InvalidFilterFault_Dec.__bases__:
                bases = list(ns4.InvalidFilterFault_Dec.__bases__)
                bases.insert(0, ns4.InvalidFilterFaultType_Def)
                ns4.InvalidFilterFault_Dec.__bases__ = tuple(bases)

            ns4.InvalidFilterFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "InvalidFilterFault_Dec_Holder"

    class TopicExpressionDialectUnknownFault_Dec(ElementDeclaration):
        literal = "TopicExpressionDialectUnknownFault"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","TopicExpressionDialectUnknownFault")
            kw["aname"] = "_TopicExpressionDialectUnknownFault"
            if ns4.TopicExpressionDialectUnknownFaultType_Def not in ns4.TopicExpressionDialectUnknownFault_Dec.__bases__:
                bases = list(ns4.TopicExpressionDialectUnknownFault_Dec.__bases__)
                bases.insert(0, ns4.TopicExpressionDialectUnknownFaultType_Def)
                ns4.TopicExpressionDialectUnknownFault_Dec.__bases__ = tuple(bases)

            ns4.TopicExpressionDialectUnknownFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "TopicExpressionDialectUnknownFault_Dec_Holder"

    class InvalidTopicExpressionFault_Dec(ElementDeclaration):
        literal = "InvalidTopicExpressionFault"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","InvalidTopicExpressionFault")
            kw["aname"] = "_InvalidTopicExpressionFault"
            if ns4.InvalidTopicExpressionFaultType_Def not in ns4.InvalidTopicExpressionFault_Dec.__bases__:
                bases = list(ns4.InvalidTopicExpressionFault_Dec.__bases__)
                bases.insert(0, ns4.InvalidTopicExpressionFaultType_Def)
                ns4.InvalidTopicExpressionFault_Dec.__bases__ = tuple(bases)

            ns4.InvalidTopicExpressionFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "InvalidTopicExpressionFault_Dec_Holder"

    class TopicNotSupportedFault_Dec(ElementDeclaration):
        literal = "TopicNotSupportedFault"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","TopicNotSupportedFault")
            kw["aname"] = "_TopicNotSupportedFault"
            if ns4.TopicNotSupportedFaultType_Def not in ns4.TopicNotSupportedFault_Dec.__bases__:
                bases = list(ns4.TopicNotSupportedFault_Dec.__bases__)
                bases.insert(0, ns4.TopicNotSupportedFaultType_Def)
                ns4.TopicNotSupportedFault_Dec.__bases__ = tuple(bases)

            ns4.TopicNotSupportedFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "TopicNotSupportedFault_Dec_Holder"

    class MultipleTopicsSpecifiedFault_Dec(ElementDeclaration):
        literal = "MultipleTopicsSpecifiedFault"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","MultipleTopicsSpecifiedFault")
            kw["aname"] = "_MultipleTopicsSpecifiedFault"
            if ns4.MultipleTopicsSpecifiedFaultType_Def not in ns4.MultipleTopicsSpecifiedFault_Dec.__bases__:
                bases = list(ns4.MultipleTopicsSpecifiedFault_Dec.__bases__)
                bases.insert(0, ns4.MultipleTopicsSpecifiedFaultType_Def)
                ns4.MultipleTopicsSpecifiedFault_Dec.__bases__ = tuple(bases)

            ns4.MultipleTopicsSpecifiedFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "MultipleTopicsSpecifiedFault_Dec_Holder"

    class InvalidProducerPropertiesExpressionFault_Dec(ElementDeclaration):
        literal = "InvalidProducerPropertiesExpressionFault"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","InvalidProducerPropertiesExpressionFault")
            kw["aname"] = "_InvalidProducerPropertiesExpressionFault"
            if ns4.InvalidProducerPropertiesExpressionFaultType_Def not in ns4.InvalidProducerPropertiesExpressionFault_Dec.__bases__:
                bases = list(ns4.InvalidProducerPropertiesExpressionFault_Dec.__bases__)
                bases.insert(0, ns4.InvalidProducerPropertiesExpressionFaultType_Def)
                ns4.InvalidProducerPropertiesExpressionFault_Dec.__bases__ = tuple(bases)

            ns4.InvalidProducerPropertiesExpressionFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "InvalidProducerPropertiesExpressionFault_Dec_Holder"

    class InvalidMessageContentExpressionFault_Dec(ElementDeclaration):
        literal = "InvalidMessageContentExpressionFault"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","InvalidMessageContentExpressionFault")
            kw["aname"] = "_InvalidMessageContentExpressionFault"
            if ns4.InvalidMessageContentExpressionFaultType_Def not in ns4.InvalidMessageContentExpressionFault_Dec.__bases__:
                bases = list(ns4.InvalidMessageContentExpressionFault_Dec.__bases__)
                bases.insert(0, ns4.InvalidMessageContentExpressionFaultType_Def)
                ns4.InvalidMessageContentExpressionFault_Dec.__bases__ = tuple(bases)

            ns4.InvalidMessageContentExpressionFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "InvalidMessageContentExpressionFault_Dec_Holder"

    class UnrecognizedPolicyRequestFault_Dec(ElementDeclaration):
        literal = "UnrecognizedPolicyRequestFault"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","UnrecognizedPolicyRequestFault")
            kw["aname"] = "_UnrecognizedPolicyRequestFault"
            if ns4.UnrecognizedPolicyRequestFaultType_Def not in ns4.UnrecognizedPolicyRequestFault_Dec.__bases__:
                bases = list(ns4.UnrecognizedPolicyRequestFault_Dec.__bases__)
                bases.insert(0, ns4.UnrecognizedPolicyRequestFaultType_Def)
                ns4.UnrecognizedPolicyRequestFault_Dec.__bases__ = tuple(bases)

            ns4.UnrecognizedPolicyRequestFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "UnrecognizedPolicyRequestFault_Dec_Holder"

    class UnsupportedPolicyRequestFault_Dec(ElementDeclaration):
        literal = "UnsupportedPolicyRequestFault"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","UnsupportedPolicyRequestFault")
            kw["aname"] = "_UnsupportedPolicyRequestFault"
            if ns4.UnsupportedPolicyRequestFaultType_Def not in ns4.UnsupportedPolicyRequestFault_Dec.__bases__:
                bases = list(ns4.UnsupportedPolicyRequestFault_Dec.__bases__)
                bases.insert(0, ns4.UnsupportedPolicyRequestFaultType_Def)
                ns4.UnsupportedPolicyRequestFault_Dec.__bases__ = tuple(bases)

            ns4.UnsupportedPolicyRequestFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "UnsupportedPolicyRequestFault_Dec_Holder"

    class NotifyMessageNotSupportedFault_Dec(ElementDeclaration):
        literal = "NotifyMessageNotSupportedFault"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","NotifyMessageNotSupportedFault")
            kw["aname"] = "_NotifyMessageNotSupportedFault"
            if ns4.NotifyMessageNotSupportedFaultType_Def not in ns4.NotifyMessageNotSupportedFault_Dec.__bases__:
                bases = list(ns4.NotifyMessageNotSupportedFault_Dec.__bases__)
                bases.insert(0, ns4.NotifyMessageNotSupportedFaultType_Def)
                ns4.NotifyMessageNotSupportedFault_Dec.__bases__ = tuple(bases)

            ns4.NotifyMessageNotSupportedFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "NotifyMessageNotSupportedFault_Dec_Holder"

    class UnacceptableInitialTerminationTimeFault_Dec(ElementDeclaration):
        literal = "UnacceptableInitialTerminationTimeFault"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","UnacceptableInitialTerminationTimeFault")
            kw["aname"] = "_UnacceptableInitialTerminationTimeFault"
            if ns4.UnacceptableInitialTerminationTimeFaultType_Def not in ns4.UnacceptableInitialTerminationTimeFault_Dec.__bases__:
                bases = list(ns4.UnacceptableInitialTerminationTimeFault_Dec.__bases__)
                bases.insert(0, ns4.UnacceptableInitialTerminationTimeFaultType_Def)
                ns4.UnacceptableInitialTerminationTimeFault_Dec.__bases__ = tuple(bases)

            ns4.UnacceptableInitialTerminationTimeFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "UnacceptableInitialTerminationTimeFault_Dec_Holder"

    class NoCurrentMessageOnTopicFault_Dec(ElementDeclaration):
        literal = "NoCurrentMessageOnTopicFault"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","NoCurrentMessageOnTopicFault")
            kw["aname"] = "_NoCurrentMessageOnTopicFault"
            if ns4.NoCurrentMessageOnTopicFaultType_Def not in ns4.NoCurrentMessageOnTopicFault_Dec.__bases__:
                bases = list(ns4.NoCurrentMessageOnTopicFault_Dec.__bases__)
                bases.insert(0, ns4.NoCurrentMessageOnTopicFaultType_Def)
                ns4.NoCurrentMessageOnTopicFault_Dec.__bases__ = tuple(bases)

            ns4.NoCurrentMessageOnTopicFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "NoCurrentMessageOnTopicFault_Dec_Holder"

    class GetMessages_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetMessages"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.GetMessages_Dec.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"MaximumNumber"), aname="_MaximumNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","GetMessages")
            kw["aname"] = "_GetMessages"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            # attribute handling code
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MaximumNumber = None
                    self._any = []
                    return
            Holder.__name__ = "GetMessages_Holder"
            self.pyclass = Holder

    class GetMessagesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetMessagesResponse"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.GetMessagesResponse_Dec.schema
            TClist = [GED("http://docs.oasis-open.org/wsn/b-2","NotificationMessage",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","GetMessagesResponse")
            kw["aname"] = "_GetMessagesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            # attribute handling code
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._NotificationMessage = None
                    self._any = []
                    return
            Holder.__name__ = "GetMessagesResponse_Holder"
            self.pyclass = Holder

    class DestroyPullPoint_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "DestroyPullPoint"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.DestroyPullPoint_Dec.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","DestroyPullPoint")
            kw["aname"] = "_DestroyPullPoint"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            # attribute handling code
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "DestroyPullPoint_Holder"
            self.pyclass = Holder

    class DestroyPullPointResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "DestroyPullPointResponse"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.DestroyPullPointResponse_Dec.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","DestroyPullPointResponse")
            kw["aname"] = "_DestroyPullPointResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            # attribute handling code
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "DestroyPullPointResponse_Holder"
            self.pyclass = Holder

    class UnableToGetMessagesFault_Dec(ElementDeclaration):
        literal = "UnableToGetMessagesFault"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","UnableToGetMessagesFault")
            kw["aname"] = "_UnableToGetMessagesFault"
            if ns4.UnableToGetMessagesFaultType_Def not in ns4.UnableToGetMessagesFault_Dec.__bases__:
                bases = list(ns4.UnableToGetMessagesFault_Dec.__bases__)
                bases.insert(0, ns4.UnableToGetMessagesFaultType_Def)
                ns4.UnableToGetMessagesFault_Dec.__bases__ = tuple(bases)

            ns4.UnableToGetMessagesFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "UnableToGetMessagesFault_Dec_Holder"

    class UnableToDestroyPullPointFault_Dec(ElementDeclaration):
        literal = "UnableToDestroyPullPointFault"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","UnableToDestroyPullPointFault")
            kw["aname"] = "_UnableToDestroyPullPointFault"
            if ns4.UnableToDestroyPullPointFaultType_Def not in ns4.UnableToDestroyPullPointFault_Dec.__bases__:
                bases = list(ns4.UnableToDestroyPullPointFault_Dec.__bases__)
                bases.insert(0, ns4.UnableToDestroyPullPointFaultType_Def)
                ns4.UnableToDestroyPullPointFault_Dec.__bases__ = tuple(bases)

            ns4.UnableToDestroyPullPointFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "UnableToDestroyPullPointFault_Dec_Holder"

    class CreatePullPoint_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CreatePullPoint"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.CreatePullPoint_Dec.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","CreatePullPoint")
            kw["aname"] = "_CreatePullPoint"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            # attribute handling code
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "CreatePullPoint_Holder"
            self.pyclass = Holder

    class CreatePullPointResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CreatePullPointResponse"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.CreatePullPointResponse_Dec.schema
            TClist = [GTD("http://www.w3.org/2005/08/addressing","EndpointReferenceType",lazy=False)(pname=(ns,"PullPoint"), aname="_PullPoint", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","CreatePullPointResponse")
            kw["aname"] = "_CreatePullPointResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            # attribute handling code
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PullPoint = None
                    self._any = []
                    return
            Holder.__name__ = "CreatePullPointResponse_Holder"
            self.pyclass = Holder

    class UnableToCreatePullPointFault_Dec(ElementDeclaration):
        literal = "UnableToCreatePullPointFault"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","UnableToCreatePullPointFault")
            kw["aname"] = "_UnableToCreatePullPointFault"
            if ns4.UnableToCreatePullPointFaultType_Def not in ns4.UnableToCreatePullPointFault_Dec.__bases__:
                bases = list(ns4.UnableToCreatePullPointFault_Dec.__bases__)
                bases.insert(0, ns4.UnableToCreatePullPointFaultType_Def)
                ns4.UnableToCreatePullPointFault_Dec.__bases__ = tuple(bases)

            ns4.UnableToCreatePullPointFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "UnableToCreatePullPointFault_Dec_Holder"

    class Renew_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Renew"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.Renew_Dec.schema
            TClist = [GTD("http://docs.oasis-open.org/wsn/b-2","AbsoluteOrRelativeTimeType",lazy=False)(pname=(ns,"TerminationTime"), aname="_TerminationTime", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","Renew")
            kw["aname"] = "_Renew"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TerminationTime = None
                    self._any = []
                    return
            Holder.__name__ = "Renew_Holder"
            self.pyclass = Holder

    class RenewResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RenewResponse"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.RenewResponse_Dec.schema
            TClist = [GED("http://docs.oasis-open.org/wsn/b-2","TerminationTime",lazy=False, isref=True)(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://docs.oasis-open.org/wsn/b-2","CurrentTime",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","RenewResponse")
            kw["aname"] = "_RenewResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TerminationTime = None
                    self._CurrentTime = None
                    self._any = []
                    return
            Holder.__name__ = "RenewResponse_Holder"
            self.pyclass = Holder

    class UnacceptableTerminationTimeFault_Dec(ElementDeclaration):
        literal = "UnacceptableTerminationTimeFault"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","UnacceptableTerminationTimeFault")
            kw["aname"] = "_UnacceptableTerminationTimeFault"
            if ns4.UnacceptableTerminationTimeFaultType_Def not in ns4.UnacceptableTerminationTimeFault_Dec.__bases__:
                bases = list(ns4.UnacceptableTerminationTimeFault_Dec.__bases__)
                bases.insert(0, ns4.UnacceptableTerminationTimeFaultType_Def)
                ns4.UnacceptableTerminationTimeFault_Dec.__bases__ = tuple(bases)

            ns4.UnacceptableTerminationTimeFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "UnacceptableTerminationTimeFault_Dec_Holder"

    class Unsubscribe_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Unsubscribe"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.Unsubscribe_Dec.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","Unsubscribe")
            kw["aname"] = "_Unsubscribe"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "Unsubscribe_Holder"
            self.pyclass = Holder

    class UnsubscribeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "UnsubscribeResponse"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.UnsubscribeResponse_Dec.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","UnsubscribeResponse")
            kw["aname"] = "_UnsubscribeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "UnsubscribeResponse_Holder"
            self.pyclass = Holder

    class UnableToDestroySubscriptionFault_Dec(ElementDeclaration):
        literal = "UnableToDestroySubscriptionFault"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","UnableToDestroySubscriptionFault")
            kw["aname"] = "_UnableToDestroySubscriptionFault"
            if ns4.UnableToDestroySubscriptionFaultType_Def not in ns4.UnableToDestroySubscriptionFault_Dec.__bases__:
                bases = list(ns4.UnableToDestroySubscriptionFault_Dec.__bases__)
                bases.insert(0, ns4.UnableToDestroySubscriptionFaultType_Def)
                ns4.UnableToDestroySubscriptionFault_Dec.__bases__ = tuple(bases)

            ns4.UnableToDestroySubscriptionFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "UnableToDestroySubscriptionFault_Dec_Holder"

    class PauseSubscription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "PauseSubscription"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.PauseSubscription_Dec.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","PauseSubscription")
            kw["aname"] = "_PauseSubscription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "PauseSubscription_Holder"
            self.pyclass = Holder

    class PauseSubscriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "PauseSubscriptionResponse"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.PauseSubscriptionResponse_Dec.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","PauseSubscriptionResponse")
            kw["aname"] = "_PauseSubscriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "PauseSubscriptionResponse_Holder"
            self.pyclass = Holder

    class ResumeSubscription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ResumeSubscription"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.ResumeSubscription_Dec.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","ResumeSubscription")
            kw["aname"] = "_ResumeSubscription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "ResumeSubscription_Holder"
            self.pyclass = Holder

    class ResumeSubscriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ResumeSubscriptionResponse"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            ns = ns4.ResumeSubscriptionResponse_Dec.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","ResumeSubscriptionResponse")
            kw["aname"] = "_ResumeSubscriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "ResumeSubscriptionResponse_Holder"
            self.pyclass = Holder

    class PauseFailedFault_Dec(ElementDeclaration):
        literal = "PauseFailedFault"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","PauseFailedFault")
            kw["aname"] = "_PauseFailedFault"
            if ns4.PauseFailedFaultType_Def not in ns4.PauseFailedFault_Dec.__bases__:
                bases = list(ns4.PauseFailedFault_Dec.__bases__)
                bases.insert(0, ns4.PauseFailedFaultType_Def)
                ns4.PauseFailedFault_Dec.__bases__ = tuple(bases)

            ns4.PauseFailedFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "PauseFailedFault_Dec_Holder"

    class ResumeFailedFault_Dec(ElementDeclaration):
        literal = "ResumeFailedFault"
        schema = "http://docs.oasis-open.org/wsn/b-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/b-2","ResumeFailedFault")
            kw["aname"] = "_ResumeFailedFault"
            if ns4.ResumeFailedFaultType_Def not in ns4.ResumeFailedFault_Dec.__bases__:
                bases = list(ns4.ResumeFailedFault_Dec.__bases__)
                bases.insert(0, ns4.ResumeFailedFaultType_Def)
                ns4.ResumeFailedFault_Dec.__bases__ = tuple(bases)

            ns4.ResumeFailedFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ResumeFailedFault_Dec_Holder"

# end class ns4 (tns: http://docs.oasis-open.org/wsn/b-2)

##############################
# targetNamespace
# http://docs.oasis-open.org/wsn/br-2
##############################

class ns5:
    targetNamespace = "http://docs.oasis-open.org/wsn/br-2"

    class PublisherRegistrationRejectedFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/br-2"
        type = (schema, "PublisherRegistrationRejectedFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns5.PublisherRegistrationRejectedFaultType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns5.PublisherRegistrationRejectedFaultType_Def.__bases__:
                bases = list(ns5.PublisherRegistrationRejectedFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns5.PublisherRegistrationRejectedFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PublisherRegistrationFailedFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/br-2"
        type = (schema, "PublisherRegistrationFailedFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns5.PublisherRegistrationFailedFaultType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns5.PublisherRegistrationFailedFaultType_Def.__bases__:
                bases = list(ns5.PublisherRegistrationFailedFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns5.PublisherRegistrationFailedFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ResourceNotDestroyedFaultType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/br-2"
        type = (schema, "ResourceNotDestroyedFaultType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns5.ResourceNotDestroyedFaultType_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.BaseFaultType_Def not in ns5.ResourceNotDestroyedFaultType_Def.__bases__:
                bases = list(ns5.ResourceNotDestroyedFaultType_Def.__bases__)
                bases.insert(0, ns1.BaseFaultType_Def)
                ns5.ResourceNotDestroyedFaultType_Def.__bases__ = tuple(bases)

            ns1.BaseFaultType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequiresRegistration_Dec(ZSI.TC.Boolean, ElementDeclaration):
        literal = "RequiresRegistration"
        schema = "http://docs.oasis-open.org/wsn/br-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/br-2","RequiresRegistration")
            kw["aname"] = "_RequiresRegistration"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_RequiresRegistration_immutable_holder"
            ZSI.TC.Boolean.__init__(self, **kw)

    class PublisherReference_Dec(ElementDeclaration):
        literal = "PublisherReference"
        schema = "http://docs.oasis-open.org/wsn/br-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/br-2","PublisherReference")
            kw["aname"] = "_PublisherReference"
            if ns3.EndpointReferenceType_Def not in ns5.PublisherReference_Dec.__bases__:
                bases = list(ns5.PublisherReference_Dec.__bases__)
                bases.insert(0, ns3.EndpointReferenceType_Def)
                ns5.PublisherReference_Dec.__bases__ = tuple(bases)

            ns3.EndpointReferenceType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "PublisherReference_Dec_Holder"

    class ConsumerReference_Dec(ElementDeclaration):
        literal = "ConsumerReference"
        schema = "http://docs.oasis-open.org/wsn/br-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/br-2","ConsumerReference")
            kw["aname"] = "_ConsumerReference"
            if ns3.EndpointReferenceType_Def not in ns5.ConsumerReference_Dec.__bases__:
                bases = list(ns5.ConsumerReference_Dec.__bases__)
                bases.insert(0, ns3.EndpointReferenceType_Def)
                ns5.ConsumerReference_Dec.__bases__ = tuple(bases)

            ns3.EndpointReferenceType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ConsumerReference_Dec_Holder"

    class Topic_Dec(ElementDeclaration):
        literal = "Topic"
        schema = "http://docs.oasis-open.org/wsn/br-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/br-2","Topic")
            kw["aname"] = "_Topic"
            if ns4.TopicExpressionType_Def not in ns5.Topic_Dec.__bases__:
                bases = list(ns5.Topic_Dec.__bases__)
                bases.insert(0, ns4.TopicExpressionType_Def)
                ns5.Topic_Dec.__bases__ = tuple(bases)

            ns4.TopicExpressionType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Topic_Dec_Holder"

    class Demand_Dec(ZSI.TC.Boolean, ElementDeclaration):
        literal = "Demand"
        schema = "http://docs.oasis-open.org/wsn/br-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/br-2","Demand")
            kw["aname"] = "_Demand"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_Demand_immutable_holder"
            ZSI.TC.Boolean.__init__(self, **kw)

    class CreationTime_Dec(ZSI.TCtimes.gDateTime, ElementDeclaration):
        literal = "CreationTime"
        schema = "http://docs.oasis-open.org/wsn/br-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/br-2","CreationTime")
            kw["aname"] = "_CreationTime"
            class IHolder(tuple): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_CreationTime_immutable_holder"
            ZSI.TCtimes.gDateTime.__init__(self, **kw)

    class NotificationBrokerRP_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "NotificationBrokerRP"
        schema = "http://docs.oasis-open.org/wsn/br-2"
        def __init__(self, **kw):
            ns = ns5.NotificationBrokerRP_Dec.schema
            TClist = [GED("http://docs.oasis-open.org/wsn/b-2","TopicExpression",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GED("http://docs.oasis-open.org/wsn/b-2","FixedTopicSet",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://docs.oasis-open.org/wsn/b-2","TopicExpressionDialect",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GED("http://docs.oasis-open.org/wsn/t-1","TopicSet",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://docs.oasis-open.org/wsn/br-2","RequiresRegistration",lazy=False, isref=True)(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/br-2","NotificationBrokerRP")
            kw["aname"] = "_NotificationBrokerRP"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TopicExpression = None
                    self._FixedTopicSet = None
                    self._TopicExpressionDialect = None
                    self._TopicSet = None
                    self._RequiresRegistration = None
                    return
            Holder.__name__ = "NotificationBrokerRP_Holder"
            self.pyclass = Holder

    class PublisherRegistrationRP_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "PublisherRegistrationRP"
        schema = "http://docs.oasis-open.org/wsn/br-2"
        def __init__(self, **kw):
            ns = ns5.PublisherRegistrationRP_Dec.schema
            TClist = [GED("http://docs.oasis-open.org/wsn/br-2","PublisherReference",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://docs.oasis-open.org/wsn/br-2","Topic",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GED("http://docs.oasis-open.org/wsn/br-2","Demand",lazy=False, isref=True)(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://docs.oasis-open.org/wsn/br-2","CreationTime",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/br-2","PublisherRegistrationRP")
            kw["aname"] = "_PublisherRegistrationRP"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PublisherReference = None
                    self._Topic = None
                    self._Demand = None
                    self._CreationTime = None
                    return
            Holder.__name__ = "PublisherRegistrationRP_Holder"
            self.pyclass = Holder

    class RegisterPublisher_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RegisterPublisher"
        schema = "http://docs.oasis-open.org/wsn/br-2"
        def __init__(self, **kw):
            ns = ns5.RegisterPublisher_Dec.schema
            TClist = [GTD("http://www.w3.org/2005/08/addressing","EndpointReferenceType",lazy=False)(pname=(ns,"PublisherReference"), aname="_PublisherReference", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://docs.oasis-open.org/wsn/b-2","TopicExpressionType",lazy=False)(pname=(ns,"Topic"), aname="_Topic", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"Demand"), aname="_Demand", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"InitialTerminationTime"), aname="_InitialTerminationTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/br-2","RegisterPublisher")
            kw["aname"] = "_RegisterPublisher"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PublisherReference = None
                    self._Topic = []
                    self._Demand = None
                    self._InitialTerminationTime = None
                    self._any = []
                    return
            Holder.__name__ = "RegisterPublisher_Holder"
            self.pyclass = Holder

    class RegisterPublisherResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RegisterPublisherResponse"
        schema = "http://docs.oasis-open.org/wsn/br-2"
        def __init__(self, **kw):
            ns = ns5.RegisterPublisherResponse_Dec.schema
            TClist = [GTD("http://www.w3.org/2005/08/addressing","EndpointReferenceType",lazy=False)(pname=(ns,"PublisherRegistrationReference"), aname="_PublisherRegistrationReference", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.w3.org/2005/08/addressing","EndpointReferenceType",lazy=False)(pname=(ns,"ConsumerReference"), aname="_ConsumerReference", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/br-2","RegisterPublisherResponse")
            kw["aname"] = "_RegisterPublisherResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PublisherRegistrationReference = None
                    self._ConsumerReference = None
                    return
            Holder.__name__ = "RegisterPublisherResponse_Holder"
            self.pyclass = Holder

    class PublisherRegistrationRejectedFault_Dec(ElementDeclaration):
        literal = "PublisherRegistrationRejectedFault"
        schema = "http://docs.oasis-open.org/wsn/br-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/br-2","PublisherRegistrationRejectedFault")
            kw["aname"] = "_PublisherRegistrationRejectedFault"
            if ns5.PublisherRegistrationRejectedFaultType_Def not in ns5.PublisherRegistrationRejectedFault_Dec.__bases__:
                bases = list(ns5.PublisherRegistrationRejectedFault_Dec.__bases__)
                bases.insert(0, ns5.PublisherRegistrationRejectedFaultType_Def)
                ns5.PublisherRegistrationRejectedFault_Dec.__bases__ = tuple(bases)

            ns5.PublisherRegistrationRejectedFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "PublisherRegistrationRejectedFault_Dec_Holder"

    class PublisherRegistrationFailedFault_Dec(ElementDeclaration):
        literal = "PublisherRegistrationFailedFault"
        schema = "http://docs.oasis-open.org/wsn/br-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/br-2","PublisherRegistrationFailedFault")
            kw["aname"] = "_PublisherRegistrationFailedFault"
            if ns5.PublisherRegistrationFailedFaultType_Def not in ns5.PublisherRegistrationFailedFault_Dec.__bases__:
                bases = list(ns5.PublisherRegistrationFailedFault_Dec.__bases__)
                bases.insert(0, ns5.PublisherRegistrationFailedFaultType_Def)
                ns5.PublisherRegistrationFailedFault_Dec.__bases__ = tuple(bases)

            ns5.PublisherRegistrationFailedFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "PublisherRegistrationFailedFault_Dec_Holder"

    class DestroyRegistration_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "DestroyRegistration"
        schema = "http://docs.oasis-open.org/wsn/br-2"
        def __init__(self, **kw):
            ns = ns5.DestroyRegistration_Dec.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/br-2","DestroyRegistration")
            kw["aname"] = "_DestroyRegistration"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            # attribute handling code
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "DestroyRegistration_Holder"
            self.pyclass = Holder

    class DestroyRegistrationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "DestroyRegistrationResponse"
        schema = "http://docs.oasis-open.org/wsn/br-2"
        def __init__(self, **kw):
            ns = ns5.DestroyRegistrationResponse_Dec.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            kw["pname"] = ("http://docs.oasis-open.org/wsn/br-2","DestroyRegistrationResponse")
            kw["aname"] = "_DestroyRegistrationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            # attribute handling code
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "DestroyRegistrationResponse_Holder"
            self.pyclass = Holder

    class ResourceNotDestroyedFault_Dec(ElementDeclaration):
        literal = "ResourceNotDestroyedFault"
        schema = "http://docs.oasis-open.org/wsn/br-2"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/br-2","ResourceNotDestroyedFault")
            kw["aname"] = "_ResourceNotDestroyedFault"
            if ns5.ResourceNotDestroyedFaultType_Def not in ns5.ResourceNotDestroyedFault_Dec.__bases__:
                bases = list(ns5.ResourceNotDestroyedFault_Dec.__bases__)
                bases.insert(0, ns5.ResourceNotDestroyedFaultType_Def)
                ns5.ResourceNotDestroyedFault_Dec.__bases__ = tuple(bases)

            ns5.ResourceNotDestroyedFaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ResourceNotDestroyedFault_Dec_Holder"

# end class ns5 (tns: http://docs.oasis-open.org/wsn/br-2)

##############################
# targetNamespace
# http://docs.oasis-open.org/wsn/t-1
##############################

class ns6:
    targetNamespace = "http://docs.oasis-open.org/wsn/t-1"

    class Documentation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://docs.oasis-open.org/wsn/t-1"
        type = (schema, "Documentation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns6.Documentation_Def.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, mixed=True, mixed_aname="_text", **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "Documentation_Holder"
            self.pyclass = Holder

    class ExtensibleDocumented_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://docs.oasis-open.org/wsn/t-1"
        type = (schema, "ExtensibleDocumented")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns6.ExtensibleDocumented_Def.schema
            TClist = [GTD("http://docs.oasis-open.org/wsn/t-1","Documentation",lazy=False)(pname=(ns,"documentation"), aname="_documentation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._documentation = None
                    return
            Holder.__name__ = "ExtensibleDocumented_Holder"
            self.pyclass = Holder

    class QueryExpressionType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://docs.oasis-open.org/wsn/t-1"
        type = (schema, "QueryExpressionType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns6.QueryExpressionType_Def.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs=1, nillable=False, processContents="lax")]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["Dialect"] = ZSI.TC.URI()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, mixed=True, mixed_aname="_text", **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = None
                    return
            Holder.__name__ = "QueryExpressionType_Holder"
            self.pyclass = Holder

    class TopicNamespaceType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/t-1"
        type = (schema, "TopicNamespaceType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns6.TopicNamespaceType_Def.schema
            TClist = [self.__class__.Topic_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["name"] = ZSI.TC.AnyType()
                self.attribute_typecode_dict["targetNamespace"] = ZSI.TC.URI()
                self.attribute_typecode_dict["final"] = ZSI.TC.Boolean()
            # attribute handling code
            self.attribute_typecode_dict["name"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["targetNamespace"] = ZSI.TC.URI()
            self.attribute_typecode_dict["final"] = ZSI.TC.Boolean()
            if ns6.ExtensibleDocumented_Def not in ns6.TopicNamespaceType_Def.__bases__:
                bases = list(ns6.TopicNamespaceType_Def.__bases__)
                bases.insert(0, ns6.ExtensibleDocumented_Def)
                ns6.TopicNamespaceType_Def.__bases__ = tuple(bases)

            ns6.ExtensibleDocumented_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class Topic_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Topic"
            schema = "http://docs.oasis-open.org/wsn/t-1"
            def __init__(self, **kw):
                ns = ns6.TopicNamespaceType_Def.Topic_Dec.schema
                TClist = []
                kw["pname"] = ("http://docs.oasis-open.org/wsn/t-1","Topic")
                kw["aname"] = "_Topic"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    typecode = self
                    def __init__(self):
                        # pyclass
                        return
                Holder.__name__ = "Topic_Holder"
                self.pyclass = Holder




    class TopicType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/t-1"
        type = (schema, "TopicType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns6.TopicType_Def.schema
            TClist = [GTD("http://docs.oasis-open.org/wsn/t-1","QueryExpressionType",lazy=False)(pname=(ns,"MessagePattern"), aname="_MessagePattern", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://docs.oasis-open.org/wsn/t-1","TopicType",lazy=False)(pname=(ns,"Topic"), aname="_Topic", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="strict")]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["name"] = ZSI.TC.AnyType()
                self.attribute_typecode_dict["messageTypes"] = ZSI.TC.String()
                self.attribute_typecode_dict["final"] = ZSI.TC.Boolean()
            # attribute handling code
            self.attribute_typecode_dict["name"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["messageTypes"] = ZSI.TC.String()
            self.attribute_typecode_dict["final"] = ZSI.TC.Boolean()
            if ns6.ExtensibleDocumented_Def not in ns6.TopicType_Def.__bases__:
                bases = list(ns6.TopicType_Def.__bases__)
                bases.insert(0, ns6.ExtensibleDocumented_Def)
                ns6.TopicType_Def.__bases__ = tuple(bases)

            ns6.ExtensibleDocumented_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TopicSetType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://docs.oasis-open.org/wsn/t-1"
        type = (schema, "TopicSetType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns6.TopicSetType_Def.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns6.ExtensibleDocumented_Def not in ns6.TopicSetType_Def.__bases__:
                bases = list(ns6.TopicSetType_Def.__bases__)
                bases.insert(0, ns6.ExtensibleDocumented_Def)
                ns6.TopicSetType_Def.__bases__ = tuple(bases)

            ns6.ExtensibleDocumented_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FullTopicExpression_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://docs.oasis-open.org/wsn/t-1"
        type = (schema, "FullTopicExpression")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ConcreteTopicExpression_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://docs.oasis-open.org/wsn/t-1"
        type = (schema, "ConcreteTopicExpression")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SimpleTopicExpression_Def(ZSI.TC.QName, TypeDefinition):
        schema = "http://docs.oasis-open.org/wsn/t-1"
        type = (schema, "SimpleTopicExpression")
        def __init__(self, pname, **kw):
            ZSI.TC.QName.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TopicNamespace_Dec(ElementDeclaration):
        literal = "TopicNamespace"
        schema = "http://docs.oasis-open.org/wsn/t-1"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/t-1","TopicNamespace")
            kw["aname"] = "_TopicNamespace"
            if ns6.TopicNamespaceType_Def not in ns6.TopicNamespace_Dec.__bases__:
                bases = list(ns6.TopicNamespace_Dec.__bases__)
                bases.insert(0, ns6.TopicNamespaceType_Def)
                ns6.TopicNamespace_Dec.__bases__ = tuple(bases)

            ns6.TopicNamespaceType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "TopicNamespace_Dec_Holder"

    class TopicSet_Dec(ElementDeclaration):
        literal = "TopicSet"
        schema = "http://docs.oasis-open.org/wsn/t-1"
        def __init__(self, **kw):
            kw["pname"] = ("http://docs.oasis-open.org/wsn/t-1","TopicSet")
            kw["aname"] = "_TopicSet"
            if ns6.TopicSetType_Def not in ns6.TopicSet_Dec.__bases__:
                bases = list(ns6.TopicSet_Dec.__bases__)
                bases.insert(0, ns6.TopicSetType_Def)
                ns6.TopicSet_Dec.__bases__ = tuple(bases)

            ns6.TopicSetType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "TopicSet_Dec_Holder"

# end class ns6 (tns: http://docs.oasis-open.org/wsn/t-1)

##############################
# targetNamespace
# http://www.w3.org/XML/1998/namespace
##############################

class ns7:
    targetNamespace = "http://www.w3.org/XML/1998/namespace"

# end class ns7 (tns: http://www.w3.org/XML/1998/namespace)

##############################
# targetNamespace
# http://oscars.es.net/OSCARS
##############################

class ns0:
    targetNamespace = "http://oscars.es.net/OSCARS"

    class resCreateContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "resCreateContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.resCreateContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"globalReservationId"), aname="_globalReservationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"startTime"), aname="_startTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"endTime"), aname="_endTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"bandwidth"), aname="_bandwidth", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","pathInfo",lazy=False)(pname=(ns,"pathInfo"), aname="_pathInfo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._globalReservationId = None
                    self._startTime = None
                    self._endTime = None
                    self._bandwidth = None
                    self._description = None
                    self._pathInfo = None
                    return
            Holder.__name__ = "resCreateContent_Holder"
            self.pyclass = Holder

    class createReply_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "createReply")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.createReply_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"globalReservationId"), aname="_globalReservationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"token"), aname="_token", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","pathInfo",lazy=False)(pname=(ns,"pathInfo"), aname="_pathInfo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._globalReservationId = None
                    self._token = None
                    self._status = None
                    self._pathInfo = None
                    return
            Holder.__name__ = "createReply_Holder"
            self.pyclass = Holder

    class modifyResContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "modifyResContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifyResContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"globalReservationId"), aname="_globalReservationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"startTime"), aname="_startTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"endTime"), aname="_endTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"bandwidth"), aname="_bandwidth", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","pathInfo",lazy=False)(pname=(ns,"pathInfo"), aname="_pathInfo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._globalReservationId = None
                    self._startTime = None
                    self._endTime = None
                    self._bandwidth = None
                    self._description = None
                    self._pathInfo = None
                    return
            Holder.__name__ = "modifyResContent_Holder"
            self.pyclass = Holder

    class modifyResReply_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "modifyResReply")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifyResReply_Def.schema
            TClist = [GTD("http://oscars.es.net/OSCARS","resDetails",lazy=False)(pname=(ns,"reservation"), aname="_reservation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._reservation = None
                    return
            Holder.__name__ = "modifyResReply_Holder"
            self.pyclass = Holder

    class getTopologyContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "getTopologyContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getTopologyContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"topologyType"), aname="_topologyType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._topologyType = None
                    return
            Holder.__name__ = "getTopologyContent_Holder"
            self.pyclass = Holder

    class getTopologyResponseContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "getTopologyResponseContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getTopologyResponseContent_Def.schema
            TClist = [GED("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","topology",lazy=False, isref=True)(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._topology = None
                    return
            Holder.__name__ = "getTopologyResponseContent_Holder"
            self.pyclass = Holder

    class initiateTopologyPullContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "initiateTopologyPullContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.initiateTopologyPullContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"topologyType"), aname="_topologyType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._topologyType = None
                    return
            Holder.__name__ = "initiateTopologyPullContent_Holder"
            self.pyclass = Holder

    class initiateTopologyPullResponseContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "initiateTopologyPullResponseContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.initiateTopologyPullResponseContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"resultMsg"), aname="_resultMsg", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._resultMsg = None
                    return
            Holder.__name__ = "initiateTopologyPullResponseContent_Holder"
            self.pyclass = Holder

    class createPathContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "createPathContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.createPathContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"token"), aname="_token", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"globalReservationId"), aname="_globalReservationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._token = None
                    self._globalReservationId = None
                    return
            Holder.__name__ = "createPathContent_Holder"
            self.pyclass = Holder

    class createPathResponseContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "createPathResponseContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.createPathResponseContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"globalReservationId"), aname="_globalReservationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._globalReservationId = None
                    self._status = None
                    return
            Holder.__name__ = "createPathResponseContent_Holder"
            self.pyclass = Holder

    class refreshPathContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "refreshPathContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.refreshPathContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"token"), aname="_token", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"globalReservationId"), aname="_globalReservationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._token = None
                    self._globalReservationId = None
                    return
            Holder.__name__ = "refreshPathContent_Holder"
            self.pyclass = Holder

    class refreshPathResponseContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "refreshPathResponseContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.refreshPathResponseContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"globalReservationId"), aname="_globalReservationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._globalReservationId = None
                    self._status = None
                    return
            Holder.__name__ = "refreshPathResponseContent_Holder"
            self.pyclass = Holder

    class teardownPathContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "teardownPathContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.teardownPathContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"token"), aname="_token", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"globalReservationId"), aname="_globalReservationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._token = None
                    self._globalReservationId = None
                    return
            Holder.__name__ = "teardownPathContent_Holder"
            self.pyclass = Holder

    class teardownPathResponseContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "teardownPathResponseContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.teardownPathResponseContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"globalReservationId"), aname="_globalReservationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._globalReservationId = None
                    self._status = None
                    return
            Holder.__name__ = "teardownPathResponseContent_Holder"
            self.pyclass = Holder

    class resDetails_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "resDetails")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.resDetails_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"globalReservationId"), aname="_globalReservationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"login"), aname="_login", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"startTime"), aname="_startTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"endTime"), aname="_endTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"createTime"), aname="_createTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"bandwidth"), aname="_bandwidth", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","pathInfo",lazy=False)(pname=(ns,"pathInfo"), aname="_pathInfo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._globalReservationId = None
                    self._login = None
                    self._status = None
                    self._startTime = None
                    self._endTime = None
                    self._createTime = None
                    self._bandwidth = None
                    self._description = None
                    self._pathInfo = None
                    return
            Holder.__name__ = "resDetails_Holder"
            self.pyclass = Holder

    class listRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "listRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"resStatus"), aname="_resStatus", minOccurs=0, maxOccurs=5, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"startTime"), aname="_startTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"endTime"), aname="_endTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"linkId"), aname="_linkId", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"resRequested"), aname="_resRequested", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"resOffset"), aname="_resOffset", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._resStatus = []
                    self._startTime = None
                    self._endTime = None
                    self._description = None
                    self._linkId = []
                    self._resRequested = None
                    self._resOffset = None
                    return
            Holder.__name__ = "listRequest_Holder"
            self.pyclass = Holder

    class listReply_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "listReply")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listReply_Def.schema
            TClist = [GTD("http://oscars.es.net/OSCARS","resDetails",lazy=False)(pname=(ns,"resDetails"), aname="_resDetails", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"totalResults"), aname="_totalResults", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._resDetails = []
                    self._totalResults = None
                    return
            Holder.__name__ = "listReply_Holder"
            self.pyclass = Holder

    class forwardPayload_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "forwardPayload")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.forwardPayload_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"contentType"), aname="_contentType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","resCreateContent",lazy=False)(pname=(ns,"createReservation"), aname="_createReservation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","modifyResContent",lazy=False)(pname=(ns,"modifyReservation"), aname="_modifyReservation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","globalReservationId",lazy=False)(pname=(ns,"cancelReservation"), aname="_cancelReservation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","globalReservationId",lazy=False)(pname=(ns,"queryReservation"), aname="_queryReservation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","listRequest",lazy=False)(pname=(ns,"listReservations"), aname="_listReservations", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","createPathContent",lazy=False)(pname=(ns,"createPath"), aname="_createPath", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","refreshPathContent",lazy=False)(pname=(ns,"refreshPath"), aname="_refreshPath", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","teardownPathContent",lazy=False)(pname=(ns,"teardownPath"), aname="_teardownPath", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._contentType = None
                    self._createReservation = None
                    self._modifyReservation = None
                    self._cancelReservation = None
                    self._queryReservation = None
                    self._listReservations = None
                    self._createPath = None
                    self._refreshPath = None
                    self._teardownPath = None
                    return
            Holder.__name__ = "forwardPayload_Holder"
            self.pyclass = Holder

    class forwardReply_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "forwardReply")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.forwardReply_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"contentType"), aname="_contentType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","createReply",lazy=False)(pname=(ns,"createReservation"), aname="_createReservation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","modifyResReply",lazy=False)(pname=(ns,"modifyReservation"), aname="_modifyReservation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"cancelReservation"), aname="_cancelReservation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","resDetails",lazy=False)(pname=(ns,"queryReservation"), aname="_queryReservation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","listReply",lazy=False)(pname=(ns,"listReservations"), aname="_listReservations", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","createPathResponseContent",lazy=False)(pname=(ns,"createPath"), aname="_createPath", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","refreshPathResponseContent",lazy=False)(pname=(ns,"refreshPath"), aname="_refreshPath", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","teardownPathResponseContent",lazy=False)(pname=(ns,"teardownPath"), aname="_teardownPath", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._contentType = None
                    self._createReservation = None
                    self._modifyReservation = None
                    self._cancelReservation = None
                    self._queryReservation = None
                    self._listReservations = None
                    self._createPath = None
                    self._refreshPath = None
                    self._teardownPath = None
                    return
            Holder.__name__ = "forwardReply_Holder"
            self.pyclass = Holder

    class pathInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "pathInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.pathInfo_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"pathSetupMode"), aname="_pathSetupMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"pathType"), aname="_pathType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","CtrlPlanePathContent",lazy=False)(pname=(ns,"path"), aname="_path", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","layer2Info",lazy=False)(pname=(ns,"layer2Info"), aname="_layer2Info", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","layer3Info",lazy=False)(pname=(ns,"layer3Info"), aname="_layer3Info", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","mplsInfo",lazy=False)(pname=(ns,"mplsInfo"), aname="_mplsInfo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pathSetupMode = None
                    self._pathType = None
                    self._path = None
                    self._layer2Info = None
                    self._layer3Info = None
                    self._mplsInfo = None
                    return
            Holder.__name__ = "pathInfo_Holder"
            self.pyclass = Holder

    class layer2Info_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "layer2Info")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.layer2Info_Def.schema
            TClist = [GTD("http://oscars.es.net/OSCARS","vlanTag",lazy=False)(pname=(ns,"srcVtag"), aname="_srcVtag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","vlanTag",lazy=False)(pname=(ns,"destVtag"), aname="_destVtag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"srcEndpoint"), aname="_srcEndpoint", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"destEndpoint"), aname="_destEndpoint", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._srcVtag = None
                    self._destVtag = None
                    self._srcEndpoint = None
                    self._destEndpoint = None
                    return
            Holder.__name__ = "layer2Info_Holder"
            self.pyclass = Holder

    class layer3Info_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "layer3Info")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.layer3Info_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"srcHost"), aname="_srcHost", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"destHost"), aname="_destHost", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"protocol"), aname="_protocol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"srcIpPort"), aname="_srcIpPort", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"destIpPort"), aname="_destIpPort", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dscp"), aname="_dscp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._srcHost = None
                    self._destHost = None
                    self._protocol = None
                    self._srcIpPort = None
                    self._destIpPort = None
                    self._dscp = None
                    return
            Holder.__name__ = "layer3Info_Holder"
            self.pyclass = Holder

    class mplsInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "mplsInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.mplsInfo_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"burstLimit"), aname="_burstLimit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lspClass"), aname="_lspClass", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._burstLimit = None
                    self._lspClass = None
                    return
            Holder.__name__ = "mplsInfo_Holder"
            self.pyclass = Holder

    class vlanTag_Def(ZSI.TC.String, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "vlanTag")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["tagged"] = ZSI.TC.Boolean()
            ZSI.TC.String.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class emptyArg_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "emptyArg")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.emptyArg_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"msg"), aname="_msg", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._msg = None
                    return
            Holder.__name__ = "emptyArg_Holder"
            self.pyclass = Holder

    class globalReservationId_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "globalReservationId")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.globalReservationId_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"gri"), aname="_gri", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._gri = None
                    return
            Holder.__name__ = "globalReservationId_Holder"
            self.pyclass = Holder

    class createReservation_Dec(ElementDeclaration):
        literal = "createReservation"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","createReservation")
            kw["aname"] = "_createReservation"
            if ns0.resCreateContent_Def not in ns0.createReservation_Dec.__bases__:
                bases = list(ns0.createReservation_Dec.__bases__)
                bases.insert(0, ns0.resCreateContent_Def)
                ns0.createReservation_Dec.__bases__ = tuple(bases)

            ns0.resCreateContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createReservation_Dec_Holder"

    class createReservationResponse_Dec(ElementDeclaration):
        literal = "createReservationResponse"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","createReservationResponse")
            kw["aname"] = "_createReservationResponse"
            if ns0.createReply_Def not in ns0.createReservationResponse_Dec.__bases__:
                bases = list(ns0.createReservationResponse_Dec.__bases__)
                bases.insert(0, ns0.createReply_Def)
                ns0.createReservationResponse_Dec.__bases__ = tuple(bases)

            ns0.createReply_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createReservationResponse_Dec_Holder"

    class listReservations_Dec(ElementDeclaration):
        literal = "listReservations"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","listReservations")
            kw["aname"] = "_listReservations"
            if ns0.listRequest_Def not in ns0.listReservations_Dec.__bases__:
                bases = list(ns0.listReservations_Dec.__bases__)
                bases.insert(0, ns0.listRequest_Def)
                ns0.listReservations_Dec.__bases__ = tuple(bases)

            ns0.listRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listReservations_Dec_Holder"

    class listReservationsResponse_Dec(ElementDeclaration):
        literal = "listReservationsResponse"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","listReservationsResponse")
            kw["aname"] = "_listReservationsResponse"
            if ns0.listReply_Def not in ns0.listReservationsResponse_Dec.__bases__:
                bases = list(ns0.listReservationsResponse_Dec.__bases__)
                bases.insert(0, ns0.listReply_Def)
                ns0.listReservationsResponse_Dec.__bases__ = tuple(bases)

            ns0.listReply_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listReservationsResponse_Dec_Holder"

    class cancelReservation_Dec(ElementDeclaration):
        literal = "cancelReservation"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","cancelReservation")
            kw["aname"] = "_cancelReservation"
            if ns0.globalReservationId_Def not in ns0.cancelReservation_Dec.__bases__:
                bases = list(ns0.cancelReservation_Dec.__bases__)
                bases.insert(0, ns0.globalReservationId_Def)
                ns0.cancelReservation_Dec.__bases__ = tuple(bases)

            ns0.globalReservationId_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "cancelReservation_Dec_Holder"

    class cancelReservationResponse_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "cancelReservationResponse"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","cancelReservationResponse")
            kw["aname"] = "_cancelReservationResponse"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_cancelReservationResponse_immutable_holder"
            ZSI.TC.String.__init__(self, **kw)

    class modifyReservation_Dec(ElementDeclaration):
        literal = "modifyReservation"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","modifyReservation")
            kw["aname"] = "_modifyReservation"
            if ns0.modifyResContent_Def not in ns0.modifyReservation_Dec.__bases__:
                bases = list(ns0.modifyReservation_Dec.__bases__)
                bases.insert(0, ns0.modifyResContent_Def)
                ns0.modifyReservation_Dec.__bases__ = tuple(bases)

            ns0.modifyResContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifyReservation_Dec_Holder"

    class modifyReservationResponse_Dec(ElementDeclaration):
        literal = "modifyReservationResponse"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","modifyReservationResponse")
            kw["aname"] = "_modifyReservationResponse"
            if ns0.modifyResReply_Def not in ns0.modifyReservationResponse_Dec.__bases__:
                bases = list(ns0.modifyReservationResponse_Dec.__bases__)
                bases.insert(0, ns0.modifyResReply_Def)
                ns0.modifyReservationResponse_Dec.__bases__ = tuple(bases)

            ns0.modifyResReply_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifyReservationResponse_Dec_Holder"

    class queryReservation_Dec(ElementDeclaration):
        literal = "queryReservation"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","queryReservation")
            kw["aname"] = "_queryReservation"
            if ns0.globalReservationId_Def not in ns0.queryReservation_Dec.__bases__:
                bases = list(ns0.queryReservation_Dec.__bases__)
                bases.insert(0, ns0.globalReservationId_Def)
                ns0.queryReservation_Dec.__bases__ = tuple(bases)

            ns0.globalReservationId_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryReservation_Dec_Holder"

    class queryReservationResponse_Dec(ElementDeclaration):
        literal = "queryReservationResponse"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","queryReservationResponse")
            kw["aname"] = "_queryReservationResponse"
            if ns0.resDetails_Def not in ns0.queryReservationResponse_Dec.__bases__:
                bases = list(ns0.queryReservationResponse_Dec.__bases__)
                bases.insert(0, ns0.resDetails_Def)
                ns0.queryReservationResponse_Dec.__bases__ = tuple(bases)

            ns0.resDetails_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryReservationResponse_Dec_Holder"

    class getNetworkTopology_Dec(ElementDeclaration):
        literal = "getNetworkTopology"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","getNetworkTopology")
            kw["aname"] = "_getNetworkTopology"
            if ns0.getTopologyContent_Def not in ns0.getNetworkTopology_Dec.__bases__:
                bases = list(ns0.getNetworkTopology_Dec.__bases__)
                bases.insert(0, ns0.getTopologyContent_Def)
                ns0.getNetworkTopology_Dec.__bases__ = tuple(bases)

            ns0.getTopologyContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getNetworkTopology_Dec_Holder"

    class getNetworkTopologyResponse_Dec(ElementDeclaration):
        literal = "getNetworkTopologyResponse"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","getNetworkTopologyResponse")
            kw["aname"] = "_getNetworkTopologyResponse"
            if ns0.getTopologyResponseContent_Def not in ns0.getNetworkTopologyResponse_Dec.__bases__:
                bases = list(ns0.getNetworkTopologyResponse_Dec.__bases__)
                bases.insert(0, ns0.getTopologyResponseContent_Def)
                ns0.getNetworkTopologyResponse_Dec.__bases__ = tuple(bases)

            ns0.getTopologyResponseContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getNetworkTopologyResponse_Dec_Holder"

    class initiateTopologyPull_Dec(ElementDeclaration):
        literal = "initiateTopologyPull"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","initiateTopologyPull")
            kw["aname"] = "_initiateTopologyPull"
            if ns0.initiateTopologyPullContent_Def not in ns0.initiateTopologyPull_Dec.__bases__:
                bases = list(ns0.initiateTopologyPull_Dec.__bases__)
                bases.insert(0, ns0.initiateTopologyPullContent_Def)
                ns0.initiateTopologyPull_Dec.__bases__ = tuple(bases)

            ns0.initiateTopologyPullContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "initiateTopologyPull_Dec_Holder"

    class initiateTopologyPullResponse_Dec(ElementDeclaration):
        literal = "initiateTopologyPullResponse"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","initiateTopologyPullResponse")
            kw["aname"] = "_initiateTopologyPullResponse"
            if ns0.initiateTopologyPullResponseContent_Def not in ns0.initiateTopologyPullResponse_Dec.__bases__:
                bases = list(ns0.initiateTopologyPullResponse_Dec.__bases__)
                bases.insert(0, ns0.initiateTopologyPullResponseContent_Def)
                ns0.initiateTopologyPullResponse_Dec.__bases__ = tuple(bases)

            ns0.initiateTopologyPullResponseContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "initiateTopologyPullResponse_Dec_Holder"

    class createPath_Dec(ElementDeclaration):
        literal = "createPath"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","createPath")
            kw["aname"] = "_createPath"
            if ns0.createPathContent_Def not in ns0.createPath_Dec.__bases__:
                bases = list(ns0.createPath_Dec.__bases__)
                bases.insert(0, ns0.createPathContent_Def)
                ns0.createPath_Dec.__bases__ = tuple(bases)

            ns0.createPathContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createPath_Dec_Holder"

    class createPathResponse_Dec(ElementDeclaration):
        literal = "createPathResponse"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","createPathResponse")
            kw["aname"] = "_createPathResponse"
            if ns0.createPathResponseContent_Def not in ns0.createPathResponse_Dec.__bases__:
                bases = list(ns0.createPathResponse_Dec.__bases__)
                bases.insert(0, ns0.createPathResponseContent_Def)
                ns0.createPathResponse_Dec.__bases__ = tuple(bases)

            ns0.createPathResponseContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createPathResponse_Dec_Holder"

    class refreshPath_Dec(ElementDeclaration):
        literal = "refreshPath"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","refreshPath")
            kw["aname"] = "_refreshPath"
            if ns0.refreshPathContent_Def not in ns0.refreshPath_Dec.__bases__:
                bases = list(ns0.refreshPath_Dec.__bases__)
                bases.insert(0, ns0.refreshPathContent_Def)
                ns0.refreshPath_Dec.__bases__ = tuple(bases)

            ns0.refreshPathContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "refreshPath_Dec_Holder"

    class refreshPathResponse_Dec(ElementDeclaration):
        literal = "refreshPathResponse"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","refreshPathResponse")
            kw["aname"] = "_refreshPathResponse"
            if ns0.refreshPathResponseContent_Def not in ns0.refreshPathResponse_Dec.__bases__:
                bases = list(ns0.refreshPathResponse_Dec.__bases__)
                bases.insert(0, ns0.refreshPathResponseContent_Def)
                ns0.refreshPathResponse_Dec.__bases__ = tuple(bases)

            ns0.refreshPathResponseContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "refreshPathResponse_Dec_Holder"

    class teardownPath_Dec(ElementDeclaration):
        literal = "teardownPath"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","teardownPath")
            kw["aname"] = "_teardownPath"
            if ns0.teardownPathContent_Def not in ns0.teardownPath_Dec.__bases__:
                bases = list(ns0.teardownPath_Dec.__bases__)
                bases.insert(0, ns0.teardownPathContent_Def)
                ns0.teardownPath_Dec.__bases__ = tuple(bases)

            ns0.teardownPathContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "teardownPath_Dec_Holder"

    class teardownPathResponse_Dec(ElementDeclaration):
        literal = "teardownPathResponse"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","teardownPathResponse")
            kw["aname"] = "_teardownPathResponse"
            if ns0.teardownPathResponseContent_Def not in ns0.teardownPathResponse_Dec.__bases__:
                bases = list(ns0.teardownPathResponse_Dec.__bases__)
                bases.insert(0, ns0.teardownPathResponseContent_Def)
                ns0.teardownPathResponse_Dec.__bases__ = tuple(bases)

            ns0.teardownPathResponseContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "teardownPathResponse_Dec_Holder"

    class forward_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "forward"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            ns = ns0.forward_Dec.schema
            TClist = [GTD("http://oscars.es.net/OSCARS","forwardPayload",lazy=False)(pname=(ns,"payload"), aname="_payload", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"payloadSender"), aname="_payloadSender", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://oscars.es.net/OSCARS","forward")
            kw["aname"] = "_forward"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._payload = None
                    self._payloadSender = None
                    return
            Holder.__name__ = "forward_Holder"
            self.pyclass = Holder

    class forwardResponse_Dec(ElementDeclaration):
        literal = "forwardResponse"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = ("http://oscars.es.net/OSCARS","forwardResponse")
            kw["aname"] = "_forwardResponse"
            if ns0.forwardReply_Def not in ns0.forwardResponse_Dec.__bases__:
                bases = list(ns0.forwardResponse_Dec.__bases__)
                bases.insert(0, ns0.forwardReply_Def)
                ns0.forwardResponse_Dec.__bases__ = tuple(bases)

            ns0.forwardReply_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "forwardResponse_Dec_Holder"

    class AAAFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AAAFault"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            ns = ns0.AAAFault_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"msg"), aname="_msg", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://oscars.es.net/OSCARS","AAAFault")
            kw["aname"] = "_AAAFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._msg = None
                    return
            Holder.__name__ = "AAAFault_Holder"
            self.pyclass = Holder

    class BSSFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "BSSFault"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            ns = ns0.BSSFault_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"msg"), aname="_msg", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://oscars.es.net/OSCARS","BSSFault")
            kw["aname"] = "_BSSFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._msg = None
                    return
            Holder.__name__ = "BSSFault_Holder"
            self.pyclass = Holder

    class TopologyFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "TopologyFault"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            ns = ns0.TopologyFault_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"msg"), aname="_msg", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://oscars.es.net/OSCARS","TopologyFault")
            kw["aname"] = "_TopologyFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._msg = None
                    return
            Holder.__name__ = "TopologyFault_Holder"
            self.pyclass = Holder

    class SignalFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SignalFault"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            ns = ns0.SignalFault_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"msg"), aname="_msg", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://oscars.es.net/OSCARS","SignalFault")
            kw["aname"] = "_SignalFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._msg = None
                    return
            Holder.__name__ = "SignalFault_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://oscars.es.net/OSCARS)
