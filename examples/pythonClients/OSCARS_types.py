##################################################
# file: OSCARS_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py OSCARS.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://ogf.org/schema/network/topology/ctrlPlane/20070626/
##############################

class ns1:
    targetNamespace = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"

    class CtrlPlaneTopologyContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlaneTopologyContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.CtrlPlaneTopologyContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"idcId"), aname="_idcId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","domain",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GTD("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","CtrlPlaneDomainSignatureContent",lazy=False)(pname=(ns,"domainSignature"), aname="_domainSignature", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["id"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._idcId = None
                    self._domain = None
                    self._domainSignature = []
                    return
            Holder.__name__ = "CtrlPlaneTopologyContent_Holder"
            self.pyclass = Holder

    class CtrlPlaneDomainContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlaneDomainContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.CtrlPlaneDomainContent_Def.schema
            TClist = [GED("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","node",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GED("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","port",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GED("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","link",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["id"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._node = None
                    self._port = None
                    self._link = None
                    return
            Holder.__name__ = "CtrlPlaneDomainContent_Holder"
            self.pyclass = Holder

    class CtrlPlaneNodeContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlaneNodeContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.CtrlPlaneNodeContent_Def.schema
            TClist = [GTD("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","CtrlPlaneAddressContent",lazy=False)(pname=(ns,"address"), aname="_address", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","port",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["id"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._address = None
                    self._port = None
                    return
            Holder.__name__ = "CtrlPlaneNodeContent_Holder"
            self.pyclass = Holder

    class CtrlPlanePortContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlanePortContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.CtrlPlanePortContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"capacity"), aname="_capacity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"maximumReservableCapacity"), aname="_maximumReservableCapacity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"minimumReservableCapacity"), aname="_minimumReservableCapacity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"granularity"), aname="_granularity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"unreservedCapacity"), aname="_unreservedCapacity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","link",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["id"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._capacity = None
                    self._maximumReservableCapacity = None
                    self._minimumReservableCapacity = None
                    self._granularity = None
                    self._unreservedCapacity = None
                    self._link = None
                    return
            Holder.__name__ = "CtrlPlanePortContent_Holder"
            self.pyclass = Holder

    class CtrlPlaneLinkContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlaneLinkContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.CtrlPlaneLinkContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"remoteLinkId"), aname="_remoteLinkId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"remotePortId"), aname="_remotePortId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"remoteNodeId"), aname="_remoteNodeId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"remoteDomainId"), aname="_remoteDomainId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trafficEngineeringMetric"), aname="_trafficEngineeringMetric", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"linkProtectionTypes"), aname="_linkProtectionTypes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"capacity"), aname="_capacity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"maximumReservableCapacity"), aname="_maximumReservableCapacity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"minimumReservableCapacity"), aname="_minimumReservableCapacity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"granularity"), aname="_granularity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"unreservedCapacity"), aname="_unreservedCapacity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","CtrlPlaneAdministrativeGroup",lazy=False)(pname=(ns,"administrativeGroups"), aname="_administrativeGroups", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","CtrlPlaneSwcapContent",lazy=False)(pname=(ns,"SwitchingCapabilityDescriptors"), aname="_SwitchingCapabilityDescriptors", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["id"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._remoteLinkId = None
                    self._remotePortId = None
                    self._remoteNodeId = None
                    self._remoteDomainId = None
                    self._trafficEngineeringMetric = None
                    self._linkProtectionTypes = []
                    self._capacity = None
                    self._maximumReservableCapacity = None
                    self._minimumReservableCapacity = None
                    self._granularity = None
                    self._unreservedCapacity = None
                    self._administrativeGroups = []
                    self._SwitchingCapabilityDescriptors = None
                    return
            Holder.__name__ = "CtrlPlaneLinkContent_Holder"
            self.pyclass = Holder

    class CtrlPlanePathContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlanePathContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.CtrlPlanePathContent_Def.schema
            TClist = [GTD("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","CtrlPlaneHopContent",lazy=False)(pname=(ns,"hop"), aname="_hop", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["id"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hop = []
                    return
            Holder.__name__ = "CtrlPlanePathContent_Holder"
            self.pyclass = Holder

    class CtrlPlaneHopContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlaneHopContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.CtrlPlaneHopContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"domainIdRef"), aname="_domainIdRef", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"nodeIdRef"), aname="_nodeIdRef", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"portIdRef"), aname="_portIdRef", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"linkIdRef"), aname="_linkIdRef", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["id"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._domainIdRef = None
                    self._nodeIdRef = None
                    self._portIdRef = None
                    self._linkIdRef = None
                    return
            Holder.__name__ = "CtrlPlaneHopContent_Holder"
            self.pyclass = Holder

    class CtrlPlaneDomainSignatureContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlaneDomainSignatureContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.CtrlPlaneDomainSignatureContent_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["domainId"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "CtrlPlaneDomainSignatureContent_Holder"
            self.pyclass = Holder

    class CtrlPlaneAddressContent_Def(ZSI.TC.String, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlaneAddressContent")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["value"] = ZSI.TC.String()
            self.attribute_typecode_dict["type"] = ZSI.TC.String()
            ZSI.TC.String.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CtrlPlaneSwcapContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlaneSwcapContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.CtrlPlaneSwcapContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"switchingcapType"), aname="_switchingcapType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"encodingType"), aname="_encodingType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","CtrlPlaneSwitchingCapabilitySpecficInfo",lazy=False)(pname=(ns,"switchingCapabilitySpecficInfo"), aname="_switchingCapabilitySpecficInfo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._switchingcapType = None
                    self._encodingType = None
                    self._switchingCapabilitySpecficInfo = None
                    return
            Holder.__name__ = "CtrlPlaneSwcapContent_Holder"
            self.pyclass = Holder

    class CtrlPlaneAdministrativeGroup_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlaneAdministrativeGroup")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.CtrlPlaneAdministrativeGroup_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"group"), aname="_group", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"groupID"), aname="_groupID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._group = None
                    self._groupID = None
                    return
            Holder.__name__ = "CtrlPlaneAdministrativeGroup_Holder"
            self.pyclass = Holder

    class CtrlPlaneSwitchingCapabilitySpecficInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        type = (schema, "CtrlPlaneSwitchingCapabilitySpecficInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.CtrlPlaneSwitchingCapabilitySpecficInfo_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"capability"), aname="_capability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"interfaceMTU"), aname="_interfaceMTU", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"vlanRangeAvailability"), aname="_vlanRangeAvailability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._capability = None
                    self._interfaceMTU = None
                    self._vlanRangeAvailability = None
                    return
            Holder.__name__ = "CtrlPlaneSwitchingCapabilitySpecficInfo_Holder"
            self.pyclass = Holder

    class topology_Dec(ElementDeclaration):
        literal = "topology"
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://ogf.org/schema/network/topology/ctrlPlane/20070626/', u'topology')
            kw["aname"] = "_topology"
            if ns1.CtrlPlaneTopologyContent_Def not in ns1.topology_Dec.__bases__:
                bases = list(ns1.topology_Dec.__bases__)
                bases.insert(0, ns1.CtrlPlaneTopologyContent_Def)
                ns1.topology_Dec.__bases__ = tuple(bases)

            ns1.CtrlPlaneTopologyContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "topology_Dec_Holder"

    class domain_Dec(ElementDeclaration):
        literal = "domain"
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://ogf.org/schema/network/topology/ctrlPlane/20070626/', u'domain')
            kw["aname"] = "_domain"
            if ns1.CtrlPlaneDomainContent_Def not in ns1.domain_Dec.__bases__:
                bases = list(ns1.domain_Dec.__bases__)
                bases.insert(0, ns1.CtrlPlaneDomainContent_Def)
                ns1.domain_Dec.__bases__ = tuple(bases)

            ns1.CtrlPlaneDomainContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "domain_Dec_Holder"

    class node_Dec(ElementDeclaration):
        literal = "node"
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://ogf.org/schema/network/topology/ctrlPlane/20070626/', u'node')
            kw["aname"] = "_node"
            if ns1.CtrlPlaneNodeContent_Def not in ns1.node_Dec.__bases__:
                bases = list(ns1.node_Dec.__bases__)
                bases.insert(0, ns1.CtrlPlaneNodeContent_Def)
                ns1.node_Dec.__bases__ = tuple(bases)

            ns1.CtrlPlaneNodeContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "node_Dec_Holder"

    class port_Dec(ElementDeclaration):
        literal = "port"
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://ogf.org/schema/network/topology/ctrlPlane/20070626/', u'port')
            kw["aname"] = "_port"
            if ns1.CtrlPlanePortContent_Def not in ns1.port_Dec.__bases__:
                bases = list(ns1.port_Dec.__bases__)
                bases.insert(0, ns1.CtrlPlanePortContent_Def)
                ns1.port_Dec.__bases__ = tuple(bases)

            ns1.CtrlPlanePortContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "port_Dec_Holder"

    class link_Dec(ElementDeclaration):
        literal = "link"
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://ogf.org/schema/network/topology/ctrlPlane/20070626/', u'link')
            kw["aname"] = "_link"
            if ns1.CtrlPlaneLinkContent_Def not in ns1.link_Dec.__bases__:
                bases = list(ns1.link_Dec.__bases__)
                bases.insert(0, ns1.CtrlPlaneLinkContent_Def)
                ns1.link_Dec.__bases__ = tuple(bases)

            ns1.CtrlPlaneLinkContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "link_Dec_Holder"

    class path_Dec(ElementDeclaration):
        literal = "path"
        schema = "http://ogf.org/schema/network/topology/ctrlPlane/20070626/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://ogf.org/schema/network/topology/ctrlPlane/20070626/', u'path')
            kw["aname"] = "_path"
            if ns1.CtrlPlanePathContent_Def not in ns1.path_Dec.__bases__:
                bases = list(ns1.path_Dec.__bases__)
                bases.insert(0, ns1.CtrlPlanePathContent_Def)
                ns1.path_Dec.__bases__ = tuple(bases)

            ns1.CtrlPlanePathContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "path_Dec_Holder"

# end class ns1 (tns: http://ogf.org/schema/network/topology/ctrlPlane/20070626/)

##############################
# targetNamespace
# http://oscars.es.net/OSCARS
##############################

class ns0:
    targetNamespace = "http://oscars.es.net/OSCARS"

    class resCreateContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "resCreateContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.resCreateContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"globalReservationId"), aname="_globalReservationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"startTime"), aname="_startTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"endTime"), aname="_endTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"bandwidth"), aname="_bandwidth", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","pathInfo",lazy=False)(pname=(ns,"pathInfo"), aname="_pathInfo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._globalReservationId = None
                    self._startTime = None
                    self._endTime = None
                    self._bandwidth = None
                    self._description = None
                    self._pathInfo = None
                    return
            Holder.__name__ = "resCreateContent_Holder"
            self.pyclass = Holder

    class createReply_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "createReply")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.createReply_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"globalReservationId"), aname="_globalReservationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"token"), aname="_token", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","pathInfo",lazy=False)(pname=(ns,"pathInfo"), aname="_pathInfo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._globalReservationId = None
                    self._token = None
                    self._status = None
                    self._pathInfo = None
                    return
            Holder.__name__ = "createReply_Holder"
            self.pyclass = Holder

    class modifyResContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "modifyResContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifyResContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"globalReservationId"), aname="_globalReservationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"startTime"), aname="_startTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"endTime"), aname="_endTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"bandwidth"), aname="_bandwidth", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","pathInfo",lazy=False)(pname=(ns,"pathInfo"), aname="_pathInfo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._globalReservationId = None
                    self._startTime = None
                    self._endTime = None
                    self._bandwidth = None
                    self._description = None
                    self._pathInfo = None
                    return
            Holder.__name__ = "modifyResContent_Holder"
            self.pyclass = Holder

    class modifyResReply_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "modifyResReply")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifyResReply_Def.schema
            TClist = [GTD("http://oscars.es.net/OSCARS","resDetails",lazy=False)(pname=(ns,"reservation"), aname="_reservation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._reservation = None
                    return
            Holder.__name__ = "modifyResReply_Holder"
            self.pyclass = Holder

    class getTopologyContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "getTopologyContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getTopologyContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"topologyType"), aname="_topologyType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._topologyType = None
                    return
            Holder.__name__ = "getTopologyContent_Holder"
            self.pyclass = Holder

    class getTopologyResponseContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "getTopologyResponseContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getTopologyResponseContent_Def.schema
            TClist = [GED("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","topology",lazy=False, isref=True)(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._topology = None
                    return
            Holder.__name__ = "getTopologyResponseContent_Holder"
            self.pyclass = Holder

    class initiateTopologyPullContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "initiateTopologyPullContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.initiateTopologyPullContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"topologyType"), aname="_topologyType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._topologyType = None
                    return
            Holder.__name__ = "initiateTopologyPullContent_Holder"
            self.pyclass = Holder

    class initiateTopologyPullResponseContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "initiateTopologyPullResponseContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.initiateTopologyPullResponseContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"resultMsg"), aname="_resultMsg", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._resultMsg = None
                    return
            Holder.__name__ = "initiateTopologyPullResponseContent_Holder"
            self.pyclass = Holder

    class createPathContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "createPathContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.createPathContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"token"), aname="_token", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"globalReservationId"), aname="_globalReservationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._token = None
                    self._globalReservationId = None
                    return
            Holder.__name__ = "createPathContent_Holder"
            self.pyclass = Holder

    class createPathResponseContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "createPathResponseContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.createPathResponseContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"globalReservationId"), aname="_globalReservationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._globalReservationId = None
                    self._status = None
                    return
            Holder.__name__ = "createPathResponseContent_Holder"
            self.pyclass = Holder

    class refreshPathContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "refreshPathContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.refreshPathContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"token"), aname="_token", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"globalReservationId"), aname="_globalReservationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._token = None
                    self._globalReservationId = None
                    return
            Holder.__name__ = "refreshPathContent_Holder"
            self.pyclass = Holder

    class refreshPathResponseContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "refreshPathResponseContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.refreshPathResponseContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"globalReservationId"), aname="_globalReservationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._globalReservationId = None
                    self._status = None
                    return
            Holder.__name__ = "refreshPathResponseContent_Holder"
            self.pyclass = Holder

    class teardownPathContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "teardownPathContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.teardownPathContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"token"), aname="_token", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"globalReservationId"), aname="_globalReservationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._token = None
                    self._globalReservationId = None
                    return
            Holder.__name__ = "teardownPathContent_Holder"
            self.pyclass = Holder

    class teardownPathResponseContent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "teardownPathResponseContent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.teardownPathResponseContent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"globalReservationId"), aname="_globalReservationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._globalReservationId = None
                    self._status = None
                    return
            Holder.__name__ = "teardownPathResponseContent_Holder"
            self.pyclass = Holder

    class resDetails_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "resDetails")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.resDetails_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"globalReservationId"), aname="_globalReservationId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"login"), aname="_login", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"startTime"), aname="_startTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"endTime"), aname="_endTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"createTime"), aname="_createTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"bandwidth"), aname="_bandwidth", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","pathInfo",lazy=False)(pname=(ns,"pathInfo"), aname="_pathInfo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._globalReservationId = None
                    self._login = None
                    self._status = None
                    self._startTime = None
                    self._endTime = None
                    self._createTime = None
                    self._bandwidth = None
                    self._description = None
                    self._pathInfo = None
                    return
            Holder.__name__ = "resDetails_Holder"
            self.pyclass = Holder

    class listRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "listRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"resStatus"), aname="_resStatus", minOccurs=0, maxOccurs=5, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"startTime"), aname="_startTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"endTime"), aname="_endTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"linkId"), aname="_linkId", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"resRequested"), aname="_resRequested", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"resOffset"), aname="_resOffset", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._resStatus = []
                    self._startTime = None
                    self._endTime = None
                    self._description = None
                    self._linkId = []
                    self._resRequested = None
                    self._resOffset = None
                    return
            Holder.__name__ = "listRequest_Holder"
            self.pyclass = Holder

    class listReply_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "listReply")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listReply_Def.schema
            TClist = [GTD("http://oscars.es.net/OSCARS","resDetails",lazy=False)(pname=(ns,"resDetails"), aname="_resDetails", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"totalResults"), aname="_totalResults", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._resDetails = []
                    self._totalResults = None
                    return
            Holder.__name__ = "listReply_Holder"
            self.pyclass = Holder

    class forwardPayload_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "forwardPayload")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.forwardPayload_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"contentType"), aname="_contentType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","resCreateContent",lazy=False)(pname=(ns,"createReservation"), aname="_createReservation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","modifyResContent",lazy=False)(pname=(ns,"modifyReservation"), aname="_modifyReservation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","globalReservationId",lazy=False)(pname=(ns,"cancelReservation"), aname="_cancelReservation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","globalReservationId",lazy=False)(pname=(ns,"queryReservation"), aname="_queryReservation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","listRequest",lazy=False)(pname=(ns,"listReservations"), aname="_listReservations", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","createPathContent",lazy=False)(pname=(ns,"createPath"), aname="_createPath", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","refreshPathContent",lazy=False)(pname=(ns,"refreshPath"), aname="_refreshPath", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","teardownPathContent",lazy=False)(pname=(ns,"teardownPath"), aname="_teardownPath", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._contentType = None
                    self._createReservation = None
                    self._modifyReservation = None
                    self._cancelReservation = None
                    self._queryReservation = None
                    self._listReservations = None
                    self._createPath = None
                    self._refreshPath = None
                    self._teardownPath = None
                    return
            Holder.__name__ = "forwardPayload_Holder"
            self.pyclass = Holder

    class forwardReply_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "forwardReply")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.forwardReply_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"contentType"), aname="_contentType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","createReply",lazy=False)(pname=(ns,"createReservation"), aname="_createReservation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","modifyResReply",lazy=False)(pname=(ns,"modifyReservation"), aname="_modifyReservation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"cancelReservation"), aname="_cancelReservation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","resDetails",lazy=False)(pname=(ns,"queryReservation"), aname="_queryReservation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","listReply",lazy=False)(pname=(ns,"listReservations"), aname="_listReservations", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","createPathResponseContent",lazy=False)(pname=(ns,"createPath"), aname="_createPath", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","refreshPathResponseContent",lazy=False)(pname=(ns,"refreshPath"), aname="_refreshPath", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","teardownPathResponseContent",lazy=False)(pname=(ns,"teardownPath"), aname="_teardownPath", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._contentType = None
                    self._createReservation = None
                    self._modifyReservation = None
                    self._cancelReservation = None
                    self._queryReservation = None
                    self._listReservations = None
                    self._createPath = None
                    self._refreshPath = None
                    self._teardownPath = None
                    return
            Holder.__name__ = "forwardReply_Holder"
            self.pyclass = Holder

    class pathInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "pathInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.pathInfo_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"pathSetupMode"), aname="_pathSetupMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"pathType"), aname="_pathType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ogf.org/schema/network/topology/ctrlPlane/20070626/","CtrlPlanePathContent",lazy=False)(pname=(ns,"path"), aname="_path", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","layer2Info",lazy=False)(pname=(ns,"layer2Info"), aname="_layer2Info", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","layer3Info",lazy=False)(pname=(ns,"layer3Info"), aname="_layer3Info", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","mplsInfo",lazy=False)(pname=(ns,"mplsInfo"), aname="_mplsInfo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pathSetupMode = None
                    self._pathType = None
                    self._path = None
                    self._layer2Info = None
                    self._layer3Info = None
                    self._mplsInfo = None
                    return
            Holder.__name__ = "pathInfo_Holder"
            self.pyclass = Holder

    class layer2Info_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "layer2Info")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.layer2Info_Def.schema
            TClist = [GTD("http://oscars.es.net/OSCARS","vlanTag",lazy=False)(pname=(ns,"srcVtag"), aname="_srcVtag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://oscars.es.net/OSCARS","vlanTag",lazy=False)(pname=(ns,"destVtag"), aname="_destVtag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"srcEndpoint"), aname="_srcEndpoint", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"destEndpoint"), aname="_destEndpoint", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._srcVtag = None
                    self._destVtag = None
                    self._srcEndpoint = None
                    self._destEndpoint = None
                    return
            Holder.__name__ = "layer2Info_Holder"
            self.pyclass = Holder

    class layer3Info_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "layer3Info")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.layer3Info_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"srcHost"), aname="_srcHost", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"destHost"), aname="_destHost", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"protocol"), aname="_protocol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"srcIpPort"), aname="_srcIpPort", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"destIpPort"), aname="_destIpPort", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dscp"), aname="_dscp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._srcHost = None
                    self._destHost = None
                    self._protocol = None
                    self._srcIpPort = None
                    self._destIpPort = None
                    self._dscp = None
                    return
            Holder.__name__ = "layer3Info_Holder"
            self.pyclass = Holder

    class mplsInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "mplsInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.mplsInfo_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"burstLimit"), aname="_burstLimit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lspClass"), aname="_lspClass", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._burstLimit = None
                    self._lspClass = None
                    return
            Holder.__name__ = "mplsInfo_Holder"
            self.pyclass = Holder

    class vlanTag_Def(ZSI.TC.String, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "vlanTag")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["tagged"] = ZSI.TC.Boolean()
            ZSI.TC.String.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class emptyArg_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "emptyArg")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.emptyArg_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"msg"), aname="_msg", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._msg = None
                    return
            Holder.__name__ = "emptyArg_Holder"
            self.pyclass = Holder

    class globalReservationId_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://oscars.es.net/OSCARS"
        type = (schema, "globalReservationId")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.globalReservationId_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"gri"), aname="_gri", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._gri = None
                    return
            Holder.__name__ = "globalReservationId_Holder"
            self.pyclass = Holder

    class createReservation_Dec(ElementDeclaration):
        literal = "createReservation"
        schema = "http://oscars.es.net/OSCARS"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'createReservation')
            kw["aname"] = "_createReservation"
            if ns0.resCreateContent_Def not in ns0.createReservation_Dec.__bases__:
                bases = list(ns0.createReservation_Dec.__bases__)
                bases.insert(0, ns0.resCreateContent_Def)
                ns0.createReservation_Dec.__bases__ = tuple(bases)

            ns0.resCreateContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createReservation_Dec_Holder"

    class createReservationResponse_Dec(ElementDeclaration):
        literal = "createReservationResponse"
        schema = "http://oscars.es.net/OSCARS"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'createReservationResponse')
            kw["aname"] = "_createReservationResponse"
            if ns0.createReply_Def not in ns0.createReservationResponse_Dec.__bases__:
                bases = list(ns0.createReservationResponse_Dec.__bases__)
                bases.insert(0, ns0.createReply_Def)
                ns0.createReservationResponse_Dec.__bases__ = tuple(bases)

            ns0.createReply_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createReservationResponse_Dec_Holder"

    class listReservations_Dec(ElementDeclaration):
        literal = "listReservations"
        schema = "http://oscars.es.net/OSCARS"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'listReservations')
            kw["aname"] = "_listReservations"
            if ns0.listRequest_Def not in ns0.listReservations_Dec.__bases__:
                bases = list(ns0.listReservations_Dec.__bases__)
                bases.insert(0, ns0.listRequest_Def)
                ns0.listReservations_Dec.__bases__ = tuple(bases)

            ns0.listRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listReservations_Dec_Holder"

    class listReservationsResponse_Dec(ElementDeclaration):
        literal = "listReservationsResponse"
        schema = "http://oscars.es.net/OSCARS"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'listReservationsResponse')
            kw["aname"] = "_listReservationsResponse"
            if ns0.listReply_Def not in ns0.listReservationsResponse_Dec.__bases__:
                bases = list(ns0.listReservationsResponse_Dec.__bases__)
                bases.insert(0, ns0.listReply_Def)
                ns0.listReservationsResponse_Dec.__bases__ = tuple(bases)

            ns0.listReply_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listReservationsResponse_Dec_Holder"

    class cancelReservation_Dec(ElementDeclaration):
        literal = "cancelReservation"
        schema = "http://oscars.es.net/OSCARS"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'cancelReservation')
            kw["aname"] = "_cancelReservation"
            if ns0.globalReservationId_Def not in ns0.cancelReservation_Dec.__bases__:
                bases = list(ns0.cancelReservation_Dec.__bases__)
                bases.insert(0, ns0.globalReservationId_Def)
                ns0.cancelReservation_Dec.__bases__ = tuple(bases)

            ns0.globalReservationId_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "cancelReservation_Dec_Holder"

    class cancelReservationResponse_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "cancelReservationResponse"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'cancelReservationResponse')
            kw["aname"] = "_cancelReservationResponse"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_cancelReservationResponse_immutable_holder"
            ZSI.TC.String.__init__(self, **kw)

    class modifyReservation_Dec(ElementDeclaration):
        literal = "modifyReservation"
        schema = "http://oscars.es.net/OSCARS"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'modifyReservation')
            kw["aname"] = "_modifyReservation"
            if ns0.modifyResContent_Def not in ns0.modifyReservation_Dec.__bases__:
                bases = list(ns0.modifyReservation_Dec.__bases__)
                bases.insert(0, ns0.modifyResContent_Def)
                ns0.modifyReservation_Dec.__bases__ = tuple(bases)

            ns0.modifyResContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifyReservation_Dec_Holder"

    class modifyReservationResponse_Dec(ElementDeclaration):
        literal = "modifyReservationResponse"
        schema = "http://oscars.es.net/OSCARS"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'modifyReservationResponse')
            kw["aname"] = "_modifyReservationResponse"
            if ns0.modifyResReply_Def not in ns0.modifyReservationResponse_Dec.__bases__:
                bases = list(ns0.modifyReservationResponse_Dec.__bases__)
                bases.insert(0, ns0.modifyResReply_Def)
                ns0.modifyReservationResponse_Dec.__bases__ = tuple(bases)

            ns0.modifyResReply_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifyReservationResponse_Dec_Holder"

    class queryReservation_Dec(ElementDeclaration):
        literal = "queryReservation"
        schema = "http://oscars.es.net/OSCARS"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'queryReservation')
            kw["aname"] = "_queryReservation"
            if ns0.globalReservationId_Def not in ns0.queryReservation_Dec.__bases__:
                bases = list(ns0.queryReservation_Dec.__bases__)
                bases.insert(0, ns0.globalReservationId_Def)
                ns0.queryReservation_Dec.__bases__ = tuple(bases)

            ns0.globalReservationId_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryReservation_Dec_Holder"

    class queryReservationResponse_Dec(ElementDeclaration):
        literal = "queryReservationResponse"
        schema = "http://oscars.es.net/OSCARS"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'queryReservationResponse')
            kw["aname"] = "_queryReservationResponse"
            if ns0.resDetails_Def not in ns0.queryReservationResponse_Dec.__bases__:
                bases = list(ns0.queryReservationResponse_Dec.__bases__)
                bases.insert(0, ns0.resDetails_Def)
                ns0.queryReservationResponse_Dec.__bases__ = tuple(bases)

            ns0.resDetails_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryReservationResponse_Dec_Holder"

    class getNetworkTopology_Dec(ElementDeclaration):
        literal = "getNetworkTopology"
        schema = "http://oscars.es.net/OSCARS"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'getNetworkTopology')
            kw["aname"] = "_getNetworkTopology"
            if ns0.getTopologyContent_Def not in ns0.getNetworkTopology_Dec.__bases__:
                bases = list(ns0.getNetworkTopology_Dec.__bases__)
                bases.insert(0, ns0.getTopologyContent_Def)
                ns0.getNetworkTopology_Dec.__bases__ = tuple(bases)

            ns0.getTopologyContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getNetworkTopology_Dec_Holder"

    class getNetworkTopologyResponse_Dec(ElementDeclaration):
        literal = "getNetworkTopologyResponse"
        schema = "http://oscars.es.net/OSCARS"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'getNetworkTopologyResponse')
            kw["aname"] = "_getNetworkTopologyResponse"
            if ns0.getTopologyResponseContent_Def not in ns0.getNetworkTopologyResponse_Dec.__bases__:
                bases = list(ns0.getNetworkTopologyResponse_Dec.__bases__)
                bases.insert(0, ns0.getTopologyResponseContent_Def)
                ns0.getNetworkTopologyResponse_Dec.__bases__ = tuple(bases)

            ns0.getTopologyResponseContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getNetworkTopologyResponse_Dec_Holder"

    class initiateTopologyPull_Dec(ElementDeclaration):
        literal = "initiateTopologyPull"
        schema = "http://oscars.es.net/OSCARS"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'initiateTopologyPull')
            kw["aname"] = "_initiateTopologyPull"
            if ns0.initiateTopologyPullContent_Def not in ns0.initiateTopologyPull_Dec.__bases__:
                bases = list(ns0.initiateTopologyPull_Dec.__bases__)
                bases.insert(0, ns0.initiateTopologyPullContent_Def)
                ns0.initiateTopologyPull_Dec.__bases__ = tuple(bases)

            ns0.initiateTopologyPullContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "initiateTopologyPull_Dec_Holder"

    class initiateTopologyPullResponse_Dec(ElementDeclaration):
        literal = "initiateTopologyPullResponse"
        schema = "http://oscars.es.net/OSCARS"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'initiateTopologyPullResponse')
            kw["aname"] = "_initiateTopologyPullResponse"
            if ns0.initiateTopologyPullResponseContent_Def not in ns0.initiateTopologyPullResponse_Dec.__bases__:
                bases = list(ns0.initiateTopologyPullResponse_Dec.__bases__)
                bases.insert(0, ns0.initiateTopologyPullResponseContent_Def)
                ns0.initiateTopologyPullResponse_Dec.__bases__ = tuple(bases)

            ns0.initiateTopologyPullResponseContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "initiateTopologyPullResponse_Dec_Holder"

    class createPath_Dec(ElementDeclaration):
        literal = "createPath"
        schema = "http://oscars.es.net/OSCARS"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'createPath')
            kw["aname"] = "_createPath"
            if ns0.createPathContent_Def not in ns0.createPath_Dec.__bases__:
                bases = list(ns0.createPath_Dec.__bases__)
                bases.insert(0, ns0.createPathContent_Def)
                ns0.createPath_Dec.__bases__ = tuple(bases)

            ns0.createPathContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createPath_Dec_Holder"

    class createPathResponse_Dec(ElementDeclaration):
        literal = "createPathResponse"
        schema = "http://oscars.es.net/OSCARS"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'createPathResponse')
            kw["aname"] = "_createPathResponse"
            if ns0.createPathResponseContent_Def not in ns0.createPathResponse_Dec.__bases__:
                bases = list(ns0.createPathResponse_Dec.__bases__)
                bases.insert(0, ns0.createPathResponseContent_Def)
                ns0.createPathResponse_Dec.__bases__ = tuple(bases)

            ns0.createPathResponseContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createPathResponse_Dec_Holder"

    class refreshPath_Dec(ElementDeclaration):
        literal = "refreshPath"
        schema = "http://oscars.es.net/OSCARS"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'refreshPath')
            kw["aname"] = "_refreshPath"
            if ns0.refreshPathContent_Def not in ns0.refreshPath_Dec.__bases__:
                bases = list(ns0.refreshPath_Dec.__bases__)
                bases.insert(0, ns0.refreshPathContent_Def)
                ns0.refreshPath_Dec.__bases__ = tuple(bases)

            ns0.refreshPathContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "refreshPath_Dec_Holder"

    class refreshPathResponse_Dec(ElementDeclaration):
        literal = "refreshPathResponse"
        schema = "http://oscars.es.net/OSCARS"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'refreshPathResponse')
            kw["aname"] = "_refreshPathResponse"
            if ns0.refreshPathResponseContent_Def not in ns0.refreshPathResponse_Dec.__bases__:
                bases = list(ns0.refreshPathResponse_Dec.__bases__)
                bases.insert(0, ns0.refreshPathResponseContent_Def)
                ns0.refreshPathResponse_Dec.__bases__ = tuple(bases)

            ns0.refreshPathResponseContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "refreshPathResponse_Dec_Holder"

    class teardownPath_Dec(ElementDeclaration):
        literal = "teardownPath"
        schema = "http://oscars.es.net/OSCARS"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'teardownPath')
            kw["aname"] = "_teardownPath"
            if ns0.teardownPathContent_Def not in ns0.teardownPath_Dec.__bases__:
                bases = list(ns0.teardownPath_Dec.__bases__)
                bases.insert(0, ns0.teardownPathContent_Def)
                ns0.teardownPath_Dec.__bases__ = tuple(bases)

            ns0.teardownPathContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "teardownPath_Dec_Holder"

    class teardownPathResponse_Dec(ElementDeclaration):
        literal = "teardownPathResponse"
        schema = "http://oscars.es.net/OSCARS"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'teardownPathResponse')
            kw["aname"] = "_teardownPathResponse"
            if ns0.teardownPathResponseContent_Def not in ns0.teardownPathResponse_Dec.__bases__:
                bases = list(ns0.teardownPathResponse_Dec.__bases__)
                bases.insert(0, ns0.teardownPathResponseContent_Def)
                ns0.teardownPathResponse_Dec.__bases__ = tuple(bases)

            ns0.teardownPathResponseContent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "teardownPathResponse_Dec_Holder"

    class forward_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "forward"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            ns = ns0.forward_Dec.schema
            TClist = [GTD("http://oscars.es.net/OSCARS","forwardPayload",lazy=False)(pname=(ns,"payload"), aname="_payload", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"payloadSender"), aname="_payloadSender", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'forward')
            kw["aname"] = "_forward"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._payload = None
                    self._payloadSender = None
                    return
            Holder.__name__ = "forward_Holder"
            self.pyclass = Holder

    class forwardResponse_Dec(ElementDeclaration):
        literal = "forwardResponse"
        schema = "http://oscars.es.net/OSCARS"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'forwardResponse')
            kw["aname"] = "_forwardResponse"
            if ns0.forwardReply_Def not in ns0.forwardResponse_Dec.__bases__:
                bases = list(ns0.forwardResponse_Dec.__bases__)
                bases.insert(0, ns0.forwardReply_Def)
                ns0.forwardResponse_Dec.__bases__ = tuple(bases)

            ns0.forwardReply_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "forwardResponse_Dec_Holder"

    class AAAFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AAAFault"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            ns = ns0.AAAFault_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"msg"), aname="_msg", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'AAAFault')
            kw["aname"] = "_AAAFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._msg = None
                    return
            Holder.__name__ = "AAAFault_Holder"
            self.pyclass = Holder

    class BSSFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "BSSFault"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            ns = ns0.BSSFault_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"msg"), aname="_msg", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'BSSFault')
            kw["aname"] = "_BSSFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._msg = None
                    return
            Holder.__name__ = "BSSFault_Holder"
            self.pyclass = Holder

    class TopologyFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "TopologyFault"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            ns = ns0.TopologyFault_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"msg"), aname="_msg", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'TopologyFault')
            kw["aname"] = "_TopologyFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._msg = None
                    return
            Holder.__name__ = "TopologyFault_Holder"
            self.pyclass = Holder

    class SignalFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SignalFault"
        schema = "http://oscars.es.net/OSCARS"
        def __init__(self, **kw):
            ns = ns0.SignalFault_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"msg"), aname="_msg", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://oscars.es.net/OSCARS', u'SignalFault')
            kw["aname"] = "_SignalFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._msg = None
                    return
            Holder.__name__ = "SignalFault_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://oscars.es.net/OSCARS)
