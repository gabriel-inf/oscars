<?xml version="1.0" encoding="UTF-8"?>
<!-- Main build file -->
<project xmlns:artifact="urn:maven-artifact-ant" name="OSCARS" default="all">
    <!-- properties section for main targets ******************************* -->
    <property environment="env"/>
	<available property="domain.exists" file="${env.DOMAIN_HOME}"/> 
    <property name="domain.home" value="${env.DOMAIN_HOME}"/>
	<property name="defaultKeys" location="conf/examples"/>
    <!-- <property file="${domain.home}/ant.properties"/> -->
    <property name="catalina.home" value="${env.CATALINA_HOME}"/>
    <property name="app.name" value="oscars"/>
    <property name="app.version" value="0.5-dev"/>
    <property name="webapp.home" value="${catalina.home}/webapps"/>
    <property name="webservice.home" value="${webapp.home}/axis2/WEB-INF/services"/>
    <property name="build.home" value="build"/>
    <property name="build.classes" value="${build.home}/WEB-INF/classes"/>
    <property name="build.lib" value="lib"/>
    <property name="build.axis2.lib" value="lib/axis2"/>
    <property name="build.dragon.lib" value="lib/dragon"/>
    <property name="tomcat.loc" value="${catalina.home}/common/lib"/>
    <property name="axis2.loc" value="${webapp.home}/axis2/WEB-INF/lib"/>
    <property name="maven.repo" value="maven-repository"/>
    <available file="${axis2.loc}" property="axis2.local"/>
    <available file="${tomcat.loc}" property="tomcat.local"/>
    <target name="all" depends="clean, compile" description="Recompile all source"/>
    <target name="axis2LocalCopy" if="axis2.local">
        <copy todir="lib/axis2">
            <fileset dir="${axis2.loc}" includes="*.jar"/>
        </copy>
    </target>
    <target name="tomcatLocalCopy" if="tomcat.local">
        <copy todir="lib">
            <fileset dir="${tomcat.loc}" includes="servlet-api.jar"/>
        </copy>
    </target>
    <!-- parent directories automatically created -->
    <target name="prepare" depends="axis2LocalCopy, tomcatLocalCopy, jarRemoteCopy">
        <!-- a bit of a kludge -->
        <available file="lib/axis2/mail-1.4.jar" property="axis2.found"/>
        <fail unless="axis2.found" message="Ant scp is inherently insecure in that it either echoes the passphrase as it is being input, or requires the passphrase to be stored on the disk somewhere.  Please scp all jar's from CATALINA_HOME/webapps/axis2/WEB-INF/lib to lib/axis2 from a machine where Axis2 is installed."/>
        <copy todir="${build.classes}">
            <fileset dir="src" includes="**/*.hbm.xml"/>
            <fileset dir="conf/server" includes="*.cfg.xml, log4j.properties"/>
        </copy>
    </target>
    <target name="prepareDragon">
        <!-- copy dragon libs -->
        <copy todir="${build.lib}">
            <fileset dir="${build.dragon.lib}" includes="*.jar"/>
        </copy>
    </target>
    <target name="initMaven">
        <path id="maven.classpath">
            <pathelement location="lib/maven-ant-tasks-2.0.7.jar"/>
        </path>
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
            <classpath refid="maven.classpath"/>
        </typedef>
        <artifact:localRepository id="local.repository" path="${maven.repo}" layout="default"/>
        <artifact:remoteRepository id="remote.repository.i2" url="http://hopibruw.internet2.edu/maven"/>
        <artifact:remoteRepository id="remote.repository.mvn" url="http://repo1.maven.org/maven2"/>
    </target>
    <target name="jarRemoteCopy" depends="initMaven">
        <artifact:dependencies>
            <dependency groupId="mysql" artifactId="mysql-connector-java" version="3.1.13"/>
            <localRepository refid="local.repository"/>
            <remoteRepository refid="remote.repository.mvn"/>
        </artifact:dependencies>
        <copy file="${maven.repo}/mysql/mysql-connector-java/3.1.13/mysql-connector-java-3.1.13.jar" todir="${build.lib}"/>
    </target>
    <!-- Using Axis2, generates code in net.es.oscars.oscars and
net.es.oscars.wsdlTypes.  Also, OSCARS.wsdl is copied into resources,
a services.xml file generated in resources, and a build.xml generated in the
output directory.

Currently all auto-generated code is checked into Subversion as reference
material.

Adding a -t switch generates a Junit test in test/ne/es/oscars/service
Adding a -sd switch generates resources/services.xml -->
    <target name="wsdl2java" depends="prepare, genWsdl.check" if="genWsdl">
        <delete failonerror="true">
            <fileset dir="src/net/es/oscars/wsdlTypes" includes="*"/>
            <fileset dir="src/org" includes="**/*"/>
        </delete>
        <delete failonerror="false">
            <fileset dir="resources" includes="services.xml"/>
        </delete>
        <java classname="org.apache.axis2.wsdl.WSDL2Java" fork="true">
            <jvmarg value="-Daxis2.jalopy=false"/>
            <classpath>
                <fileset dir="${build.lib}" includes="*.jar"/>
                <fileset dir="${build.axis2.lib}" includes="*.jar"/>
            </classpath>
            <arg value="-uri"/>
            <arg file="conf/server/OSCARS.wsdl"/>
            <arg value="--server-side"/>
            <arg value="--serverside-interface"/>
            <arg value="--sync"/>
            <arg value="--service-description"/>
            <arg value="--generate-all"/>
            <arg value="-d"/>
            <arg value="adb"/>
            <arg value="-package"/>
            <arg value="net.es.oscars.oscars"/>
            <arg value="--namespace2package"/>
            <arg value="http://oscars.es.net/OSCARS=net.es.oscars.wsdlTypes"/>
        </java>
        <echo>
  ***
  **** Changes to resources/services.xml must be merged with
  **** conf/server/services.xml
  ****
        </echo>
    </target>
    <!-- Determine whether wsdl2java needs to be run because classes have not
been generated yet. -->
    <fileset dir="src/net/es/oscars/wsdlTypes" id="wsdlTypes"/>
    <target name="wsdlType.check">
        <pathconvert refid="wsdlTypes" property="wsdlTypes.notempty" setonempty="false"/>
    </target>
    <fileset dir="src/org" id="org"/>
    <target name="org.check">
        <pathconvert refid="org" property="org.notempty" setonempty="false"/>
    </target>
    <!-- Determine whether WSDL or XSD files have changed -->
    <target name="schema.check">
        <!-- Couldn't get to work except with single file.  This one should
       always be present and have the same timestamp as the others. -->
        <uptodate property="schema.current" targetfile="src/net/es/oscars/wsdlTypes/EmptyArg.java">
            <srcfiles dir="conf/server" includes="*.wsdl, *.xsd"/>
        </uptodate>
    </target>
    <!-- combine the two previous results -->
    <target name="genWsdl.check" depends="schema.check, wsdlType.check, org.check">
        <condition property="genWsdl">
            <or>
                <not>
                    <isset property="wsdlTypes.notempty"/>
                </not>
                <not>
                    <isset property="org.notempty"/>
                </not>
                <not>
                    <isset property="schema.current"/>
                </not>
            </or>
        </condition>
    </target>
    <!-- Compile everything except tests.  Various targets use portions they
need. Will need to separate if someone wants only WBUI and not Axis2 -->
    <!-- Added the debug flags to give us line numbers in stack traces -mrt -->
    <target name="compile" depends="prepare, wsdl2java" description="Compile Java sources">
        <javac srcdir="src" includes="**/*.java" destdir="${build.classes}" debug="true" debuglevel="lines,vars,source">
            <compilerarg value="-Xlint:deprecation"/>
            <classpath>
                <fileset dir="${build.lib}" includes="*.jar"/>
                <fileset dir="${build.axis2.lib}" includes="*.jar"/>
                <fileset dir="${build.dragon.lib}" includes="*.jar"/>
            </classpath>
        </javac>
    </target>
    <!-- **** Document targets -->
    <!-- generate and copy the api docs files -->
    <available property="apiDocs.present" file="docs/api"/>
    <target name="populateApiDocs" unless="apiDocs.present">
        <antcall target="docs"/>
    </target>
    <!-- generate and copy the client api docs files -->
    <available property="clientDocs.present" file="docs/client-api"/>
    <target name="populateClientDocs" unless="clientDocs.present">
        <antcall target="clientdocs"/>
    </target>
    <target name="docs">
        <mkdir dir="docs/api"/>
        <javadoc destdir="docs/api" author="true">
            <packageset dir="src" includes="**/*"/>
            <classpath>
                <fileset dir="${build.lib}" includes="*.jar"/>
                <fileset dir="${build.axis2.lib}" includes="*.jar"/>
            </classpath>
        </javadoc>
    </target>
    <target name="clientdocs">
        <mkdir dir="docs/client-api"/>
        <javadoc destdir="docs/client-api" author="true">
            <packageset dir="src" includes="net/es/oscars/client, net/es/oscars/client/**/*, net/es/oscars/wsdlTypes, org/**/*"/>
            <fileset dir="src" includes="net/es/oscars/PropHandler.java, net/es/oscars/oscars/OSCARSStub.java, net/es/oscars/oscars/AAAFaultMessage.java, net/es/oscars/oscars/BSSFaultMessage.java"/>
            <classpath>
                <fileset dir="${build.lib}" includes="*.jar"/>
                <fileset dir="${build.axis2.lib}" includes="*.jar"/>
            </classpath>
        </javadoc>
    </target>
    <target name="copydocs" description="copy documentation for use in warfile" depends="populateApiDocs, populateClientDocs">
        <mkdir dir="web/docs"/>
        <copy todir="web/docs">
            <fileset dir="docs" excludes="papers/*,notes, notes/*, web, web/**/*"/>
            <fileset dir="conf/server" includes="OSCARS.*"/>
        </copy>
        <copy todir="web/docs">
            <fileset dir="docs/web" includes="*.html, images/*, styleSheets/*.css"/>
        </copy>
        <copy todir="web/docs/papers">
            <fileset dir="docs/papers" includes="*.pdf"/>
        </copy>
    </target>
    <target name="clean" description="Empty build's classes and libs directories">
        <delete>
            <fileset dir="${build.classes}" includes="**/*"/>
        </delete>
        <delete dir="${test.classes}"/>
    </target>
    <target name="docs.clean" description="Delete web/docs directory and the generated api docs">
        <delete dir="web/docs"/>
        <delete dir="dojoWeb/docs"/>
        <delete dir="docs/api"/>
        <delete dir="docs/client-api"/>
    </target>
    <!-- OSCARS.aar file, gets copied into container-specific location.  For
Tomcat, this is webapps/axis2/WEB-INF/services -->
    <target name="aar" description="Create OSCARS.aar file" depends="compile">
        <jar destfile="build/OSCARS.aar">
            <fileset dir="${build.classes}" includes="**/*" excludes="**/servlets/**/*"/>
            <fileset dir="${build.lib}/.." includes="lib/*.jar"/>
            <metainf dir="conf/server" includes="*.wsdl, *.xsd, services.xml"/>
        </jar>
    </target>
    <!-- Client API section -->
    <target name="clientapi" description="Create jar with client API classes" depends="compile">
        <jar destfile="build/OSCARS-client-api.jar">
            <fileset dir="${build.classes}" includes="net/es/oscars/client/**/*, net/es/oscars/wsdlTypes/*, net/es/oscars/PropHandler.class, net/es/oscars/oscars/OSCARSStub.class, net/es/oscars/oscars/AAAFaultMessage.class, net/es/oscars/oscars/BSSFaultMessage.class, org/**/*"/>
            <metainf dir="conf/server" includes="*.wsdl, *.xsd, services.xml"/>
        </jar>
    </target>
    <target name="clientapipack" description="Create zip with jars, docs, and examples for client" depends="clientapi, clientdocs">
        <available file="${build.home}/OSCARS-client-examples.jar" property="examples.found"/>
        <fail unless="examples.found" message="Cannot find OSCARS-client-examples.jar. Please run 'ant jar' in the examples/javaClients directory."/>
        <zip destfile="build/OSCARS-client-api.zip">
            <zipfileset dir="${build.home}" includes="OSCARS-client-api.jar" prefix="OSCARS-client-api"/>
            <zipfileset dir="docs/client-api" includes="**/*" prefix="OSCARS-client-api/docs"/>
            <zipfileset dir="${build.home}" includes="OSCARS-client-examples.jar" prefix="OSCARS-client-api/examples"/>
            <zipfileset dir="examples/javaClients" includes="reservation.properties, run.sh" prefix="OSCARS-client-api/examples"/>
            <zipfileset dir="examples/javaClients" includes="*.java" excludes="InitiateTopologyPullClient.java" prefix="OSCARS-client-api/examples/src"/>
            <zipfileset dir="conf/examples/client" includes="*.*" prefix="OSCARS-client-api/examples/repo"/>
            <zipfileset dir="conf" includes="rampart-1.3.mar" prefix="OSCARS-client-api/examples/repo/modules"/>
        </zip>
    </target>
    <!-- WBUI section ***************************************************** -->
    <target name="wbui" description="Build war file for deploy" depends="compile, copydocs">
        <war destfile="OSCARS.war" webxml="web/WEB-INF/web.xml">
            <fileset dir="web" includes="**/*" excludes="WEB-INF/web.xml"/>
            <classes dir="${build.classes}" includes="**/*" excludes="**/oscars/OSCARSSk*.class, **/oscars/OSCARSM*.class,                            **/oscars/ReservationAdapter.class"/>
            <lib dir="lib" includes="*.jar"/>
        </war>
    </target>
    <!-- dojo dev section ************************************************** -->
    <property name="dojo" value="/usr/local/src/dojo"/>
    <available property="dojo.present" file="dojoWeb/lib/dojo"/>
    <target name="copydojo" unless="dojo.present" description="copy necessary Dojo material from /usr/local/src">
        <copy todir="dojoWeb/lib/dojo">
            <fileset dir="${dojo}" includes="dojo/**/*, dijit/**/*, dojox/**/*, util/**/*"/>
        </copy>
    </target>
    <target name="copydojodocs" description="copy documentation for use in warfile" depends="populateApiDocs, populateClientDocs">
        <mkdir dir="dojoWeb/docs"/>
        <copy todir="dojoWeb/docs">
            <fileset dir="docs" excludes="papers/*,notes, notes/*, web, web/**/*"/>
            <fileset dir="conf/server" includes="OSCARS.*"/>
        </copy>
        <copy todir="dojoWeb/docs">
            <fileset dir="docs/web" includes="*.html, images/*, styleSheets/*.css"/>
        </copy>
        <copy todir="dojoWeb/docs/papers">
            <fileset dir="docs/papers" includes="*.pdf"/>
        </copy>
    </target>
    <target name="dojo" description="Build war file, dojo version, for deploy" depends="compile, copydojo, copydojodocs">
        <war destfile="OSCARSDojo.war" webxml="dojoWeb/WEB-INF/web.xml">
            <fileset dir="dojoWeb" includes="**/*" excludes="WEB-INF/web.xml"/>
            <classes dir="${build.classes}" includes="**/*" excludes="**/oscars/OSCARSSk*.class, **/oscars/OSCARSM*.class,                            **/oscars/ReservationAdapter.class"/>
            <lib dir="lib" includes="*.jar"/>
        </war>
    </target>
    <!-- deployment section  *********************************************** -->
    <!-- Note that this requires that Axis2 has already been deployed. -->
    <target name="deploylibs" description="copy all libraries used by the aar and war to shared/lib">
        <copy todir="${catalina.home}/shared/lib">
            <fileset dir="${webapp.home}/axis2/WEB-INF/lib" includes="*.jar"/>
        </copy>
    </target>
	<target name="copydomain"  if="domain.exists">
	    <!-- Copy domain keys to repo -->
		<mkdir dir="${catalina.home}/shared/classes/repo"/>
	    <copy todir="${catalina.home}/shared/classes/repo" >
	        <fileset dir="${domain.home}/client" includes="axis2.xml, ssl-keystore.jks"  />
	    	<fileset dir="${domain.home}/server" includes="sec-client.*"/>
	    </copy>
	    <copy todir="${catalina.home}/shared/classes/server">
	        <fileset dir="${domain.home}/server/" includes="*key, oscars.properties, test.properties"/>
	     </copy>
	</target>
	<target name="copydefaults"  unless="domain.exists">
		<!-- Copy default keys to repo -->
		<mkdir dir="${catalina.home}/shared/classes/repo"/>
		<copy todir="${catalina.home}/shared/classes/repo" >
		    <fileset dir="${defaultKeys}/client" includes="axis2.xml, ssl-keystore.jks"  />
			<fileset dir="${defaultKeys}/server" includes="sec-client.*"/>
		</copy>
	    <copy todir="${catalina.home}/shared/classes/server">
	        <fileset dir="${defaultKeys}/server/" includes="*key, oscars.properties, test.properties"/>
	     </copy>
	</target>	
    <target name="setupServer" description="populate the shared/classes directory" 
    	          depends="copydomain,copydefaults">
        <mkdir dir="${catalina.home}/shared/classes/server"/>
        <mkdir dir="${catalina.home}/shared/classes/repo/modules"/>
        <copy file="conf/rampart-1.3.mar" todir="${catalina.home}/shared/classes/repo/modules"/>
        <copy file="conf/server/axis2.log4j.properties" tofile="${catalina.home}/shared/classes/log4j.properties"/>
        <copy todir="${catalina.home}/shared/classes/server">
            <fileset dir="conf/server/" includes="cisco*.xml, juniper*.xml, *perfSONAR* "/>
        </copy>
        <chmod dir="${catalina.home}/shared/classes/server" perm="600" includes="*key, oscars.properties"/>
    </target>
    <target name="deployaar" description="copy OSCARS.aar to axis2 services directory" depends="aar, setupServer, deploylibs">
        <copy file="${build.home}/OSCARS.aar" todir="${webservice.home}"/>
        <!-- not sure the next line is necessary as I  just corrected WEB_INF to WEB-INF  mrt -->
        <copy file="${build.classes}/net/es/oscars/client/security/PWCallback.class" todir="${catalina.home}/webapps/axis2/WEB-INF/classes/net/es/oscars/client/security/"/>
        <!-- these jars need to be in shared/lib to avoid classNotFound
         errors ... mrt/3/27 -->
        <copy todir="${webapp.home}/../shared/lib">
            <fileset dir="lib" includes="wss4j-1.5.3.jar,xmlsec-1.4.0.jar,xalan-2.7.0.jar"/>
        </copy>
    </target>
    <target name="deploywbui" description="copy OSCARS.war to webapp directory" depends="wbui, setupServer, deploylibs">
        <copy file="OSCARS.war" todir="${webapp.home}"/>
    </target>
    <target name="deploydojo" description="copy OSCARSDojo.war to webapp directory" depends="dojo, setupServer, deploylibs">
        <copy file="OSCARSDojo.war" todir="${webapp.home}"/>
    </target>
    <target name="deployall" description="deploy both aar and war files" depends="deployaar, deploywbui"/>
    <!-- TestNG test section *********************************************** -->
    <property name="test.classes" value="build/test"/>
    <path id="test.compile.path">
        <fileset dir="${build.lib}" includes="*.jar"/>
        <fileset dir="${build.axis2.lib}" includes="*.jar" excludes="rampart-core-1.3.jar"/>
        <fileset dir="${build.dragon.lib}" includes="*.jar"/>
        <pathelement location="${build.classes}"/>
    </path>
    <path id="test.path">
        <path refid="test.compile.path"/>
        <pathelement location="${test.classes}"/>
    </path>
    <target name="test.clean" description="Delete test server build directory">
        <delete dir="${test.classes}"/>
    </target>
    <!-- delays until the jar's in its path are actually in the right place -->
    <target name="startupTestNG" depends="prepare">
        <taskdef name="testng" classpathref="test.path" classname="org.testng.TestNGAntTask"/>
    </target>
    <target name="test.prepare">
        <mkdir dir="${test.classes}"/>
    </target>
    <target name="test.compile" depends="compile, test.prepare" description="Compile all test cases">
        <javac srcdir="test" destdir="${test.classes}" debug="true" debuglevel="lines,vars,source" classpathref="test.compile.path"/>
    </target>
    <!-- run a particular packages tests if t is set.  overriden by idc -->
    <target name="testpkg" if="t" unless="idc" depends="startupTestNG">
        <property name="groups" value="${t}, initdb"/>
        <property name="testsuite" value="${t}.suite"/>
    </target>
    <!-- following section provides for testiing all packages for a domain -->
    <target name="ESnet.check" if="idc">
        <condition property="ESnet.set">
            <equals arg1="${idc}" arg2="ESnet"/>
        </condition>
    </target>
    <target name="testESnet" depends="startupTestNG, ESnet.check" if="ESnet.set">
        <property name="groups" value="aaa, bss, bss.topology, pathfinder, pathfinder.traceroute, pathfinder.overlay, pss, pss.jnx, pss.cisco, initdb"/>
        <property name="testsuite" value="ESnet.suite"/>
    </target>
    <!-- following section provides for testiing all packages for a domain -->
    <target name="I2.check" if="idc">
        <condition property="I2.set">
            <equals arg1="${idc}" arg2="I2"/>
        </condition>
    </target>
    <target name="testI2" depends="startupTestNG, I2.check" if="I2.set">
        <property name="groups" value="aaa, bss, bss.topology, pathfinder, pathfinder.dragon, tss, pss, pss.dragon, initdb "/>
        <property name="testsuite" value="I2.suite"/>
    </target>
    <target name="test" depends="test.compile, testpkg, testESnet, testI2">
        <testng classpathref="test.path" groups="${groups}" suitename="${testsuite}" outputDir="${webapp.home}/OSCARS/test" haltOnFailure="true" verbose="2" parallel="methods" threadCount="8">
            <jvmarg value="-Djava.net.preferIPv4Stack=true"/>
            <jvmarg value="-Dcatalina.home=${catalina.home}"/>
            <classfileset dir="${test.classes}" includes="**/*.class"/>
        </testng>
    </target>
    <!-- DRAGON specific targets -->
    <target name="terceRemoteCopy" depends="initMaven">
        <artifact:dependencies>
            <dependency groupId="terce" artifactId="terce-ws" version="0.1" type="aar"/>
            <dependency groupId="terce" artifactId="static-terce-config" version="0.2" type="tar"/>
            <localRepository refid="local.repository"/>
            <remoteRepository refid="remote.repository.i2"/>
        </artifact:dependencies>
        <copy file="${maven.repo}/terce/terce-ws/0.2/terce-ws-0.2.aar" todir="${catalina.home}/webapps/axis2/WEB-INF/services"/>
        <untar src="${maven.repo}/terce/static-terce-config/0.2/static-terce-config-0.2.tar" dest="${catalina.home}/shared/classes" overwrite="false"/>
    </target>
    <target name="initdragon" depends="terceRemoteCopy">
        <!-- copy oscars.properties -->
        <copy todir="${catalina.home}/shared/classes/server">
            <fileset dir="conf/examples-dragon/server" includes="oscars.properties"/>
        </copy>
    </target>
    <target name="dragon" depends="prepareDragon,prepare,compile,aar"/>
    <target name="deploydragon" depends="dragon,deployaar"/>
</project>
