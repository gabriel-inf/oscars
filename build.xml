<?xml version="1.0" encoding="UTF-8"?>
<!-- Main build file -->
<project xmlns:artifact="urn:maven-artifact-ant" name="OSCARS" default="all">
    <!-- properties section for main targets ******************************** -->
    <property environment="env"/>
    <available property="domain.exists" file="${env.DOMAIN_HOME}"/>
    <property name="domain.home" value="${env.DOMAIN_HOME}"/>
    <property name="defaultKeys" location="conf/axis-tomcat"/>
    <property name="oscars.home" value="${env.OSCARS_HOME}"/>
    <property name="catalina.home" value="${env.CATALINA_HOME}"/>
    <property name="app.name" value="oscars"/>
    <property name="app.version" value="0.5-dev"/>
    <property name="app.uid" value="50"/>
    <property name="webapp.home" value="${catalina.home}/webapps"/>
    <property name="webservice.home" value="${webapp.home}/axis2/WEB-INF/services"/>
    <property name="build.home" value="build"/>
    <property name="build.classes" value="${build.home}/WEB-INF/classes"/>
    <property name="build.lib" value="lib"/>
    <property name="build.lib.endorsed" value="lib/endorsed"/>
    <property name="build.axis2.lib" value="lib/axis2"/>
    <property name="tomcat.loc" value="${catalina.home}/common/lib"/>
    <property name="axis2.home" value="${webapp.home}/axis2"/>
    <property name="axis2.loc.webapp" value="${webapp.home}/axis2/WEB-INF/lib"/>
    <property name="axis2.loc.dists" value="dists/axis2-1.4.1/lib"/>
    <property name="axis2.repo" value="${catalina.home}/shared/classes/repo"/>
    <property name="rampart.loc.dists" value="dists/rampart-SNAPSHOT/lib"/>
    <property name="maven.repo" value="maven-repository"/>
    <available file="${axis2.loc.webapp}" property="axis2.local.webapp"/>
    <available file="${tomcat.loc}" property="tomcat.local"/>
    <available file="${oscars.home}" type="dir" property="oscars.home.set" />
    <available file="${catalina.home}" type="dir" property="catalina.home.set" />
    
    <target name="all" depends="clean, build-all" description="Recompile all source, build all artifacts"/>
    
    <!-- Compile everything except tests.  Various targets use portions they
         need. Will need to separate if someone wants only WBUI and not Axis2 -->
    <!-- Added the debug flags to give us line numbers in stack traces -mrt -->
    <target name="compile" depends="prepare, notifywsdl2java" description="Compile Java sources">
        <javac srcdir="src" includes="**/*.java" destdir="${build.classes}" debug="true" debuglevel="lines,vars,source">
            <compilerarg value="-Xlint:deprecation"/>
            <classpath>
                <fileset dir="${build.lib}" includes="*.jar"/>
                <fileset dir="${build.lib.endorsed}" includes="*.jar"/>
                <fileset dir="${build.axis2.lib}" includes="*.jar"/>
            </classpath>
        </javac>
    </target>

    <!-- build all the artifacts -->
    <target name="build-all" depends="oscars-core,aaa-core,notifybroker-core,oscars-aar,oscars-war,notify-aar"/>
        
    <!-- Compile the main application .jar file -->
    <target name="oscars-core" description="Main OSCARS jar file" depends="compile">

        <!-- Copy over the specific log4j.properties file -->
        <mkdir dir="${build.home}/oscars-core/" />
        <copy file="conf/logging/oscars-core.log4j.properties" tofile="${build.home}/oscars-core/log4j.properties"/>

        <jar destfile="build/oscars-core.jar">
            <!--  might not  need classes/aaa, don't think **/WEB-INF exists -->
            <fileset dir="${build.classes}" includes="**/*.class, **/*.hbm.xml" excludes="**/servlets/**/*, **/WEB-INF/**/*"/>
            <!-- can't be easily used
            <fileset dir="${build.lib}/.." includes="lib/*.jar"/>
            <fileset dir="${build.lib}/.." includes="lib/axis2/*.jar"/>
            -->
            <fileset dir="conf/db" includes="c3p0.properties, bss.cfg.xml, aaa.cfg.xml"/>
            <fileset dir="conf/properties" includes="oscars.properties"/>
            <fileset dir="conf/pss" includes="*.xml"/>
            <fileset dir="${build.home}/oscars-core/" includes="log4j.properties"/>
        </jar>
        <!-- <delete dir="${build.home}/oscars-core" /> -->
    </target>

    <!-- Compile the AAA .jar file -->
    <target name="aaa-core" description="AAA core jar file" depends="compile">

        <!-- Copy over the specific log4j.properties file -->
        <mkdir dir="${build.home}/aaa-core/" />
        <copy file="conf/logging/aaa-core.log4j.properties" tofile="${build.home}/aaa-core/log4j.properties"/>

        <jar destfile="build/aaa-core.jar">
            <!-- no WEB-INF dir -->
            <fileset dir="${build.classes}"
                includes="**/*.class, **/*.hbm.xml" excludes="**/servlets/*, WEB-INF/**/*"/>
            <fileset dir="conf/db" includes="c3p0.properties, aaa.cfg.xml"/>
            <fileset dir="conf/properties" includes="oscars.properties"/>
            <fileset dir="${build.home}/aaa-core/" includes="log4j.properties"/>
        </jar>
        <!-- <delete dir="${build.home}/aaa-core/" /> -->
    </target>

	 <!-- Compile the NotificationBroker application .jar file -->
    <target name="notifybroker-core" description="NotificationBroker core" depends="compile">

        <!-- Copy over the specific log4j.properties file -->
        <mkdir dir="${build.home}/notifybroker-core/" />
        <copy file="conf/logging/notifybroker-core.log4j.properties" tofile="${build.home}/notifybroker-core/log4j.properties"/>

        <jar destfile="build/notifybroker-core.jar">
            <fileset dir="${build.classes}" includes="**/notifybroker/**/*, **/net/es/oscars/*,**/oscars/database/**/*,**/rmi/*,**/rmi/notifybroker/**/*,**/rmi/aaa/**/*, **/oscars/wsdlTypes/*,**/oscars/aaa/AuthValue*,**/oscars/aaa/AuthMultiValue*,**/oscars/ws/AAAFaultMessage*,**/oscars/client/security/KeyManagement*"/>
            <fileset dir="conf/db" includes="c3p0.properties, notify.cfg.xml"/>
            <fileset dir="${build.home}/notifybroker-core/" includes="log4j.properties"/>
        </jar>
    </target>
	
    <!-- Compile the RMI jar file included in the WAR and AAR -->
    <target name="rmijar" description="Create jar with RMI classes" depends="compile">
        <jar destfile="${build.home}/oscars-rmi.jar">
             <fileset dir="${build.classes}"
                 includes="**/oscars/rmi/**/*.class, **/oscars/rmi/*.class,
                           **/org/oasis_open/docs/wsn/b_2/Notify.class,
                           org/w3/www/_2005/_08/addressing/EndpointReferenceType.class" />
        </jar>
    </target>

    <!-- Compile the WAR web application file to be deployed inside an servlet container -->
    <target name="oscars-war" description="Build war file for deploy" depends="compile, installnewdojo, copydocs, rmijar">

        <!-- Copy over the specific log4j.properties file -->
        <mkdir dir="${build.home}/oscars-war/WEB-INF/classes" />
        <copy file="conf/logging/oscars-war.log4j.properties" tofile="${build.home}/oscars-war/WEB-INF/classes/log4j.properties"/>

        <!-- First copy over only the necessary .jar files into a temporary directory
             This is needed because we're not allowed more than one lib dir
             during .war creation -->
        <mkdir dir="${build.home}/oscars-war/lib" />
        <copy todir="${build.home}/oscars-war/lib" flatten="true">
            <fileset dir="lib"
                includes="hibernate*.jar, cglib*.jar, json-lib-*.jar, ezmorph-*.jar, commons-lang-*.jar,
                          commons-collections-*.jar, commons-beanutils.jar, axis2/log4j-1.2.*.jar  "/>
            <fileset dir="build" includes="oscars-rmi.jar" />
        </copy>

        <war destfile="build/OSCARS.war" webxml="web/WEB-INF/web.xml">
            <fileset dir="web" includes="**/*" excludes="WEB-INF/web.xml, **/*.tar" />
            <classes dir="${build.classes}"
                includes="**/oscars/*.class, **/oscars/database/HibernateBean.class,
                          **/oscars/bss/*.class, **/oscars/bss/topology/*.class,
                          **/oscars/aaa/*.class, **/oscars/servlets/**/*.class,
                          **/oscars/wsdlTypes/GetTopology*.class, 
                          **/oscars/bss/events/OSCARSEvent*.class, *.properties"

                excludes="**/oscars/aaa/*DAO.class, **/oscars/aaa/*Manager.class,
                          **/oscars/bss/*DAO.class, **/oscars/bss/*Manager.class,
                          **/oscars/bss/topology/*DAO.class, **/oscars/bss/topology/*Manager.class"/>


            <lib dir="${build.home}/oscars-war/lib" includes="*.jar"/>
            <fileset dir="${build.home}/oscars-war/" includes="WEB-INF/classes/log4j.properties" />
        </war>
        <!-- clear out temporary directory
        <delete dir="${build.home}/oscars-war/" /> -->
    </target>

    <!-- Compile the AAR Axis2 web service. This is deployed in a container-specific directory.
         For Tomcat, this is webapps/axis2/WEB-INF/services -->
    <target name="oscars-aar" description="Create OSCARS.aar file" depends="compile, rmijar">

        <!-- Create a temporary directory for the AAR structure -->
        <mkdir dir="${build.home}/oscars-aar/" />

        <!-- Copy necessary libraries there -->
        <copy todir="${build.home}/oscars-aar/lib" flatten="true">
            <fileset dir="lib" includes="hibernate*.jar, cglib*.jar, commons-lang*.jar, ezmorph-*.jar, axis2/log4j-1.2.*.jar  "/>
            <fileset dir="build" includes="oscars-rmi.jar" />
        </copy>

        <!-- Copy the schema & WSDL files  -->
        <copy todir="${build.home}/oscars-aar/META-INF" flatten="true">
            <fileset dir="conf/schema" includes="*.xsd, OSCARS.wsdl"/>
        </copy>

        <!-- Copy over the OSCARS AAR-specific services.xml file -->
        <copy file="conf/axis-tomcat/oscars-services.xml" tofile="${build.home}/oscars-aar/META-INF/services.xml"/>

        <!-- Copy over the OSCARS AAR-specific log4j.properties file -->
        <copy file="conf/logging/oscars-aar.log4j.properties" tofile="${build.home}/oscars-aar/log4j.properties"/>

        <jar destfile="build/OSCARS.aar">
            <!-- These are just the necessary OSCARS classes -->
            <fileset dir="${build.classes}"

                includes="**/oscars/*.class, **/ws/*.class, **/oscars/wsdlTypes/*.class,
                          **/oscars/aaa/*.class, **/oscars/bss/*.class, **/oscars/bss/topology/*.class
                          **/oscars/database/HibernateBean.class, **/org/**/*.class,
                          **/oscars/bss/events/OSCARSEvent*.class,"

                excludes="**/oscars/aaa/*DAO.class, **/oscars/aaa/*Manager*.class,
                          **/oscars/bss/*DAO.class, **/oscars/bss/*Manager*.class,
                          **/oscars/bss/topology/*DAO.class, **/oscars/bss/topology/*Manager.class"/>
            <!-- include all the temporary files -->
            <fileset dir="${build.home}/oscars-aar/"/>
        </jar>
        <!-- clear out temporary directory
        <delete dir="${build.home}/oscars-aar"/> -->
    </target>

    <target name="clean" description="Empty build's classes and temporary directories if they exist">
        <delete>
            <fileset dir="${build.home}" includes ="*.jar, *.aar, *.war"/>
        </delete>
        <delete>
            <fileset dir="${build.classes}" includes="**/*"/>
        </delete>
        <delete dir="${test.classes}"/>
        <delete dir="${build.home}/oscars-core"/>
        <delete dir="${build.home}/aaa-core"/>
    	<delete dir="${build.home}/notify-core"/>
        <delete dir="${build.home}/oscars-war"/>
        <delete dir="${build.home}/oscars-aar"/>
        <delete dir="${build.home}/notify-aar"/>
    </target>

    <!-- Prepares everything for compilation -->
    <target name="prepare" depends="initConfDir,axis2LocalCopy, tomcatLocalCopy, jarRemoteCopy">
        <!-- a bit of a kludge -->
        <available file="lib/axis2/mail-1.4.jar" property="axis2.found"/>
        <fail unless="axis2.found" message="Axis2 library not found. Please either build and deploy axis2.war with rampart support, or manually copy the necessary .jar files to lib/axis2. See documentation for details."/>
        <available file="lib/jta.jar" property="jta.found"/>
        <fail if="jta.found" message="jta.jar library must be removed from lib."/>
        <available file="lib/axis2/rampart-core-SNAPSHOT.jar" property="rampart.found"/>
        <fail unless="rampart.found" message="Rampart library not found. We recommend that you use conf/axis2/build.xml to rebuild the Axis2 webapp, then redeploy. See documentation for more."/>
        <copy todir="${build.classes}">
            <fileset dir="src" includes="**/*.hbm.xml"/>
        </copy>

        <copy file="conf/axis-tomcat/oscars-services.xml.template" tofile="conf/axis-tomcat/oscars-services.xml"/>
        <replace summary="true" file="conf/axis-tomcat/oscars-services.xml" token="**path_to_rampConfig**" value="${conf.axistomcat}"/>
        <copy file="conf/axis-tomcat/notify-services.xml.template" tofile="conf/axis-tomcat/notify-services.xml"/>
        <replace summary="true" file="conf/axis-tomcat/notify-services.xml" token="**path_to_rampConfig**" value="${conf.axistomcat}"/>
        <copy file="conf/axis-tomcat/axis2.xml.template" tofile="conf/axis-tomcat/axis2.xml"/> 
        <replace summary="true" file="conf/axis-tomcat/axis2.xml" token="**path_to_rampConfig**" value="${conf.axistomcat}"/>
        <!-- Put in the full path to rampConfig.xml in case OSCARS_HOME is set -->
        <replace summary="true" file="conf/axis-tomcat/rampConfig.xml.template" token="**path_to_repo**" value="${conf.axistomcat}"/>
        
        <!-- for lack of a better place, need bss.cfg.xml for tools -->
        <property name="tool.classes" value="build/tools"/>
        <copy todir="${tool.classes}">
            <fileset dir="conf/db" includes="c3p0.properties, aaa.cfg.xml, bss.cfg.xml, notify.cfg.xml"/>
        </copy>
    </target>
    
    <target name="initConfDir" depends="initOscarsHomeConf,initCatalinaHomeConf,initPwdConf" 
            description="Finds the directory where configuration files should be copied" />
            
    <target name="findConfigs">
        <condition property="use.oscars.home">
            <isset property="oscars.home.set"/>
        </condition>
        
        <condition property="use.catalina.home">
            <and>
                <not>
                    <isset property="oscars.home.set"/>
                </not>
                <isset property="catalina.home.set"/>
            </and>
        </condition>
        
        <condition property="use.pwd.conf">
            <and>
                <not>
                    <isset property="oscars.home.set"/>
                </not>
                <not>
                    <isset property="catalina.home.set"/>
                </not>
            </and>
        </condition>
    </target>
    
    <target name="initOscarsHomeConf" depends="findConfigs" if="use.oscars.home">
        <echo message="Using OSCARS_HOME" />
        <mkdir dir="${oscars.home}/conf"/>
        
        <property name="conf.axistomcat" value="${oscars.home}/conf/axis-tomcat/"/>
        <mkdir dir="${conf.axistomcat}"/>
        
        <property name="conf.mail_templates" value="${oscars.home}/conf/mail_templates/"/>
        <mkdir dir="${conf.mail_templates}"/>
        
        <property name="conf.notify" value="${oscars.home}/conf/notify/"/>
        <mkdir dir="${conf.notify}"/>
        
        <property name="conf.properties" value="${oscars.home}/conf/properties/"/>
        <mkdir dir="${conf.properties}"/>
        
        <property name="conf.pss" value="${oscars.home}/conf/pss/"/>
        <mkdir dir="${conf.pss}"/>
    </target>
    
    <target name="initCatalinaHomeConf" depends="findConfigs" if="use.catalina.home">
        <echo message="Using CATALINA_HOME" />
        <property name="conf.axistomcat" value="${axis2.repo}"/>
        <property name="conf.mail_templates" value="${catalina.home}/shared/classes/server/mail_templates"/>
        <property name="conf.notify" value="${catalina.home}/shared/classes/server/"/>
        <property name="conf.properties" value="${catalina.home}/shared/classes/server/"/>
        <property name="conf.pss" value="${catalina.home}/shared/classes/server/"/>
    </target>
    
    <target name="initPwdConf" depends="findConfigs" if="use.pwd.conf">
        <echo message="Using PWD" />
        <property name="conf.axistomcat" value="conf/axis-tomcat/"/>
        <property name="conf.mail_templates" value="conf/mail_templates/"/>
        <property name="conf.notify" value="conf/notify/"/>
        <property name="conf.properties" value="conf/properties/"/>
        <property name="conf.pss" value="conf/pss/"/>
    </target>
            
    <target name="axis2LocalCopy" depends="axis2LocalCopy.webapp,axis2LocalCopy.dists"/>
    
    <target name="axis2LocalCopy.webapp" if="axis2.local.webapp">
        <copy todir="lib/axis2" >
            <fileset dir="${axis2.loc.webapp}" includes="*.jar"/>
        </copy>
    </target>
    
    <target name="axis2LocalCopy.dists" unless="axis2.local.webapp">
        <copy todir="lib/axis2">
            <fileset dir="${axis2.loc.dists}" includes="*.jar"/>
            <fileset dir="${rampart.loc.dists}" includes="*.jar"/>
        </copy>
    </target>

    <target name="tomcatLocalCopy" if="tomcat.local">
        <copy todir="lib">
            <fileset dir="${tomcat.loc}" includes="servlet-api.jar"/>
        </copy>
    </target>

    <target name="initMaven">
        <path id="maven.classpath">
            <pathelement location="lib/maven-ant-tasks-2.0.7.jar"/>
        </path>
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
            <classpath refid="maven.classpath"/>
        </typedef>
        <artifact:localRepository id="local.repository" path="${maven.repo}" layout="default"/>
        <artifact:remoteRepository id="remote.repository.i2" url="http://hopibruw.internet2.edu/maven"/>
        <artifact:remoteRepository id="remote.repository.mvn" url="http://repo1.maven.org/maven2"/>
        <artifact:remoteRepository id="remote.repository.java" url="http://download.java.net/maven/1/" layout="legacy"/>
    </target>

    <target name="jarRemoteCopy" depends="initMaven">
        <artifact:dependencies>
            <dependency groupId="mysql" artifactId="mysql-connector-java" version="3.1.13"/>
            <localRepository refid="local.repository" layout="default"/>
            <remoteRepository refid="remote.repository.mvn"/>
        </artifact:dependencies>
        <copy file="${maven.repo}/mysql/mysql-connector-java/3.1.13/mysql-connector-java-3.1.13.jar" todir="${build.lib}"/>
        <artifact:dependencies>
            <dependency groupId="jboss" artifactId="javassist" version="3.4.ga"/>
            <localRepository refid="local.repository"/>
            <remoteRepository refid="remote.repository.mvn"/>
        </artifact:dependencies>
        <copy file="${maven.repo}/jboss/javassist/3.4.ga/javassist-3.4.ga.jar" todir="${build.lib}"/>
        <artifact:dependencies>
            <dependency groupId="javax.transaction" artifactId="transaction-api" version="1.1"/>
            <localRepository refid="local.repository"/>
            <remoteRepository refid="remote.repository.java"/>
        </artifact:dependencies>
        <copy file="${maven.repo}/javax/transaction/transaction-api/1.1/transaction-api-1.1.jar" todir="${build.lib}"/>
    </target>

    <!-- Using Axis2, generates code in net.es.oscars.ws and
        net.es.oscars.wsdlTypes.  Also, OSCARS.wsdl is copied into resources,
        a services.xml file generated in resources, and a build.xml generated in the
        output directory.

        Currently all auto-generated code is checked into Subversion as reference
        material.

        Adding a -t switch generates a Junit test in test/ne/es/oscars/service
        Adding a -sd switch generates resources/services.xml -->
    <target name="wsdl2java" depends="prepare, genWsdl.check" if="genWsdl">
        <delete failonerror="true">
            <fileset dir="src/net/es/oscars/wsdlTypes" includes="*"/>
            <fileset dir="src/org" includes="ogf/**/*"/>
        </delete>
        <delete failonerror="false">
            <fileset dir="resources" includes="services.xml"/>
        </delete>
        <java classname="org.apache.axis2.wsdl.WSDL2Java" fork="true">
            <jvmarg value="-Daxis2.jalopy=false"/>
            <classpath>
                <fileset dir="${build.lib}" includes="*.jar"/>
                <fileset dir="${build.axis2.lib}" includes="*.jar"/>
            </classpath>
            <arg value="--noBuildXML"/>
            <arg value="-uri"/>
            <arg file="conf/schema/OSCARS.wsdl"/>
            <arg value="--server-side"/>
            <arg value="--serverside-interface"/>
            <arg value="--sync"/>
            <arg value="--service-description"/>
            <arg value="--generate-all"/>
            <arg value="-d"/>
            <arg value="adb"/>
            <arg value="-package"/>
            <arg value="net.es.oscars.ws"/>
            <arg value="--namespace2package"/>
            <arg value="http://oscars.es.net/OSCARS=net.es.oscars.wsdlTypes,http://ogf.org/schema/network/topology/ctrlPlane/20080828/=org.ogf.schema.network.topology.ctrlplane"/>
        </java>
        <!-- stopgaps -->
        <replace dir="src/net/es/oscars/wsdlTypes"
            token="implements org.apache.axis2.databinding.ADBBean{"
            value="implements org.apache.axis2.databinding.ADBBean{${line.separator}            private static final long serialVersionUID=${app.uid}L;"
            includes="**/*.java"
        />
        <replace dir="src/org/ogf/schema/network/topology/ctrlplane"
            token="implements org.apache.axis2.databinding.ADBBean{"
            value="implements org.apache.axis2.databinding.ADBBean{${line.separator}            private static final long serialVersionUID=${app.uid}L;"
            includes="**/*.java"
        />
        <echo>
  ***
  **** Changes to resources/services.xml must be merged with
  **** conf/axis-tomcat/oscars-services.xml
  ****
        </echo>
    </target>

    <!-- WSDL types generation -->

    <!-- Determine whether wsdl2java needs to be run because classes
         have not been generated yet. -->
    <fileset dir="src/net/es/oscars/wsdlTypes" id="wsdlTypes"/>
    <target name="wsdlType.check">
        <pathconvert refid="wsdlTypes" property="wsdlTypes.notempty" setonempty="false"/>
    </target>

    <target name="org.check">
        <available file="src/org/ogf" property="org.avail"/>
    </target>

    <!-- Determine whether WSDL or XSD files have changed -->
    <target name="schema.check">
        <!-- Note: Couldn't get to work except with single file.  This one should
                always be present and have the same timestamp as the others. -->
        <uptodate property="schema.current" targetfile="src/net/es/oscars/wsdlTypes/EmptyArg.java">
            <srcfiles dir="conf/schema" includes="*.wsdl, *.xsd "/>
        </uptodate>
        <echo>Schema up to date: ${schema.current}</echo>
    </target>

    <!-- combine the two previous results -->
    <target name="genWsdl.check" depends="schema.check, wsdlType.check, org.check">
        <condition property="genWsdl">
            <or>
                <not>
                    <isset property="wsdlTypes.notempty"/>
                </not>
                <not>
                    <isset property="org.avail"/>
                </not>
                <not>
                    <isset property="schema.current"/>
                </not>
            </or>
        </condition>
    </target>

    <!-- **** Document targets -->
    <!-- generate and copy the api docs files -->
    <available property="apiDocs.present" file="docs/api"/>
    <target name="populateApiDocs" unless="apiDocs.present">
        <antcall target="docs"/>
    </target>

    <!-- generate and copy the client api docs files -->
    <available property="clientDocs.present" file="docs/client-api"/>
    <target name="populateClientDocs" unless="clientDocs.present">
        <antcall target="clientdocs"/>
    </target>

    <target name="docs">
        <mkdir dir="docs/api"/>
        <javadoc destdir="docs/api" author="true">
            <packageset dir="src" includes="**/*"/>
            <classpath>
                <fileset dir="${build.lib}" includes="*.jar"/>
                <fileset dir="${build.axis2.lib}" includes="*.jar"/>
            </classpath>
        </javadoc>
    </target>

    <target name="clientdocs">
        <mkdir dir="docs/client-api"/>
        <javadoc destdir="docs/client-api" author="true">
            <packageset dir="src" includes="net/es/oscars/client, net/es/oscars/client/**/*, net/es/oscars/wsdlTypes, org/**/*"/>
            <fileset dir="src" includes="net/es/oscars/PropHandler.java, net/es/oscars/ws/OSCARSStub.java, net/es/oscars/ws/AAAFaultMessage.java, net/es/oscars/ws/BSSFaultMessage.java"/>
            <classpath>
                <fileset dir="${build.lib}" includes="*.jar"/>
                <fileset dir="${build.axis2.lib}" includes="*.jar"/>
            </classpath>
        </javadoc>
    </target>

    <target name="docs.clean" description="Delete web/docs directory and the generated api docs">
        <delete dir="web/docs"/>
        <delete dir="docs/api"/>
        <delete dir="docs/client-api"/>
    </target>

<!-- FIXME: need to fix these two -->
    <!-- Client API section -->
    <target name="clientapi" description="Create jar with client API classes" depends="compile">
        <jar destfile="build/OSCARS-client-api.jar">
            <fileset dir="${build.classes}" includes="log4j.properties, net/es/oscars/client/**/*, net/es/oscars/lookup/PSLookupClient.class, net/es/oscars/lookup/LookupException.class, net/es/oscars/bss/topology/URNParser.class, net/es/oscars/bss/topology/GraphVizExporter.class, net/es/oscars/wsdlTypes/*, net/es/oscars/PropHandler.class, net/es/oscars/ws/OSCARSStub.class, net/es/oscars/ws/AAAFaultMessage.class, net/es/oscars/ws/BSSFaultMessage.class, net/es/oscars/notifybroker/ws/OSCARSNotifyStub.class, net/es/oscars/notifybroker/ws/*Fault*.class, org/**/*"/>
            <metainf dir="conf/axis-tomcat" includes="*.wsdl, *.xsd, services.xml"/>
        </jar>
    </target>

    <target name="clientapipack" description="Create zip with jars, docs, and examples for client" depends="clientapi, clientdocs">
        <available file="${build.home}/OSCARS-client-examples.jar" property="examples.found"/>
        <fail unless="examples.found" message="Cannot find OSCARS-client-examples.jar. Please run 'ant jar' in the examples/javaClients directory."/>
        <zip destfile="build/OSCARS-client-api.zip">
            <zipfileset dir="${build.home}" includes="OSCARS-client-api.jar" prefix="OSCARS-client-api"/>
            <zipfileset dir="docs/client-api" includes="**/*" prefix="OSCARS-client-api/docs"/>
            <zipfileset dir="${build.home}" includes="OSCARS-client-examples.jar" prefix="OSCARS-client-api/examples"/>
            <zipfileset dir="examples/javaClients" includes="example.l2.properties, example.l3.properties, run.sh" prefix="OSCARS-client-api/examples"/>
            <zipfileset dir="examples/javaClients" includes="*.java" excludes="InitiateTopologyPullClient.java" prefix="OSCARS-client-api/examples/src"/>
            <zipfileset dir="examples/javaClients/repo" includes="*.*" prefix="OSCARS-client-api/examples/repo"/>
            <zipfileset dir="lib" includes="jdom*, perfsonar*.jar" prefix="OSCARS-client-api/lib"/>
            <zipfileset dir="conf" includes="rampart-SNAPSHOT.mar" prefix="OSCARS-client-api/examples/repo/modules"/>
        </zip>
    </target>

    <!-- Dojo WBUI section ************************************************* -->
    <property name="dojo" value="/usr/local/src/dojo"/>
    <available property="dojo.installed" file="web/lib/dojo"/>
    <target name="installdojo" unless="dojo.installed" description="unzip and untar Dojo material if necessary">
        <!-- <gunzip src="web/lib/dojo-standard-1.2.3.tar.gz"/> -->
        <untar src="web/lib/dojo-standard-1.2.3.tar" dest="web/lib"/>
        <!-- <delete file="web/lib/dojo-standard-1.2.3.tar"/> -->
    </target>
    <available property="new.dojo.installed" file="web/lib/dojo/dojox/grid/DataGrid.js"/>
    <target name="installnewdojo" unless="new.dojo.installed" description="install new Dojo if necessary" depends="installdojo">
        <delete dir="web/lib/dojo"/>
        <untar src="web/lib/dojo-standard-1.2.3.tar" dest="web/lib"/>
    </target>

    <target name="copydocs" description="copy documentation for use in warfile" depends="populateApiDocs, populateClientDocs">
        <mkdir dir="web/docs"/>
        <copy todir="web/docs">
            <fileset dir="docs" excludes="papers/*,notes, notes/*, web, web/**/*"/>
            <fileset dir="conf/schema" includes="OSCARS.*, nmtopo-ctlp.xsd"/>
        </copy>
        <copy file="do_build.sh" tofile="web/docs/do_build.sh.txt"/>
        <copy todir="web/docs">
            <fileset dir="docs/web" includes="*.html, *.jpg, images/*, styleSheets/*.css"/>
        </copy>
        <copy todir="web/docs/papers">
            <fileset dir="docs/papers" includes="*.pdf"/>
        </copy>
    </target>

    <!-- Notification interface targets -->
    <target name="genAllWsdl.check" depends="genWsdl.check">
        <available file="src/org/oasis_open" property="wsn.avail"/>
        <available file="src/org/w3" property="w3.avail"/>
        <uptodate property="notifyschema.current" targetfile="src/org/w3/www/_2005/_08/addressing/Action.java">
            <srcfiles dir="conf/schema" includes="*.xsd, *.wsdl"/>
        </uptodate>
        <condition property="genAllWsdl">
            <or>
                <isset property="genWsdl"/>
                <not>
                    <isset property="wsn.avail"/>
                </not>
                <not>
                    <isset property="w3.avail"/>
                </not>
                <not>
                    <isset property="notifyschema.current"/>
                </not>
            </or>
        </condition>
    </target>

    <target name="notifywsdl2java" depends="prepare, genAllWsdl.check" if="genAllWsdl">
        <delete failonerror="true">
            <fileset dir="src/net/es/oscars/wsdlTypes" includes="*"/>
            <fileset dir="src/org" includes="**/*"/>
        </delete>
        <delete failonerror="false">
            <fileset dir="resources" includes="services.xml"/>
        </delete>
        <java classname="org.apache.axis2.wsdl.WSDL2Java" fork="true">
            <jvmarg value="-Daxis2.jalopy=false"/>
            <classpath>
                <fileset dir="${build.lib}" includes="*.jar"/>
                <fileset dir="${build.axis2.lib}" includes="*.jar"/>
            </classpath>
            <arg value="-uri"/>
            <arg file="conf/schema/OSCARS-Notify.wsdl"/>
            <arg value="--noBuildXML"/>
            <arg value="--server-side"/>
            <arg value="--serverside-interface"/>
            <arg value="--sync"/>
            <arg value="--service-description"/>
            <arg value="--generate-all"/>
            <arg value="-d"/>
            <arg value="adb"/>
            <arg value="-package"/>
            <arg value="net.es.oscars.notifybroker.ws"/>
            <arg value="--namespace2package"/>
            <arg value="http://oscars.es.net/OSCARS=net.es.oscars.wsdlTypes,http://ogf.org/schema/network/topology/ctrlPlane/20080828/=org.ogf.schema.network.topology.ctrlplane"/>
        </java>
        <echo>
  ****
  **** Changes to resources/services.xml must be merged with
  **** conf/axis-tomcat/notify-services.xml
  ****
        </echo>
    </target>

    <target name="notify-aar" description="notifyaar" depends="compile">
        <!-- Create a temporary directory for the AAR structure -->
        <mkdir dir="${build.home}/notify-aar/" />

        <!-- Copy the schema & WSDL files -->
        <copy todir="${build.home}/notify-aar/META-INF" flatten="true">
            <fileset dir="conf/schema" includes="*.xsd, OSCARS-Notify.wsdl"/>
        </copy>

        <!-- Copy over the specific services.xml file -->
        <copy file="conf/axis-tomcat/notify-services.xml" tofile="${build.home}/notify-aar/META-INF/services.xml"/>

        <jar destfile="build/OSCARSNotify.aar">
            <fileset dir="${build.classes}" includes="**/notifybroker/ws/**/*,**/oasis_open/**/*,**/w3/**/*,**/client/security/**/*,**/wsdlTypes/AAAFault*,**net/es/oscars/*,**/rmi/*, **/rmi/notifybroker/**/*,**/rmi/aaa/**/*,**/oscars/aaa/AuthValue*,**/oscars/aaa/AuthMultiValue*,**/oscars/ws/AAAFaultMessage*" />
            <fileset dir="${build.home}/notify-aar/"/>
        </jar>
    </target>

    <!-- Deployment section  *********************************************** -->
    <target name="deploywar" description="copy OSCARS.war to webapp directory" depends="oscars-war, setupServer, deploylibs">
        <delete file="${catalina.home}/webapps/OSCARS.war"/>
        <delete dir="${catalina.home}/webapps/OSCARS"/>
        <copy file="build/OSCARS.war" todir="${webapp.home}"/>
    </target>

    <target name="deployaar" description="copy OSCARS.aar to axis2 services directory" depends="oscars-aar, setupServer, deploylibs">
        <copy file="${build.home}/OSCARS.aar" todir="${webservice.home}"/>

        <copy file="conf/logging/axis2.log4j.properties" tofile="${axis2.home}/WEB-INF/classes/log4j.properties"/>
        <copy file="${build.classes}/net/es/oscars/client/security/PWCallback.class" todir="${axis2.home}/WEB-INF/classes/net/es/oscars/client/security/"/>
    	<copy file="${build.classes}/net/es/oscars/ConfigFinder.class" todir="${axis2.home}/WEB-INF/classes/net/es/oscars/"/>
    </target>

    <target name="deploynotifyaar" description="copy OSCARSNotify.aar to axis2 services directory" depends="notify-aar,deploylibs,copydefaults,copydomain">
        <copy file="${build.home}/OSCARSNotify.aar" todir="${webservice.home}"/>

        <copy file="conf/logging/axis2.log4j.properties" tofile="${axis2.home}/WEB-INF/classes/log4j.properties"/>
        <copy file="${build.classes}/net/es/oscars/client/security/PWCallback.class" todir="${axis2.home}/WEB-INF/classes/net/es/oscars/client/security/"/>
    </target>

    <target name="deployall" description="deploy all aar and war files" depends="build-all, deployaar, deploywar, deploynotifyaar" />

    <!-- Note that this requires that Axis2 has already been deployed. -->
    <target name="deploylibs" description="copy all libraries used by the aar and war to shared/lib">
<!-- FIXME: This is probably not necessary at all. Am leaving it here for now -->
        <copy todir="${catalina.home}/shared/lib">
            <fileset dir="${webapp.home}/axis2/WEB-INF/lib" includes="*.jar" excludes="jaxen-1.1.1.jar"/>
        </copy>
    </target>

<!-- Intended to be used by sites that copy modified versions of OSCARS.jks, ssl-keystore.jks and
     rampConfig.xml to a $DOMAIN_HOME directory. If there are no installed versions of these files,
     this target will install them. If the files in $domain.home are newer than installed version
  -->
    <target name="copydomain" depends = "prepare" if="domain.exists">
        <!-- don't let newer  values of these files overwrite existing one, but later inform user that a new file exists -->
        <available property="OSCARS.jks.exists" file="${conf.axistomcat}/OSCARS.jks"  value="true" />
        <uptodate property="OSCARS.jks.uptodate" 
            targetfile="${conf.axistomcat}/OSCARS.jks" 
            srcfile="${domain.home}/server/OSCARS.jks"/>
         <available property="ssl-keystore.jks.exists" file="${conf.axistomcat}/ssl-keystore.jks"  value="true" />
         <uptodate property="ssl-keystore.jks.uptodate" 
             targetfile="${conf.axistomcat}/ssl-keystore.jks" 
             srcfile="conf/axis-tomcat/ssl-keystore.jks.template"/>
        <available property="rampConfig.xml.exists" file="${conf.axistomcat}/rampConfig.xml" value="true"/>
        <uptodate property="rampConfig.xml.uptodate"
            targetfile="conf/axis-tomcat/rampConfig.xml"
            srcfile="conf/axis-tomcat/rampConfig.xml.template" />
        <!-- let  new value of axis2.xml over write existing one, but edit the target in edit_axis2.xml -->
        <uptodate property="axis2.xml.exists" 
            targetfile="${conf.axistomcat}/axis2.xml"
            srcfile="conf/axis-tomcat/axis2.xml.template" />
        <!-- Copy domain keys and properties and generic axis.xml files to conf.axistomcat location -->
        <mkdir dir="${conf.axistomcat}"/>
        <copy file="conf/axis-tomcat/ssl-keystore.jks.template" tofile="conf/axis-tomcat/ssl-keystore.jks" />
        <copy todir="${conf.axistomcat}">
            <fileset dir="conf/axis-tomcat" includes="axis2.xml,axis2-norampart.xml"/>
            <fileset dir="${domain.home}/server">
                <include name="OSCARS.jks" unless="OSCARS.jks.exists"/>
            </fileset>
            <fileset dir="conf/axis-tomcat">
                <include name="ssl-keystore.jks" unless="ssl-keystore.jks.exists"/>
            </fileset>
        </copy>
        <copy todir="${conf.properties}">
            <fileset dir="${domain.home}/server/" includes="oscars.properties, test.properties"/>
        </copy>
        <copy todir="${conf.notify}">
            <fileset dir="conf/notify" includes="*.xml"/>
        </copy>
        <copy todir="${conf.pss}">
            <fileset dir="${domain.home}/server/" includes="*key"/>
        </copy>
    </target>

<!-- Intended to be used by sites who update with tar file releases
     On an release update, these files will be copied and edited by an upgrade script
     This task will only be effective on a clean installation  -->
    <target name="copydefaults" depends="prepare" unless="domain.exists">
        <!-- Copy default configs if they don't exist. -->
        <available property="axis2.xml.exists" file="${conf.axistomcat}/axis2.xml" value="true"/>
        <available property="axis2.norampart.xml.exists" file="${conf.axistomcat}/axis2-norampart.xml" value="true"/>
        <available property="ssl-keystore.jks.exists" file="${conf.axistomcat}/ssl-keystore.jks" value="true"/>
        <available property="rampConfig.xml.exists" file="${conf.axistomcat}/rampConfig.xml" value="true" />
        <available property="OSCARS.jks.exists" file="${conf.axistomcat}/OSCARS.jks"  value="true" />
        <uptodate property="OSCARS.jks.uptodate" 
            targetfile="${conf.axistomcat}/OSCARS.jks" 
            srcfile="conf/axis-tomcat/OSCARS.jks.template"/>
        <available property="ssl.jks.exists" file="${conf.axistomcat}/ssl-keystore.jks"  value="true" />
        <uptodate property="ssl.jks.uptodate" 
             targetfile="${conf.axistomcat}/ssl-keystore.jks" 
             srcfile="conf/axis-tomcat/ssl-keystore.jks.template"/>
        <available property="oscars.properties.exists" file="${conf.properties}/oscars.properties" value="true"/>
        <available property="test.properties.exists" file="${conf.properties}/test.properties" value="true"/>
        <available property="idc-topicnamespace.xml.exists" file="${conf.notify}/idc-topicnamespace.xml" value="true"/>
        <available property="idc-topicset.xml.exists" file="${conf.notify}/idc-topicset.xml" value="true"/>
        
        <copy file="conf/axis-tomcat/ssl-keystore.jks.template" tofile="conf/axis-tomcat/ssl-keystore.jks" />
        <copy file="conf/axis-tomcat/OSCARS.jks.template" tofile="conf/axis-tomcat/OSCARS.jks" />
        <copy file="conf/axis-tomcat/axis2.xml.template" tofile="conf/axis-tomcat/axis2.xml" />
        <copy file="conf/axis-tomcat/rampConfig.xml.template" tofile="conf/axis-tomcat/rampConfig.xml" />
        <mkdir dir="${conf.axistomcat}"/>
        <copy todir="${conf.axistomcat}">
            <fileset dir="conf/axis-tomcat">
                <include name="axis2.xml" unless="axis2.xml.exists"/>
                <include name="axis2-norampart.xml" unless="axis2.norampart.xml.exists"/>
                <include name="ssl-keystore.jks" unless="ssl-keystore.jks.exists"/>
            	<include name="rampConfig.xml" unless="rampConfig.xml.exists"/>
                <include name="OSCARS.jks" unless="OSCARS.jks.exists"/>
            </fileset>
        </copy>

        <copy todir="${conf.properties}">
            <fileset dir="conf/properties/">
                <include name="oscars.properties" unless="oscars.properties.exists"/>
                <include name="test.properties" unless="test.properties.exists"/>
            </fileset>
        </copy>
        <copy todir="${conf.notify}">
            <fileset dir="conf/notify/">
                <include name="idc-topicnamespace.xml" unless="idc-topicnamespace.xml.exists"/>
                <include name="idc-topicset.xml" unless="idc-topicset.xml.exists"/>
            </fileset>
        </copy>
    </target>

    <target name="editRampConfig" unless="rampConfig.xml.exists">
        <copy file="conf/axis-tomcat/rampConfig.xml.template" tofile="conf/axis-tomcat/rampConfig.xml"/> 
        <input
            message="Please enter the service user name to be used when it acts as a client."
            addproperty="user.alias"
        />
        <replace file="conf/axis-tomcat/rampConfig.xml" token="**keyEntry**" summary="true" value="${user.alias}" />
        <input
            message="Please enter the password for the client keystore."
            addproperty="keystore.password"
        />
        <replace file="conf/axis-tomcat/rampConfig.xml" token="**keystorePassword**" summary="true" value="${keystore.password}" />
        <copy file="conf/axis-tomcat/rampConfig.xml" tofile="${conf.axistomcat}/rampConfig.xml"/>
    </target>

    <target name="existing.keystore.warning1" unless="OSCARS.jks.exists">
        <echo level="warning">  **** A new OSCARS.jks file has been copied to  ****
  **** ${conf.axistomcat}.  ****
  **** You must add a KeyEntry for the service. ****
        </echo>
    </target>
    
    <target name="new.keystore.warning1" unless="OSCARS.jks.uptodate">
        <echo level="warning">  ****  A new OSCARS.jks.template.file is available  ***
  **** You may want to merge it with the one in  ***
  **** ${conf.axistomcat}  ****
        </echo>
    </target>

    <target name="existing.keystore.warning2" unless="ssl-keystore.jks.exists">
        <echo level="warning">  **** A new ssl-keystore.jks file has been copied to  ****
  **** ${conf.axistomcat}.  ****
  **** You may need to add the CA for your target host. ****
        </echo>
    </target>
    
    <target name="new.keystore.warning2" unless="ssl-keystore.jks.uptodate">
        <echo level="warning">  ****  A new ssl-keystore.jks.template.file is available  ***
  **** You may want to merge it with the one in  ***
  **** ${conf.axistomcat}  ****
        </echo>
    </target>
    
    <target name="setupServer" description="populate the shared/classes directory"
                      depends="prepare,copydomain,copydefaults,existing.keystore.warning1,
        new.keystore.warning1,existing.keystore.warning2,new.keystore.warning2,setupTomcat">
        <mkdir dir="${conf.axistomcat}/modules"/>
        <copy todir="${conf.axistomcat}/modules/">
            <fileset dir="conf/axis-tomcat" includes="rampart*.mar"/>
        </copy>
        
        <!-- copy mail-templates to ${catalina.out}/shared/classes/server currently hardcoded in EmailObserver -->
        <mkdir dir="${conf.mail_templates}"/>
        <copy todir="${conf.mail_templates}">
            <fileset dir="conf/mail_templates" includes="*.xml"/>
        </copy>
        
        <!-- copy PSS template files -->
        <copy todir="${conf.pss}">
            <fileset dir="conf/pss/" includes="cisco*.xml, juniper*.xml "/>
        </copy>
        <chmod dir="${conf.pss}" perm="600" includes="*key"/>
        <chmod dir="${conf.properties}" perm="600" includes="oscars.properties"/>
    </target>
    
    <target name="setupTomcat" if="${tomcat.local}">
        <!-- copy log4j.jar and commons-logging.jar to common/lib so that Tomcat will use log4j logging -->
        <copy todir="${tomcat.loc}">
            <fileset dir="lib/axis2/" includes="log4j-1.2.1*.jar,commons-logging-1.1*.jar"/>
        </copy>

        <!-- copy log4j.properties into Tomcat classpath -->
        <copy file="conf/logging/tomcat.log4j.properties" tofile="${catalina.home}/common/classes/log4j.properties"/>
    </target>
    
    <!-- TestNG test section *********************************************** -->
    <property name="test.classes" value="build/test"/>
    <copy todir="${test.classes}">
        <fileset dir="conf/db" includes="c3p0.properties, testaaa.cfg.xml, testbss.cfg.xml, bss.cfg.xml"/>
    </copy>

    <path id="test.compile.path">
        <fileset dir="${build.lib}" includes="*.jar"/>
        <fileset dir="${build.axis2.lib}" includes="*.jar" excludes="rampart-core-*.jar"/>
        <pathelement location="${build.classes}"/>
    </path>

    <path id="test.path">
        <path refid="test.compile.path"/>
        <pathelement location="${test.classes}"/>
    </path>

    <target name="test.clean" description="Delete test server build directory">
        <delete dir="${test.classes}"/>
    </target>

    <!-- delays until the jar's in its path are actually in the right place -->
    <target name="startupTestNG" depends="prepare">
        <taskdef name="testng" classpathref="test.path" classname="org.testng.TestNGAntTask"/>
    </target>

    <target name="test.prepare">
        <mkdir dir="${test.classes}"/>
    </target>

    <target name="test.compile" depends="compile, test.prepare" description="Compile all test cases">
        <javac srcdir="test" destdir="${test.classes}" debug="true" debuglevel="lines,vars,source" classpathref="test.compile.path"/>
    </target>

    <!-- run a particular packages tests if t is set.  overriden by idc -->
    <target name="testpkg" if="t" unless="idc" depends="startupTestNG">
        <property name="groups" value="${t}, initdb"/>
        <property name="testsuite" value="${t}.suite"/>
    </target>

    <!-- following section provides for testing all packages for a domain -->
    <target name="ESnet.check" if="idc">
        <condition property="ESnet.set">
            <equals arg1="${idc}" arg2="ESnet"/>
        </condition>
    </target>

    <target name="testESnet" depends="startupTestNG, ESnet.check" if="ESnet.set">
        <property name="groups" value="aaa, bss, bss.topology, pathfinder.db, pathfinder.traceroute, pss, pss.jnx, pss.cisco, initdb"/>
        <property name="testsuite" value="ESnet.suite"/>
    </target>

    <!-- following section provides for testing all packages specific to a domain -->
    <target name="I2.check" if="idc">
        <condition property="I2.set">
            <equals arg1="${idc}" arg2="I2"/>
        </condition>
    </target>

    <target name="testI2" depends="startupTestNG, I2.check" if="I2.set">
        <property name="groups" value="aaa, bss, bss.topology, pathfinder.dragon, tss, pss.dragon, initdb "/>
        <property name="testsuite" value="I2.suite"/>
    </target>

    <target name="test" depends="test.compile, testpkg, testESnet, testI2">
        <testng classpathref="test.path" groups="${groups}" suitename="${testsuite}" outputDir="${webapp.home}/test" listeners="net.es.oscars.ITestListener" haltOnFailure="true" verbose="2" parallel="methods" threadCount="8">
            <jvmarg value="-Djava.net.preferIPv4Stack=true"/>
            <jvmarg value="-Dlog4j.configuration=file:///${env.PWD}/test/log4j.test.properties"/>
            <jvmarg value="-Dcatalina.home=${catalina.home}"/>
            <!-- <jvmarg value="-Dapp=-test"/> -->
            <jvmarg value="-Dsuite=${testsuite}"/>
            <classfileset dir="${test.classes}" includes="**/*.class"/>
        </testng>
    </target>

</project>
