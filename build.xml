<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- Main build file -->

<project name="OSCARS" default="all">

<!-- Properties section for main targets -->

<property name="app.name" value="oscars" />
<property name="app.version" value="0.5-dev" />
<property name="webapp.home" value="/usr/local/jakarta-tomcat5.5/webapps" />

<property name="build.home" value="build" />
<property name="build.classes" value="${build.home}/WEB-INF/classes" />
<property name="build.lib" value="${build.home}/WEB-INF/lib" />

<target name="all" depends="clean, compile" description="Recompile all source" />

<!-- parent directories automatically created -->
<target name="prepare">
    <mkdir dir="${build.classes}" />
    <copy todir="${build.classes}">
        <fileset dir="src" includes="**/*.hbm.xml" />
        <fileset dir="conf/public/server" includes="*.cfg.xml, log4j.properties,sec-server*" />
    </copy>
    <mkdir dir="${build.lib}"/>
    <copy todir="${build.lib}">
        <fileset dir="lib" includes="*.jar"/>
        <fileset dir="lib/axis2" includes="*.jar"/>
        <fileset dir="lib/jsf" includes="*.jar"/>
    </copy>
</target>

<!-- Using Axis2, generates code in net.es.oscars.oscars and
net.es.oscars.wsdlTypes.  Also, OSCARS.wsdl is copied into resources,
a services.xml file generated in resources, and a build.xml generated in the
output directory.

Currently all auto-generated code is checked into Subversion as reference
material.

Adding a -t switch generates a Junit test in test/ne/es/oscars/service
Adding a -sd switch generates resources/services.xml -->

<target name="wsdl2java">
    <delete failonerror="false">
        <fileset dir="resources" includes="services.xml" />
    </delete>
    <java classname="org.apache.axis2.wsdl.WSDL2Java" fork="true">
        <classpath> <fileset dir="lib"  includes="**/*.jar"/> 
        </classpath>
        <arg value="-uri" />
        <arg file="conf/public/server/OSCARS.wsdl" />
        <arg value="--server-side" />
        <arg value="--serverside-interface" />
        <arg value="--sync" />
        <arg value="--service-description" />
        <arg value="--generate-all" />
        <arg value="-package"/>
        <arg value="net.es.oscars.oscars" />
        <arg value="--namespace2package" />
        <arg value="http://oscars.es.net/OSCARS=net.es.oscars.wsdlTypes" />
 
    </java>
    <echo> 
  *** 
  **** Changes to resources/services.xml must be merged with conf/public/server/services.xml 
  ****
   </echo>
</target>

<!-- Compile everything except tests.  Various targets will use portions they
need. Will need to separate if someone wants only WBUI and not Axis2 -->
<target name="compile" depends="prepare" description="Compile Java sources">
    <javac srcdir="src" includes="**/*.java" destdir="${build.classes}">
        <classpath>
            <fileset dir="lib" includes="**/*.jar" />
        </classpath>
    </javac>
</target>

<target name="docs">
    <mkdir dir="docs/api" />
    <javadoc destdir="docs/api" author="true">
        <packageset dir="src" includes="**/*" />
        <classpath>
            <fileset dir="lib" includes="**/*.jar" />
        </classpath>
    </javadoc>
</target>


<target name="clean" description="Delete main build directory">
    <delete dir="${build.home}" />
</target>

<!-- OSCARS.aar file, gets copied into container-specific location.  For
Tomcat, this is webapps/axis2/WEB-INF/services -->
<target name="aar" description="Create OSCARS.aar file" depends="compile">
    <jar destfile="build/OSCARS.aar">  
        <fileset dir="${build.classes}" includes="**/*"
                 excludes="**/servlets/**/*" />
        <fileset dir="${build.lib}/.."  includes="lib/*.jar" />
        <metainf dir="conf/public/server" includes="*.wsdl, *.xsd, services.xml" /> 
    </jar>
</target>

<!-- WBUI section ******************************************************** -->

<property name="dojo" value="/usr/local/src/dojo" />
<available property="dojo.present" file="web/dojo" />
<available property="docs.present" file="web/docs" />

<target name="copydojo" unless="dojo.present"
        description="copy necessary Dojo material from /usr/local/src">
    <copy todir="web/dojo">
        <fileset dir="${dojo}" includes="src/**/*,iframe_history.html,dojo.js" />
    </copy>
</target>

<!-- TODO: also needs to be done if top-level docs have changed -->
<target name="copydocs" unless="docs.present"
        description="copy documentation for use in warfile">
    <copy todir="web/docs">
        <fileset dir="docs" excludes="papers/*" />
    </copy>
    <copy todir="web/docs/papers">
        <fileset dir="docs/papers" includes="*.pdf" />
    </copy>
</target>

<target name="wbui" description="Build war file for deploy"
        depends="compile, copydojo, copydocs">
    <war destfile="OSCARS.war" webxml="web/WEB-INF/web.xml">
        <fileset dir="web"
                 includes="**/*" excludes="WEB-INF/web.xml" />
        <classes dir="${build.classes}" includes="**/*"
                 excludes="**/oscars/OSCARSSk*.class, **/oscars/OSCARSM*.class,
                           **/oscars/ReservationAdapter.class" />
        <lib dir="lib" includes="*.jar" />
    </war>
</target>
	
<!-- Deployment section -->
	<property  name="catalina.home" value="/usr/local/jakarta-tomcat5.5"/>
	
	<target name="setupServer" description="populate the oscars.conf directory">
		<mkdir dir="${catalina.home}/shared/conf.oscars/axis2.repo"/>
		<mkdir dir="${catalina.home}/shared/conf.oscars/server"/>
		<copy todir="${catalina.home}/shared/conf.oscars/axis2.repo">
			<fileset dir="conf/private/server" includes="sec-client.*"/>
		</copy>
		<copy file="conf/public/client/axis2.xml" todir ="${catalina.home}/shared/conf.oscars/axis2.repo"/>
		<copy todir="${catalina.home}/shared/conf.oscars/server">
			<fileset dir="conf/private/server/" includes="*key, oscars.properties, test.properties"/>
			<fileset dir="conf/public/server/" includes="*juniper*"/>
		</copy>
     </target>

<!-- Junit test section -->

<property name="test.classes" value="build/tests" />

<path id="test.compile.path">
    <fileset dir="lib" includes="*.jar, axis2/*.jar" />
    <pathelement location="${build.classes}" />
</path>

<path id="test.path">
    <path refid="test.compile.path" />
    <pathelement location="${test.classes}" />
</path>

<condition property="test.core"><equals arg1="core" arg2="${t}" /></condition>
<available property="test.component" file="test/net/es/oscars/${t}" />

<target name="test.clean" description="Delete test server build directory">
    <delete dir="${test.classes}" />
</target>

<target name="test.prepare"> <mkdir dir="${test.classes}" /> </target>

<target name="test.compile" depends="compile, test.prepare"
        description="Compile all test cases">
    <javac srcdir="test" destdir="${test.classes}"
           classpathref="test.compile.path" />
</target>

<target name="test" depends="test.compile"
        description="Run given server tests">
    <junit printsummary="yes" haltonfailure="yes" fork="yes">
        <jvmarg value="-Djava.net.preferIPv4Stack=true" />
        <formatter type="brief" />
        <classpath refid="test.path" />
        <batchtest todir="test">
            <fileset dir="test">
                <include if="test.component" name="**/${t}/AllTests.java" />
                <include if="test.core" name="**/oscars/AllTests.java" />
                <include unless="t" name="**/AllTests.java" />
            </fileset>          
        </batchtest>
    </junit>
    <fail message="Test failed!" if="test.failed" />
</target>

</project>
