/**
 * Type converter between Axis2 classes and Hibernate beans.
 *
 * @author David Robertson, Mary Thompson, Jason Lee
 */
package net.es.oscars.oscars;

import java.util.*;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;

import org.apache.log4j.*;

// code generated by Martin Swany's schemas
import org.ogf.schema.network.topology.ctrlplane._20070626.CtrlPlanePathContent;
import org.ogf.schema.network.topology.ctrlplane._20070626.CtrlPlaneHopContent;

import net.es.oscars.bss.Reservation;
import net.es.oscars.bss.Token;
import net.es.oscars.bss.BSSException;
import net.es.oscars.bss.topology.*;
import net.es.oscars.wsdlTypes.*;

/**
 * Has methods to convert between Axis2 WSDL type classes and Hibernate beans.
 * Used by both the API and the WBUI.
 */
public class TypeConverter {

    private Logger log;

    public TypeConverter() {
        this.log = Logger.getLogger(this.getClass());
    }

    /**
     * Builds Hibernate Reservation bean, given Axis2 ResCreateContent class.
     *
     * @param params ResCreateContent instance
     * @return A Hibernate Reservation instance
     * @throws BSSException
     */
    public Reservation contentToReservation(ResCreateContent params)
            throws BSSException {

        Reservation resv = new Reservation();
        PathInfo pathInfo = params.getPathInfo();
        Layer2Info layer2Info = pathInfo.getLayer2Info();
        Layer3Info layer3Info = pathInfo.getLayer3Info();
        // have to do error checking here because tooling doesn't handle
        // WSDL choice elements yet
        if ((layer2Info == null) && (layer3Info == null)) {
            throw new BSSException("No path information provided");
        } else if ((layer2Info != null) && (layer3Info != null)) {
            throw new BSSException(
                    "Cannot provide both layer 2 and layer 3 information");
        }
        Long startTime = params.getStartTime();
        Long endTime = params.getEndTime();
        long currentTime = System.currentTimeMillis() / 1000;
        // somewhat arbitrary; could be clock skew between client and server
        if ((startTime - currentTime) < -240L) {
            throw new BSSException(
                    "Start time is more than 4 minutes in the past: check your system time or client settings");
        }
        if (startTime >= endTime) {
            throw new BSSException(
                    "End time must be greater than start time");
        }
        resv.setStartTime(startTime);
        resv.setEndTime(endTime);
        Long bandwidth = new Long(
                Long.valueOf((long)params.getBandwidth() * 1000000L));
        resv.setBandwidth(bandwidth);
        resv.setDescription(params.getDescription());
        resv.setGlobalReservationId(params.getGlobalReservationId());

        return resv;
    }

    /**
     * Builds Hibernate Reservation bean, given Axis2 ResCreateContent class.
     *
     * @param params ResCreateContent instance
     * @return A Hibernate Reservation instance
     * @throws BSSException
     */
    public Reservation contentToReservation(ModifyResContent params)
            throws BSSException {

        Reservation resv = new Reservation();

        // Hibernate will pick up error if any properties are null that
        // the database schema says cannot be null
        resv.setStartTime(params.getStartTime());
        resv.setEndTime(params.getEndTime());
        Long bandwidth = new Long(Long.valueOf((long)params.getBandwidth() * 1000000L));
        resv.setBandwidth(bandwidth);
        resv.setDescription(params.getDescription());
        resv.setGlobalReservationId(params.getGlobalReservationId());

        return resv;
    }

    /**
     * Builds Axis2 ModifyResReply class, given Hibernate Reservation bean.
     *
     * @param resv A Hibernate Reservation instance
     * @return CreateReply instance
     */
    public ModifyResReply reservationToModifyReply(Reservation resv) {
        this.log.debug("reservationToModReply.start");

        ModifyResReply reply = new ModifyResReply();
        ResDetails details = this.reservationToDetails(resv);
        reply.setReservation(details);
        this.log.debug("reservationToModReply.end");
        return reply;
    }



    /**
     * Builds Axis2 CreateReply class, given Hibernate Reservation bean.
     *
     * @param resv A Hibernate Reservation instance
     * @return CreateReply instance
     */
    public CreateReply reservationToReply(Reservation resv) {
        CreateReply reply = new CreateReply();
        Token token = resv.getToken();

        reply.setGlobalReservationId(resv.getGlobalReservationId());
        if(token != null){
            reply.setToken(token.getValue());
        }else{
            reply.setToken("none");
        }
        reply.setStatus(resv.getStatus());
        return reply;
    }

    /**
     * Builds Axis2 ResDetails class, given Hibernate bean.
     * Note that this is used by only by query, and is using
     * information from a stored reservation.
     *
     * @param resv A Hibernate reservation instance
     * @return ResDetails instance
     */
    public ResDetails reservationToDetails(Reservation resv) {
        this.log.debug("reservationToDetails.start");

        if (resv == null) {
            this.log.debug("reservationToDetails.end (null)");
            return null;
        }

        ResDetails reply = new ResDetails();
        reply.setGlobalReservationId(resv.getGlobalReservationId());
            reply.setLogin(resv.getLogin());
        reply.setStatus(resv.getStatus());
        reply.setStartTime(resv.getStartTime());
        reply.setEndTime(resv.getEndTime());
        reply.setCreateTime(resv.getCreatedTime());
        Long mbps = resv.getBandwidth()/1000000;
        int bandwidth = mbps.intValue();
        reply.setBandwidth(bandwidth);
        reply.setDescription(resv.getDescription());
        reply.setPathInfo(this.getPathInfo(resv));
        this.log.debug("reservationToDetails.end");
        return reply;
    }

    /**
     * Builds list of Axis2 ListReply instances, given list of Hibernate
     * Reservation beans and a list of PathInfo structures.
     *
     * @param reservations A list of Hibernate Reservation beans
     * @param numRequested - the number of reservations to return
     * @param resOffset - the offset of the first reservation to be returned
     * @return ListReply A list of Axis2 ListReply instances
     */
    public ListReply reservationToListReply(List<Reservation> reservations,
        int numRequested, int resOffset) {
        ListReply reply = new ListReply();
        int ctr = 0;

        if (reservations == null) {
            this.log.info("toListReply, reservations is null");
            reply.setTotalResults(0);
            return reply;
        }

        int listLength = reservations.size();
        ResDetails[] resList = new ResDetails[listLength];
        reply.setTotalResults(listLength);

        int offset = 1;
        int results = 0;

        for (Reservation resv : reservations) {
            if ((offset >= resOffset) && (results < numRequested)) {
                ResDetails details = this.reservationToDetails(resv);
                resList[ctr] = details;
                ctr++;
                results++;
            }
            offset++;
        }
        reply.setResDetails(resList);
        return reply;
    }


    /**
     * Builds all components of Axis2 PathInfo structure, given a
     * Hibernate Reservation bean.
     *
     * @param resv a Reservation instance
     * @return pathInfo a filled in PathInfo Axis2 type
     */
    public PathInfo getPathInfo(Reservation resv) {
        this.log.debug("getPathInfo.start");
        PathInfo pathInfo = new PathInfo();
        if (resv.getPath() != null) {
            pathInfo.setPathSetupMode(resv.getPath().getPathSetupMode());
            pathInfo.setPath(this.pathToCtrlPlane(resv.getPath()));
            // one of these is allowed to be null
            Layer2Info layer2Info = this.pathToLayer2Info(resv.getPath());
            pathInfo.setLayer2Info(layer2Info);
            Layer3Info layer3Info = this.pathToLayer3Info(resv.getPath());
            pathInfo.setLayer3Info(layer3Info);
            // allowed to be null
            MplsInfo mplsInfo = this.pathToMplsInfo(resv.getPath());
            pathInfo.setMplsInfo(mplsInfo);
            this.log.debug("getPathInfo.end");
            return pathInfo;
        } else {
            this.log.debug("getPathInfo.end");
            return null;
        }
    }

    /**
     * Takes a pathInfo object and sets the source and destination
     * to the ingress and egress. This makes it valid for pathfinders
     * testing whether src and dest are set as the first and last hops
     * in the path. Assumes that the path object contains the local
     * path segment.
     *
     * @param pathInfo the pathInfo instance to convert
     * @return the converted pathInfo object
     */
    public PathInfo toLocalPathInfo(PathInfo pathInfo){
        Layer2Info l2Info = pathInfo.getLayer2Info();
        Layer3Info l3Info = pathInfo.getLayer3Info();
        CtrlPlanePathContent path = pathInfo.getPath();
        CtrlPlaneHopContent[] hop = path.getHop();
        String ingress = null;
        String egress = null;

        if(path == null){
            return pathInfo;
        }

        hop = path.getHop();
        if(hop == null){
            return pathInfo;
        }

        ingress = hop[0].getLinkIdRef();
        egress = hop[hop.length - 1].getLinkIdRef();
        if(l2Info != null){
            l2Info.setSrcEndpoint(ingress);
            l2Info.setDestEndpoint(egress);
            pathInfo.setLayer2Info(l2Info);
        }
        if(l3Info != null){
            l3Info.setSrcHost(ingress);
            l3Info.setDestHost(egress);
            pathInfo.setLayer3Info(l3Info);
        }

        return pathInfo;
    }

    /**
     * Builds Axis2 CtrlPlanePathContent, given Hibernate Path bean with
     * information retrieved from database.  This is the reservation's
     * internal path returned in response to a query.
     *
     * @param path a Path instance
     * @return A CtrlPlanePathContent instance
     */
    public CtrlPlanePathContent pathToCtrlPlane(Path path) {
        this.log.debug("pathToCtrlPlane.start");

        String hopId = null;
        Ipaddr ipaddr = null;

        PathElem pathElem = path.getPathElem();
        CtrlPlanePathContent ctrlPlanePath = new CtrlPlanePathContent();
        while (pathElem != null) {
            CtrlPlaneHopContent hop = new CtrlPlaneHopContent();
            Link link = pathElem.getLink();
            if (path.getLayer2Data() != null) {
                hopId = link.getFQTI();
            } else {
                String nodeName = link.getPort().getNode().getTopologyIdent();
                ipaddr = link.getValidIpaddr();
                if (ipaddr == null) {
                    hopId = "*out-of-date IP*";
                } else {
                    hopId = nodeName + ": " + ipaddr.getIP();
                }
            }
            hop.setId(hopId);
            hop.setLinkIdRef(hopId);
            ctrlPlanePath.addHop(hop);
            pathElem = pathElem.getNextElem();
        }
        ctrlPlanePath.setId("unimplemented");
        this.log.debug("pathToCtrlPlane.end");
        return ctrlPlanePath;
    }

    /**
     * Given the Hibernate bean for a path, return a filled in Axis2 instance
     * for layer 2 information.
     */
    public Layer2Info pathToLayer2Info(Path path) {
        this.log.debug("pathToLayer2Info.start");

        Layer2DataDAO layer2DataDAO = new Layer2DataDAO("bss");
        // database type
        Layer2Data layer2Data = path.getLayer2Data();
        if (layer2Data == null) {
            return null;
        }

        // Axis2 type
        Layer2Info layer2Info = new Layer2Info();
        layer2Info.setSrcEndpoint(layer2Data.getSrcEndpoint());
        layer2Info.setDestEndpoint(layer2Data.getDestEndpoint());

        /* TODO: Coordinate between domains to determine if src and dest
            are tagged or untagged. Also assumes vlan is the same along
            entire path. */
        PathElem elem = path.getPathElem();
        while (elem != null) {
            String vlanStr = elem.getLinkDescr();
            if (vlanStr != null) {
                VlanTag vtag = new VlanTag();
                int storedVlan = Integer.parseInt(vlanStr);
                int vlanNum = Math.abs(storedVlan);
                vtag.setString(vlanNum + "");
                if (storedVlan >= 0) {
                    vtag.setTagged(true);
                } else {
                    vtag.setTagged(false);
                }
                layer2Info.setSrcVtag(vtag);
                layer2Info.setDestVtag(vtag);
                break;
            }

            elem = elem.getNextElem();
        }
        this.log.debug("pathToLayer2Info.end");
        return layer2Info;
    }

    /**
     * Given the Hibernate bean for a path, return a filled in Axis2 instance
     * for layer 3 information.
     */
    public Layer3Info pathToLayer3Info(Path path) {
        this.log.debug("pathToLayer3Info.start");

        Layer3DataDAO layer3DataDAO = new Layer3DataDAO("bss");
        // database type
        Layer3Data layer3Data = path.getLayer3Data();
        if (layer3Data == null) {
            return null;
        }
        // Axis2 type
        Layer3Info layer3Info = new Layer3Info();
        layer3Info.setSrcHost(layer3Data.getSrcHost());
        layer3Info.setDestHost(layer3Data.getDestHost());
        // makes sure that protocol is in upper case to match WSDL
        if (layer3Data.getProtocol() != null) {
            layer3Info.setProtocol(layer3Data.getProtocol().toUpperCase());
        }
        if (layer3Data.getSrcIpPort() != null) {
            layer3Info.setSrcIpPort(layer3Data.getSrcIpPort());
        }
        if (layer3Data.getDestIpPort() != null) {
            layer3Info.setDestIpPort(layer3Data.getDestIpPort());
        }
        this.log.debug("pathToLayer3Info.end");

        return layer3Info;
    }

    /**
     * Given the Hibernate bean for a path, return a filled in Axis2 instance
     * for MPLS information.
     */
    public MplsInfo pathToMplsInfo(Path path) {
        this.log.debug("pathToMplsInfo.start");

        MPLSDataDAO MPLSDataDAO = new MPLSDataDAO("bss");
        // database type
        MPLSData mplsData = path.getMplsData();
        if (mplsData == null) {
            return null;
        }
        // Axis2 type
        MplsInfo mplsInfo = new MplsInfo();
        int burstLimit = mplsData.getBurstLimit().intValue();
        mplsInfo.setBurstLimit(burstLimit);
        mplsInfo.setLspClass(mplsData.getLspClass());
        this.log.debug("pathToMplsInfo.end");
        return mplsInfo;
    }

    public void ensureLocalIds(PathInfo pathInfo) {
        if (pathInfo == null) {
            return;
        }

        CtrlPlanePathContent path = pathInfo.getPath();
        if (path == null) {
            return;
        }
        path.setId("unimplemented");

        CtrlPlaneHopContent[] hops = path.getHop();
        if (hops == null) {
            return;
        }
        for (int i=0; i < hops.length; i++) {
            CtrlPlaneHopContent hop = hops[i];
            if (hop.getId() == null || hop.getId().equals("")) {
                hop.setId(hop.getLinkIdRef());
            }
        }
        return;
    }

    /**
     * Given a PathInfo instance, converts the ERO to format for client.
     * Currently it is passed back as is for layer 2, and converted to host name
     * IP pairs for layer 3.  This is used by the create message.
     *
     * @param pathInfo a PathInfo instance
     */
    public void clientConvert(PathInfo pathInfo) {
        this.log.debug("clientConvert.start");



        String hopId = null;
        String hostName = null;
        Ipaddr ipaddr = null;

        CtrlPlanePathContent oldPath = pathInfo.getPath();
        CtrlPlanePathContent newPath = new CtrlPlanePathContent();
        CtrlPlaneHopContent[] oldHops = oldPath.getHop();

        // return as is if layer 2; just fix hop id
        if (pathInfo.getLayer2Info() != null) {
            this.ensureLocalIds(pathInfo);
            return;
        }
        // if layer 3, generate new path with host name/IP rather than
        // topology identifier
        DomainDAO domainDAO =  new DomainDAO("bss");
        for (int i=0; i < oldHops.length; i++) {
            CtrlPlaneHopContent hop = new CtrlPlaneHopContent();
            String[] componentList = oldHops[i].getLinkIdRef().split(":");
            // if local domain
            if (!componentList[3].equals("other")) {
                Link link = domainDAO.getFullyQualifiedLink(componentList);
                hostName = link.getPort().getNode().getTopologyIdent();
                ipaddr = link.getValidIpaddr();
                if (ipaddr == null) {
                    hopId = "*out-of-date IP*";
                } else {
                    hopId = hostName + ": " + ipaddr.getIP();
                }
            } else {
                // this component is IP address in other domain
                String ip = componentList[6];
                hostName = null;
                try {
                    InetAddress inetAddress = InetAddress.getByName(ip);
                    hostName = inetAddress.getHostName();
                } catch (UnknownHostException e) {
                    ;  // non-fatal error
                }
                if ((hostName != null) && !hostName.equals(ip)) {
                    hopId = hostName + ": " + ip;
                } else {
                    hopId = ip;
                }
            }
            hop.setId(hopId);
            hop.setLinkIdRef(hopId);
            newPath.addHop(hop);
        }
        newPath.setId("unimplemented");
        pathInfo.setPath(newPath);
        this.log.debug("clientConvert.end");
        return;
    }

    /**
     * Given a PathInfo instance, determines whether it contains information
     *     requiring special authorization to set.
     *
     * @param pathInfo a PathInfo instance
     * @return boolean indicating whether contains series of hops
     */
    public boolean checkPathAuth(PathInfo pathInfo) {

        if (pathInfo.getLayer3Info() != null) {
            CtrlPlanePathContent path = pathInfo.getPath();
            if (path != null) { return true; }
        }
        return false;
    }

    /**
     * Converts a string to a bit mask. The range should take the form
     * "x,y" for discontinuous ranges and "x-y" for continuous ranges.
     * These formats can be concatenated to specify many subranges
     * (i.e 600,3000-3001).
     *
     * @param range the range string to be converted
     * @return a bit mask with values in given range set to 1
     * @throws BSSException
     */
    public byte[] rangeStringToMask(String range) throws BSSException{
        byte[] mask = new byte[512];

        if (range.trim().equals("any")) {
            for (int i = 0; i < 512; i++) {
                mask[i] = (byte) 255;
            }
            return mask;
        }

        range = range.replaceAll("\\s", "");
        String[] rangeList = range.split(",");
        try {

            for(int i = 0; i < rangeList.length; i++){
                String[] rangeEnds = rangeList[i].split("-");
                if (rangeEnds.length == 1){
                    int tag = Integer.parseInt(rangeEnds[0].trim());
                    if(tag < 4096){
                        mask[tag/8] = (byte)(1 << (7 - (tag % 8)));
                    }
                } else if(rangeEnds.length == 2){
                    int startTag = Integer.parseInt(rangeEnds[0].trim());
                    int endTag = Integer.parseInt(rangeEnds[1].trim());
                    if (startTag < 4096 && endTag < 4096){
                        for(int j = startTag; j <= endTag; j++){
                            mask[j/8] |= (1 << (7 - (j % 8)));
                        }
                    }
                }else {
                    throw new BSSException("Invalid VLAN range specified");
                }
            }
        } catch (NumberFormatException ex) {
            throw new BSSException("Invalid VLAN range format	\n"+ ex.getMessage());
        }

        /* for(int k = 0; k < mask.length; k++){
            System.out.println(k + ": " + (byte)(mask[k] & 255));
        } */

        return mask;
    }

    /**
     * Converts given mask to a range string. The range takes the form
     * "x,y" for discontinuous ranges and "x-y" for continuous ranges.
     * These formats can be concatenated to specify many subranges
     * (i.e 600,3000-3001).
     *
     * @param mask the bit mask to be converted
     * @return a range string representing the given bit mask
     */
    public String maskToRangeString(byte[] mask){
        int start = 0;
        String range = new String();

        for(int i = 0; i < mask.length; i++){
            for(int j = 0; j < 8; j++){
                int tag = i*8 + j;
                if((mask[i] & (int)Math.pow(2, (7-j))) > 0){
                    if(start == 0){
                        start = tag;
                    }
                }else if(start != 0){
                    if(!range.equals("")){
                        range += ",";
                    }
                    range += start;
                    if(start != (tag -1)){
                        range += "-" + (tag-1);
                    }
                    start = 0;
                }
            }
        }

        return range;
    }

    /**
     * If given an int whose string length is less than 2, prepends a "0".
     *
     * @param dint int, for example representing month or day
     * @return fixedLength fixed length string of length 2
     */
    private String fixedLengthTime(int dint) {
        String fixedLength = null;

        if (dint < 10) { fixedLength = "0" + dint; }
        else { fixedLength = "" + dint; }
        return fixedLength;
    }

    /**
     * Converts Reservation Hibernate bean to a HashMap
     *
     * @param resv the Reservation to convert
     * @return the converted HashMap
     */
    public HashMap<String, String[]> reservationToHashMap(Reservation resv){
        HashMap<String, String[]> map = new HashMap<String, String[]>();
        if(resv == null){
            return map;
        }

        map.put("startSeconds", this.genHashVal(resv.getStartTime() + ""));
        map.put("endSeconds", this.genHashVal(resv.getEndTime() + ""));
        map.put("createSeconds", this.genHashVal(resv.getCreatedTime() + ""));
        map.put("bandwidth", this.genHashVal(resv.getBandwidth() + ""));
        map.put("status", this.genHashVal(resv.getStatus()));
        map.put("description", this.genHashVal(resv.getDescription()));
        map.put("gri", this.genHashVal(resv.getGlobalReservationId()));
        map.put("userLogin", this.genHashVal(resv.getLogin()));

        //set Token
        Token token = resv.getToken();
        if(token != null){
            map.put("token", this.genHashVal(token.getValue()));
        }

        //set path
        map.putAll(this.pathToHashMap(resv.getPath()));

        return map;
    }

    /**
     * Converts Path Hibernate bean to a HashMap
     *
     * @param path the Path to convert
     * @return the converted HashMap
     */
    public HashMap<String, String[]> pathToHashMap(Path path){
        HashMap<String, String[]> map = new HashMap<String, String[]>();
        ArrayList<String> layers = new ArrayList<String>();
        if(path == null){
            return map;
        }

        Domain nextDomain = path.getNextDomain();
        Layer2Data layer2Data = path.getLayer2Data();
        Layer3Data layer3Data = path.getLayer3Data();
        MPLSData mplsData = path.getMplsData();
        PathElem pathElem = path.getPathElem();
        PathElem interPathElem = path.getInterPathElem();
        ArrayList<String> intraPath = new ArrayList<String>();
        ArrayList<String> interPath = new ArrayList<String>();
        String src = null;
        String dest = null;

        map.put("isExplicitPath", this.genHashVal(path.isExplicit() ? "true" : "false"));
        map.put("pathSetupMode", this.genHashVal(path.getPathSetupMode()));

        if(nextDomain != null){
            map.put("nextDomain", this.genHashVal(nextDomain.getTopologyIdent()));
        }

        if(layer3Data != null){
            src = layer3Data.getSrcHost();
            dest = layer3Data.getDestHost();
            map.put("source", this.genHashVal(src));
            map.put("destination", this.genHashVal(dest));
            //these are in the TCP/UDP headers, not IP headers, hence L4
            map.put("srcPort", this.genHashVal(layer3Data.getSrcIpPort() + ""));
            map.put("destPort", this.genHashVal(layer3Data.getDestIpPort() + ""));
            map.put("protocol", this.genHashVal(layer3Data.getProtocol()));
            map.put("dscp", this.genHashVal(layer3Data.getDscp()));
            map.put("layer", this.genHashVal("3"));
            layers.add("3");
        }

        if(layer2Data != null){
            src = layer2Data.getSrcEndpoint();
            dest = layer2Data.getDestEndpoint();
            map.put("source", this.genHashVal(src));
            map.put("destination", this.genHashVal(dest));
            layers.add("2");
        }

        map.put("layer", layers.toArray(new String[layers.size()]));

        if(mplsData != null){
            map.put("burstLimit", this.genHashVal(mplsData.getBurstLimit() + ""));
            map.put("lspClass", this.genHashVal(mplsData.getLspClass()));
        }

        while(interPathElem != null){
            String linkId = interPathElem.getLink().getFQTI();
            interPath.add(linkId);
            map.putAll(this.vlanToHashMap(interPathElem, src, dest, layer2Data));
            interPathElem = interPathElem.getNextElem();
        }
        map.put("interdomainPath", interPath.toArray(new String[interPath.size()]));

        while(pathElem != null){
            //might be no interdomain path
            Link link = pathElem.getLink();
            if (link != null) {
                String linkId = link.getFQTI();
                intraPath.add(linkId);
                map.putAll(this.vlanToHashMap(pathElem, src, dest, layer2Data));
            } else {
                this.log.error("Could not locate a link for pathElem, id: "+pathElem.getId());
            }
            pathElem = pathElem.getNextElem();
        }
        map.put("intradomainPath", intraPath.toArray(new String[intraPath.size()]));

        return map;
    }

    /**
     * Converts PathElem Hibernate bean of a layer2 link to a HashMap
     *
     * @param elem the PathElem to convert
     * @param src the source URN of the reservation
     * @param dest the destination URN of the reservation
     * @param layer2Data the layer 2 data associated with a reservation
     * @return the converted HashMap
     */
    private HashMap<String, String[]> vlanToHashMap(PathElem elem, String src,
                                                    String dest,
                                                    Layer2Data layer2Data){
        HashMap<String, String[]> map = new HashMap<String, String[]>();
        if(layer2Data == null){
            return map;
        }

        String linkId = elem.getLink().getFQTI();
        String descr = elem.getDescription();
        String tagField = "";
        if(linkId.equals(src)){
            tagField = "tagSrcPort";
        }else if(linkId.equals(dest)){
            tagField = "tagDestPort";
        }else{
            return map;
        }

        try{
            int vtag = Integer.parseInt(descr);
            map.put(tagField, this.genHashVal(vtag > 0 ? "true" : "false"));
            map.put("vlanTag", this.genHashVal(descr));
        }catch(Exception e){}

        return map;
    }

    /**
     * Generates a String array from a String
     *
     * @param value the String to convert
     * @return the converted array
     */
    private String[] genHashVal(String value){
        if(value == null){
            return null;
        }
        String[] array = new String[1];
        array[0] = value;
        return array;
    }

    /**
     * Extracts a String from a String array
     *
     * @param array the String[] to extract
     * @return the converted array
     */
    private String extractHashVal(String[] array){
        if(array == null || array.length < 1){
            return null;
        }
        return array[0];
    }

    /**
     * Extracts a long from a String array
     *
     * @param array the String[] to extract
     * @return the converted array
     */
    private long extractHashLongVal(String[] array){
        long longVal = 0;
        if(array == null || array.length < 1){
            return 0;
        }
        try{
            longVal = Long.parseLong(array[0]);
        }catch(Exception e){}

        return longVal;
    }

    /**
     * Extracts a int from a String array
     *
     * @param array the String[] to extract
     * @return the converted array
     */
    private int extractHashIntVal(String[] array){
        int intVal = 0;
        if(array == null || array.length < 1){
            return 0;
        }
        try{
            intVal = Integer.parseInt(array[0]);
        }catch(Exception e){}

        return intVal;
    }

    /**
     * Converts a hash map to a ResDetail object for Axis2
     *
     * @param value the String to convert
     * @return the converted HashMap in a ResDatils object
     */
    public ResDetails hashMaptoResDetails(HashMap<String, String[]> map){
        //Verify that map has enough fields to build valid ResDetails object
        final String[] requiredFields = { "gri", "userLogin", "status",
                                          "startSeconds", "endSeconds",
                                          "createSeconds", "bandwidth",
                                          "description", "pathSetupMode" };
        if(map == null){ return null; }
        for(int i = 0; i < requiredFields.length; i++){
            if(map.get(requiredFields[i]) == null){
                return null;
            }
        }

        //If everything looks good then build the object
        ResDetails details = new ResDetails();
        PathInfo pathInfo = new PathInfo();
        boolean hasLayer2Params = false;
        boolean hasLayer3Params = false;
        details.setGlobalReservationId(this.extractHashVal(map.get("gri")));
        details.setLogin(this.extractHashVal(map.get("userLogin")));
        details.setStatus(this.extractHashVal(map.get("status")));
        details.setStartTime(this.extractHashLongVal(map.get("startSeconds")));
        details.setEndTime(this.extractHashLongVal(map.get("endSeconds")));
        details.setCreateTime(this.extractHashLongVal(map.get("createTime")));
        details.setBandwidth(this.extractHashIntVal(map.get("bandwidth")));
        details.setDescription(this.extractHashVal(map.get("description")));

        pathInfo.setPathSetupMode(this.extractHashVal(map.get("pathSetupMode")));
        pathInfo.setPathType(this.extractHashVal(map.get("pathType")));

        /*Set Path
           use interdomain path if available otherwise just use the
           intradomain path. If this will be used in an idc:event
           object then the intradomain path will also be included in
           /idc:event/idc:localDetails */
        String[] path = map.get("interdomainPath");
        if(path == null){ path = map.get("intradomainPath"); }
        if(path != null){
            CtrlPlanePathContent wsPath = new CtrlPlanePathContent();
            wsPath.setId("resvPath");
            for(int i = 0; i < path.length; i++){
                CtrlPlaneHopContent hop = new CtrlPlaneHopContent();
                hop.setId("hop-" + (i+1));
                hop.setLinkIdRef(path[i]);
                wsPath.addHop(hop);
            }
            pathInfo.setPath(wsPath);
        }

        //Get layers
        String[] layers = map.get("layer");
        for(int i = 0; layers!= null && i < layers.length; i++){
            if("2".equals(layers[i])){
                hasLayer2Params = true;
            }else if("3".equals(layers[i])){
                hasLayer3Params = true;
            }
        }

        if(hasLayer2Params){
            Layer2Info layer2Info = new Layer2Info();
            String vtagStr = this.extractHashVal(map.get("vlanTag"));
            layer2Info.setSrcEndpoint(this.extractHashVal(map.get("source")));
            layer2Info.setDestEndpoint(this.extractHashVal(map.get("destination")));
            if(vtagStr != null){
                VlanTag vtag = new VlanTag();
                String isTagged = this.extractHashVal(map.get("tagSrcPort"));
                vtag.setString(vtagStr);
                vtag.setTagged(isTagged!= null && "true".equals(isTagged));
                layer2Info.setSrcVtag(vtag);
            }
            if(vtagStr != null){
                VlanTag vtag = new VlanTag();
                String isTagged = this.extractHashVal(map.get("tagDestPort"));
                vtag.setString(vtagStr);
                vtag.setTagged(isTagged!= null && "true".equals(isTagged));
                layer2Info.setDestVtag(vtag);
            }
            pathInfo.setLayer2Info(layer2Info);
        }

        if(hasLayer3Params){
            Layer3Info layer3Info = new Layer3Info();
            layer3Info.setSrcHost(this.extractHashVal(map.get("source")));
            layer3Info.setDestHost(this.extractHashVal(map.get("destination")));
            layer3Info.setProtocol(this.extractHashVal(map.get("protocol")));
            layer3Info.setSrcIpPort(this.extractHashIntVal(map.get("srcPort")));
            layer3Info.setDestIpPort(this.extractHashIntVal(map.get("destPort")));
            layer3Info.setDscp(this.extractHashVal(map.get("dscp")));
            pathInfo.setLayer3Info(layer3Info);
        }

        int burstLimit = this.extractHashIntVal(map.get("burstLimit"));
        String lspClass = this.extractHashVal(map.get("lspClass"));
        if(burstLimit != 0 || lspClass != null){
            MplsInfo mplsInfo = new MplsInfo();
            mplsInfo.setLspClass(lspClass);
            mplsInfo.setBurstLimit(burstLimit);
            pathInfo.setMplsInfo(mplsInfo);
        }

        details.setPathInfo(pathInfo);

        return details;
    }

    /**
     * Converts Axis2 Layer2Info object to a Layer2Data Hibernate bean
     *
     * @param layer2Info the Layer2Info object to convert
     * @return the converted Layer2Data bean
     */
     public Layer2Data layer2InfoToData(Layer2Info layer2Info){
        if(layer2Info == null){
            return null;
        }
        Layer2Data layer2Data = new Layer2Data();
        layer2Data.setSrcEndpoint(layer2Info.getSrcEndpoint());
        layer2Data.setDestEndpoint(layer2Info.getDestEndpoint());

        return layer2Data;
     }

     /**
     * Converts Axis2 Layer3Info object to a Layer3Data Hibernate bean
     *
     * @param layer3Info the Layer3Info object to convert
     * @return the converted Layer3Data bean
     */
     public Layer3Data layer3InfoToData(Layer3Info layer3Info){
        if(layer3Info == null){
            return null;
        }
        Layer3Data layer3Data = new Layer3Data();

        layer3Data.setSrcHost(layer3Info.getSrcHost());
        layer3Data.setDestHost(layer3Info.getDestHost());
        layer3Data.setSrcIpPort(layer3Info.getSrcIpPort());
        layer3Data.setDestIpPort(layer3Info.getDestIpPort());
        layer3Data.setProtocol(layer3Info.getProtocol());
        layer3Data.setDscp(layer3Info.getDscp());

        return layer3Data;
     }

     /**
     * Converts Axis2 MplsInfo object to a MPLSData Hibernate bean
     *
     * @param mplsInfo the MplsInfo object to convert
     * @return the converted MPLSData bean
     */
     public MPLSData mplsInfoToData(MplsInfo mplsInfo){
        if(mplsInfo == null){
            return null;
        }
        MPLSData mplsData = new MPLSData();

        mplsData.setBurstLimit((long) mplsInfo.getBurstLimit());
        mplsData.setLspClass(mplsInfo.getLspClass());

        return mplsData;
     }
}
