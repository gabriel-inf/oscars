#!/usr/bin/perl -w

#==============================================================================
package OSCARS::Server;

use SOAP::Transport::HTTP;

use strict;
use Data::Dumper;

use OSCARS::PluginManager;

my ( $daemon, $portnum, $authN );

# TODO:  Essentially going back to earlier version.  Need better UI.
# port number needs to be option again, config file location (or default) needs
# to be set.
my $len = scalar(@ARGV);
if ($len == 1) {
    my $first_arg = $ARGV[0];
    if ($first_arg eq '-h') {
        print STDERR "Usage:\t\toscars [portnum]\n";
        exit;
    }
    else { $portnum = $ARGV[0]; }
}
else { $portnum = 2000; }

start_daemon();

###############################################################################
#
sub start_daemon {
    my $plugin_manager = OSCARS::PluginManager->new();
    $authN = $plugin_manager->use_plugin('authentication');
    if ( !$authN ) {
        die( "Unable to find authentication plugin; does config file exist?");
    }
    $daemon = SOAP::Transport::HTTP::Daemon
        -> new (LocalPort => $portnum, Listen => 5, Reuse => 1)
        -> dispatch_to('OSCARS::Dispatcher');
    $daemon->handle;
} #____________________________________________________________________________


#==============================================================================
package OSCARS::Dispatcher;

=head1 NAME

OSCARS::Dispatcher - SOAP::Lite dispatcher for OSCARS.

=head1 SYNOPSIS

  use OSCARS::Dispatcher;

=head1 DESCRIPTION

Dispatcher for SOAP::Lite.

=head1 AUTHORS

David Robertson (dwrobertson@lbl.gov)
Mary Thompson (mrthompson@lbl.gov)

=head1 LAST MODIFIED

April 17, 2006

=cut

use Error qw(:try);
use Data::Dumper;
use SOAP::Lite;

use strict;

use OSCARS::Logger;
use OSCARS::Method;


###############################################################################
#
sub dispatch {
    my ( $class_name, $params ) = @_;

    my( $ex );
    my( $user, $handler, $som );

    # make sure first letter of method capitalized (for Perl convention for 
    # classes, since each SOAP method is handled by a class)
    $params->{method} =~ s/(\w)/\U$1/;

    my $logger = OSCARS::Logger->new('method_name' => $params->{method});
    $logger->set_level($NetLogger::INFO);
    if ( $params->{user_login} ) {
        $logger->set_user_login($params->{user_login});
    }
    if ($params->{op}) { $logger->set_op($params->{op}); }

    $logger->open('/home/oscars/logs/oscars.log');
    my $results = {};
    try {
        $user = $authN->authenticate($daemon, $params);
	$logger->set_user_login($user->{login});
        my $factory = OSCARS::MethodFactory->new();
        $handler = $factory->instantiate( $user, $params, $logger );
        # Handles SOAP method.  Handler may make other SOAP calls to
	# accomplish its task.
        $results = $handler->soap_method();
    }
    catch Error::Simple with { $ex = shift; }
    otherwise { $ex = shift; }
    finally {
        if ($ex) {
            print STDERR $ex->{-text}, "\n";
            $logger->warning("exception: $ex->{-text}", $params);
	    $logger->close();
                # caught by SOAP to indicate fault
            die SOAP::Fault->faultcode('Server')
                 ->faultstring($ex->{-text});
        }
        elsif ($handler) { $handler->post_process($results); }
        if ($params->{method} eq 'Logout') {
            $authN->remove_user($params->{user_login});
        }
        $logger->close();
    };
    return $results;
} #____________________________________________________________________________


######
1;
