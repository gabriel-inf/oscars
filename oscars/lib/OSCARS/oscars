#!/usr/bin/perl -w

#==============================================================================
package OSCARS::Server;

use SOAP::Transport::HTTP;

use strict;
use Data::Dumper;

use OSCARS::ResourceManager;

my ( $database, $aaa_component, $bss_component );

my $len = scalar(@ARGV);
if ($len == 1) {
    my $first_arg = $ARGV[0];
    if ($first_arg eq '-h') {
        print STDERR "Usage:\t\toscars database_name\n";
        print STDERR "Examples:\toscars\n";
        print STDERR "\t\toscars AAAS\n";
        exit;
    }
    else { $database = $ARGV[0]; }
}
if ( !$database ) { $database = 'AAAS'; }
if ( !$aaa_component ) { $aaa_component = 'AAAS'; }
if ( !$bss_component ) { $bss_component = 'BSS'; }


my $resource_manager;

if ($database) {
    start_daemon();
}

###############################################################################
#
sub start_daemon {

    $resource_manager = OSCARS::ResourceManager->new(
                                              'database' => $database);
    $resource_manager->add_client($bss_component, 1);

    my $portnum = $resource_manager->get_daemon_info($aaa_component);
    if ($portnum) {
        $SOAP::Constants::MAX_CONTENT_SIZE = 10000;
        my $daemon = SOAP::Transport::HTTP::Daemon
            -> new (LocalPort => $portnum, Listen => 5, Reuse => 1)
            -> dispatch_to('OSCARS::Dispatcher');
        $daemon->handle;
    }
} #____________________________________________________________________________


#==============================================================================
package OSCARS::Dispatcher;

=head1 NAME

OSCARS::Dispatcher - SOAP::Lite dispatcher for OSCARS.

=head1 SYNOPSIS

  use OSCARS::Dispatcher;

=head1 DESCRIPTION

Dispatcher for SOAP::Lite.

=head1 AUTHOR

David Robertson (dwrobertson@lbl.gov)

=head1 LAST MODIFIED

February 10, 2006

=cut

use Error qw(:try);
use Data::Dumper;
use SOAP::Lite;

use strict;

use OSCARS::ResourceManager;
use OSCARS::Method;

my $users = {};

###############################################################################
#
sub dispatch {
    my ( $class_name, $params ) = @_;

    my( $ex );
    my( $user, $authorizations, $handler, $som );

    my $results = {};
    if ($params->{method} eq 'Logout') {
        remove_user($params->{user_dn});
	$results->{user_dn} = $params->{user_dn};
	return $results;
    }
    try {
        $user = get_user($params->{user_dn});
        $resource_manager->authenticate($user, $params);
        $authorizations =
            $resource_manager->authorized($user, $params, 'Method');

	# if equal to one, already set by other component
	if ($params->{authorizations} != 1) {
            $params->{authorizations} = $authorizations;
	}
        # if BSS component is not on this server
	if ($resource_manager->has_client($params->{server})) {
            $som = $resource_manager->forward($params);
            $results = $som->result;
	}
        else {
            my $factory = OSCARS::MethodFactory->new();
            $handler = $factory->instantiate( $user, $params );
            # call SOAP method
            $results = $handler->soap_method();
        }
    }
    catch Error::Simple with { $ex = shift; }
    otherwise { $ex = shift; }
    finally {
        if ($ex) {
            print STDERR $ex->{-text}, "\n";
            if ( !$handler ) {
                $resource_manager->write_exception($ex->{-text},
                                                   $params->{method}),
            }
            else {
                $handler->write_exception($ex->{-text}, $params->{method});
            }
                # caught by SOAP to indicate fault
            die SOAP::Fault->faultcode('Server')
                 ->faultstring($ex->{-text});
        }
        elsif ($handler) {
            $handler->post_process($results);
	    if ($params->{authorizations} != 1) {
                $results->{authorizations} = $authorizations;
            }
	}
    };
    return $results;
} #____________________________________________________________________________


###############################################################################
# Gets user instance from user list if it exists; otherwise create an instance
# associated with the component and distinguished name given.
#
sub get_user {
    my( $user_dn ) = @_;

    if (!$users->{$user_dn}) {
        $users->{$user_dn} = OSCARS::User->new(
                                   'dn' => $user_dn,
                                   'database' => $database);
    }
    return $users->{$user_dn};
} #____________________________________________________________________________


###############################################################################
# Removes given user from the user list.
#
sub remove_user {
    my( $user_dn ) = @_;

    if ( $users->{$user_dn} ) { $users->{$user_dn}->disconnect(); }
    $users->{$user_dn} = undef;
} #____________________________________________________________________________


######
1;
