#!/usr/bin/perl -w

#==============================================================================
package OSCARS::Server;

use SOAP::Transport::HTTP;

use strict;
use Data::Dumper;

use OSCARS::ResourceManager;
use OSCARS::Logger;

my ( $database, $daemon, $component, $resource_manager );
my $authN_package = 'OSCARS::AAAS::AuthN';
my $authZ_package = 'OSCARS::AAAS::AuthZ';

# TODO:  Essentially going back to earlier version.  Need better UI.
# port number needs to be option again.
my $len = scalar(@ARGV);
if ($len == 1) {
    my $first_arg = $ARGV[0];
    if ($first_arg eq '-h') {
        print STDERR "Usage:\t\toscars component_name\n";
        print STDERR "Examples:\toscars\n";
        print STDERR "\t\toscars AAAS\n";
        exit;
    }
    else { $component = $ARGV[0]; }
}
else { $component = 'AAAS'; }

# TODO:  shouldn't have to be same name
$database = $component;

if ($component) {
    start_daemon();
}

###############################################################################
#
sub start_daemon {
    $resource_manager = OSCARS::ResourceManager->new(
                                              'database' => $database );
    if ( !$resource_manager->use_authentication_plugin($authN_package, 'AAAS') ) {
        die( "Unable to find authentication package $authN_package");
    }
    $daemon = SOAP::Transport::HTTP::Daemon
        -> new (LocalPort => 2000, Listen => 5, Reuse => 1)
        -> dispatch_to('OSCARS::Dispatcher');
    $daemon->handle;
} #____________________________________________________________________________


#==============================================================================
package OSCARS::Dispatcher;

=head1 NAME

OSCARS::Dispatcher - SOAP::Lite dispatcher for OSCARS.

=head1 SYNOPSIS

  use OSCARS::Dispatcher;

=head1 DESCRIPTION

Dispatcher for SOAP::Lite.

=head1 AUTHORS

David Robertson (dwrobertson@lbl.gov)
Mary Thompson (mrthompson@lbl.gov)

=head1 LAST MODIFIED

March 28, 2006

=cut

use Error qw(:try);
use Data::Dumper;
use SOAP::Lite;

use strict;

use OSCARS::ResourceManager;
use OSCARS::Method;


###############################################################################
#
sub dispatch {
    my ( $class_name, $params ) = @_;

    my( $ex );
    my( $user, $handler, $som );

    my $logger = OSCARS::Logger->new('method_name' => $params->{method});
    $logger->set_level($NetLogger::INFO);
    if ($params->{user_login}) { $logger->set_user_login($params->{user_login}); }
    if ($params->{op}) { $logger->set_op($params->{op}); }
    $logger->open('/home/oscars/logs/oscars.log');
    my $results = {};
    if ($params->{method} eq 'Logout') {
	$logger->info('successful', $params);
        remove_user($params->{user_login});
	$results->{user_login} = $params->{user_login};
	return $results;
    }
    try {
        $user = $resource_manager->authenticate($daemon, $params);
	$logger->set_user_login($user->{login});
        if ( !$user->use_authorization_plugin($authZ_package, 'AAAS') ) {
            throw Error::Simple( "Unable to use authorization package $authZ_package");
        }

        # if BSS component is not on this server
	# NOTE:  not currently handled
	if ($resource_manager->has_client($params->{server})) {
            $som = $resource_manager->forward('BSS', $params);
            $results = $som->result;
	}
        else {
            my $factory = OSCARS::MethodFactory->new();
            $handler = $factory->instantiate( $user, $params, $logger );
            # call SOAP method
            $results = $handler->soap_call();
	    if ( $results->{next_domain} ) {
                print STDERR "next domain: $results->{next_domain}\n";
                $params->{user_password} = 'crosstest';
                my $found =
	                $resource_manager->add_client($results->{next_domain});
		if ($found) {
		    $som = $resource_manager->forward($results->{next_domain},
                                                      $params);
		    if (!$som) {
			$logger->warning("exception",
                            { 'description' => 'Unable to forward results',
                              'domain' => $results->{next_domain} });
		    }
                    if (!$som->faultstring) {
	                # call method again with previous results to make reservation
		        $handler = $factory->instantiate( $user, $results, $logger );
		        $results = $handler->soap_call();
                    }
		}
		# the next domain is not OSCARS/BRUW
		else {
		    # Not the most efficient way, but detects the loop and
		    # finishes the reservation.
                    $handler = $factory->instantiate( $user, $results, $logger );
                    $results = $handler->soap_call();
		}
            }
        }
    }
    catch Error::Simple with { $ex = shift; }
    otherwise { $ex = shift; }
    finally {
        if ($ex) {
            print STDERR $ex->{-text}, "\n";
            $logger->warning("exception: $ex->{-text}", $params);
	    $logger->close();
                # caught by SOAP to indicate fault
            die SOAP::Fault->faultcode('Server')
                 ->faultstring($ex->{-text});
        }
        elsif ($handler) {
            $handler->post_process($results);
	    $logger->close();
	}
    };
    return $results;
} #____________________________________________________________________________


######
1;
