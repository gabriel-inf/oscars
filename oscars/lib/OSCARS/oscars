#!/usr/bin/perl -w

##############################################################################
# Copyright (c) 2006, The Regents of the University of California, through
# Lawrence Berkeley National Laboratory (subject to receipt of any required
# approvals from the U.S. Dept. of Energy). All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# (1) Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#
# (2) Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# (3) Neither the name of the University of California, Lawrence Berkeley
#     National Laboratory, U.S. Dept. of Energy nor the names of its
#     contributors may be used to endorse or promote products derived from
#     this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# You are under no obligation whatsoever to provide any bug fixes, patches,
# or upgrades to the features, functionality or performance of the source
# code ("Enhancements") to anyone; however, if you choose to make your
# Enhancements available either publicly, or directly to Lawrence Berkeley
# National Laboratory, without imposing a separate written license agreement
# for such Enhancements, then you hereby grant the following license: a
# non-exclusive, royalty-free perpetual license to install, use, modify,
# prepare derivative works, incorporate into other computer software,
# distribute, and sublicense such enhancements or derivative works thereof,
# in binary and source code form.
##############################################################################

#==============================================================================
package OSCARS::Server;

use SOAP::Transport::HTTP;
use Getopt::Std;

use strict;
use Data::Dumper;

use OSCARS::PluginManager;
use OSCARS::MethodFactory;

my ( $daemon, $factory, $authN );

# defaults
my $usage ="oscars [-p portnum] [-c configFile] [-h]\n";
my $portnum = 2000;
my $configFile = "$ENV{HOME}/.oscars.xml";

my %opts;

getopt('pch', \%opts);
if (exists $opts{h} ) {
    print STDERR "Usage: $usage\n";
    exit; 
}
if (defined $opts{p} ) { $portnum = $opts{p}; }
if (defined $opts{c} ) { $configFile = $opts{c}; }

startDaemon();

###############################################################################
#
sub startDaemon {
    my $pluginMgr = OSCARS::PluginManager->new('location' => $configFile);
    $authN = $pluginMgr->usePlugin('authentication');
    if ( !$authN ) {
        die( "Unable to find authentication plugin; does config file exist?");
    }
    $factory = OSCARS::MethodFactory->new('pluginMgr' => $pluginMgr);
    $daemon = SOAP::Transport::HTTP::Daemon
        -> new (LocalPort => $portnum, Listen => 5, Reuse => 1)
        -> dispatch_to('OSCARS::Dispatcher');
    print "contact server at oscars-dev.es.net:$portnum\n";
    $daemon->handle;
} #____________________________________________________________________________


#==============================================================================
package OSCARS::Dispatcher;

=head1 NAME

OSCARS::Dispatcher - SOAP::Lite dispatcher for OSCARS.

=head1 SYNOPSIS

  use OSCARS::Dispatcher;

=head1 DESCRIPTION

Dispatcher for SOAP::Lite.

=head1 AUTHORS

David Robertson (dwrobertson@lbl.gov)
Mary Thompson (mrthompson@lbl.gov)

=head1 LAST MODIFIED

July 20, 2006

=cut

use Error qw(:try);
use Data::Dumper;
use SOAP::Lite;

use strict;

use OSCARS::Logger;
use OSCARS::Method;
use OSCARS::Library::Serializer;

# NOTE:  Extra enclosing types are to satisfy clients that used WSDL to
#        generate stubs (no Perl generator works for complexTypes yet).

### publicly available methods

###############################################################################
#
sub userLogin {
    my( $className, $request ) = @_;

    my $results = handle($request, 'userLogin');
    # return serialized results
    return SOAP::Data
        ->uri('http://oscars.es.net/OSCARS/Dispatcher')
        ->value($results);
} #____________________________________________________________________________


###############################################################################
#
sub userLogout {
    my( $className, $request ) = @_;

    my $results = handle($request, 'userLogout');
    return SOAP::Data
        ->uri('http://oscars.es.net/OSCARS/Dispatcher')
        ->value($results);
} #____________________________________________________________________________


###############################################################################
#
sub userQuery {
    my( $className, $request ) = @_;

    my $results = handle($request, 'userQuery');
    return SOAP::Data
        ->uri('http://oscars.es.net/OSCARS/Dispatcher')
        ->value($results);
} #____________________________________________________________________________


###############################################################################
#
sub userModify {
    my( $className, $request ) = @_;

    my $results = handle($request, 'userModify');
    return SOAP::Data
        ->uri('http://oscars.es.net/OSCARS/Dispatcher')
        ->value($results);
} #____________________________________________________________________________


###############################################################################
#
sub institutionList {
    my( $className, $request ) = @_;

    my $results = handle($request, 'institutionList');
    return SOAP::Data
        ->uri('http://oscars.es.net/OSCARS/Dispatcher')
        ->value($results);
} #____________________________________________________________________________


###############################################################################
#
sub queryReservation {
    my( $className, $request ) = @_;

    my $results = handle($request, 'queryReservation');
    return SOAP::Data
        ->uri('http://oscars.es.net/OSCARS/Dispatcher')
	->value($results);
#        ->value(OSCARS::Library::Serializer::serializeQueryResReply($results));
} #____________________________________________________________________________


###############################################################################
#
sub createReservation {
    my( $className, $request ) = @_;

    my $results = handle($request, 'createReservation');
    return SOAP::Data
        ->uri('http://oscars.es.net/OSCARS/Dispatcher')
        ->value($results);
} #____________________________________________________________________________


###############################################################################
#
sub modifyReservation {
    my( $className, $request ) = @_;

    my $results = handle($request, 'modifyReservation');
    return SOAP::Data
        ->uri('http://oscars.es.net/OSCARS/Dispatcher')
        ->value($results);
} #____________________________________________________________________________


###############################################################################
#
sub cancelReservation {
    my( $className, $request ) = @_;

    my $results = handle($request, 'cancelReservation');
    return SOAP::Data
        ->uri('http://oscars.es.net/OSCARS/Dispatcher')
        ->value($results);
} #____________________________________________________________________________


###############################################################################
#
sub listReservations {
    my( $className, $request ) = @_;

    my $results = handle($request, 'listReservations');
    return SOAP::Data
        ->uri('http://oscars.es.net/OSCARS/Dispatcher')
        ->value($results);
} #____________________________________________________________________________


### internal methods

###############################################################################
#
sub userAdd {
    my( $className, $request ) = @_;

    my $results = handle($request, 'userAdd');
    return SOAP::Data
        ->uri('http://oscars.es.net/OSCARS/Dispatcher')
        ->value($results);
} #____________________________________________________________________________


###############################################################################
#
sub userRemove {
    my( $className, $request ) = @_;

    my $results = handle($request, 'userRemove');
    return SOAP::Data
        ->uri('http://oscars.es.net/OSCARS/Dispatcher')
        ->value($results);
} #____________________________________________________________________________


###############################################################################
#
sub userList {
    my( $className, $request ) = @_;

    my $results = handle($request, 'userList');
    return SOAP::Data
        ->uri('http://oscars.es.net/OSCARS/Dispatcher')
        ->value($results);
} #____________________________________________________________________________


###############################################################################
#
sub permissionList {
    my( $className, $request ) = @_;

    my $results = handle($request, 'permissionList');
    return SOAP::Data
        ->uri('http://oscars.es.net/OSCARS/Dispatcher')
        ->value($results);
} #____________________________________________________________________________


###############################################################################
#
sub resourceList {
    my( $className, $request ) = @_;

    my $results = handle($request, 'resourceList');
    return SOAP::Data
        ->uri('http://oscars.es.net/OSCARS/Dispatcher')
        ->value($results);
} #____________________________________________________________________________


###############################################################################
#
sub authorizationList {
    my( $className, $request ) = @_;

    my $results = handle($request, 'authorizationList');
    return SOAP::Data
        ->uri('http://oscars.es.net/OSCARS/Dispatcher')
        ->value($results);
} #___________________________________________________________________________ 


###############################################################################
#
sub reservationPending {
    my( $className, $request ) = @_;

    my $results = handle($request, 'reservationPending');
    return SOAP::Data
        ->uri('http://oscars.es.net/OSCARS/Dispatcher')
        ->value($results);
} #____________________________________________________________________________


###############################################################################
#
sub reservationExpired {
    my( $className, $request ) = @_;

    my $results = handle($request, 'reservationExpired');
    return SOAP::Data
        ->uri('http://oscars.es.net/OSCARS/Dispatcher')
        ->value($results);
} #____________________________________________________________________________


###############################################################################
#
sub topologyUpdate {
    my( $className, $request ) = @_;

    my $results = handle($request, 'topologyUpdate');
    return SOAP::Data
        ->uri('http://oscars.es.net/OSCARS/Dispatcher')
        ->value($results);
} #____________________________________________________________________________


###############################################################################
#
sub reservationCreateForm {
    my( $className, $request ) = @_;

    my $results = handle($request, 'reservationCreateForm');
    return SOAP::Data
        ->uri('http://oscars.es.net/OSCARS/Dispatcher')
        ->value($results);
} #____________________________________________________________________________


# public Interdomain (currently in Public/Reservation)

###############################################################################
#
sub forward {
    my( $className, $request ) = @_;

    my $results = handle($request, 'forward');
    return OSCARS::Library::Serializer::serializeForwardReply($results);
} #___________________________________________________________________________ 


###############################################################################
#  Test for use with BNL.
sub testForward {
    my( $className, $payload, $payloadSender, $userLogin ) = @_;
    my $request = $payload;
    $request->{userLogin} = {};
    $request->{userLogin}->{userName} = $userLogin->{userName};
    $request->{userLogin}->{password} = $userLogin->{password};
    $request->{payloadSender}= $payloadSender;
    my $results = handle($request, 'testForward');
    return  OSCARS::Library::Serializer::serializeForwardReply(
                                           $payload->{contentType}, $results );
} #____________________________________________________________________________


###############################################################################
#
sub handle {
    my( $request, $method ) = @_;

    my $ex;
    my( $user, $handler, $som );

     # this occurs if there are no input parameters
    if (!$request) { $request = {}; }
    $request->{method} = $method;
    my $logger = OSCARS::Logger->new('method' => $method);
    $logger->set_level($NetLogger::INFO);
    $logger->open('/home/oscars/logs/oscars.log');
    my $results = {};
    try {
        $user = $authN->authenticate($daemon, $request);
        $logger->setUserLogin($user->{login});
        $handler = $factory->instantiate( $user, $method );
        # Handles SOAP method.  Handler may make other SOAP calls to
        # accomplish its task.
        $results = $handler->soapMethod($request, $logger);
    }
    catch Error::Simple with { $ex = shift; }
    otherwise { $ex = shift; }
    finally {
        if ($ex) {
            print STDERR $ex->{-text}, "\n";
            $logger->warning("exception: $ex->{-text}", $request);
            $logger->close();
                # caught by SOAP to indicate fault
            die SOAP::Fault->faultcode('Server')
                 ->faultstring($ex->{-text});
        }
        elsif ($handler) { $handler->postProcess($request, $results); }
        if ($method eq 'userLogout') {
            $authN->removeUser($request->{login});
        }
        $logger->close();
    };
    return $results;
} #____________________________________________________________________________


######
1;
