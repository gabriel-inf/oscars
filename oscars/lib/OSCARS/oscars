#!/usr/bin/perl -w

#==============================================================================
package OSCARS::Server;

use SOAP::Transport::HTTP;

use strict;
use Data::Dumper;

use OSCARS::PluginManager;

my ( $daemon, $portnum, $factory, $authN );

# TODO:  Essentially going back to earlier version.  Need better UI.
# port number needs to be option again, config file location (or default) needs
# to be set.
my $len = scalar(@ARGV);
if ($len == 1) {
    my $firstArg = $ARGV[0];
    if ($firstArg eq '-h') {
        print STDERR "Usage:\t\toscars [portnum]\n";
        exit;
    }
    else { $portnum = $ARGV[0]; }
}
else { $portnum = 2000; }

startDaemon();

###############################################################################
#
sub startDaemon {
    my $pluginMgr = OSCARS::PluginManager->new();
    $authN = $pluginMgr->usePlugin('authentication');
    if ( !$authN ) {
        die( "Unable to find authentication plugin; does config file exist?");
    }
    $factory = OSCARS::MethodFactory->new();
    $daemon = SOAP::Transport::HTTP::Daemon
        -> new (LocalPort => $portnum, Listen => 5, Reuse => 1)
        -> dispatch_to('OSCARS::Dispatcher');
    $daemon->handle;
} #____________________________________________________________________________


#==============================================================================
package OSCARS::Dispatcher;

=head1 NAME

OSCARS::Dispatcher - SOAP::Lite dispatcher for OSCARS.

=head1 SYNOPSIS

  use OSCARS::Dispatcher;

=head1 DESCRIPTION

Dispatcher for SOAP::Lite.

=head1 AUTHORS

David Robertson (dwrobertson@lbl.gov)
Mary Thompson (mrthompson@lbl.gov)

=head1 LAST MODIFIED

May 11, 2006

=cut

use Error qw(:try);
use Data::Dumper;
use SOAP::Lite;

use strict;

use OSCARS::Logger;
use OSCARS::Method;

# NOTE:  Extra enclosing types are to satisfy clients that used WSDL to
#        generate stubs (no Perl generator works for complexTypes yet).

### publicly available methods

###############################################################################
#
sub userLogin {
    my( $className, $request ) = @_;

    my $results = handle($request, 'UserLogin');
    return { 'userLoginResponse' => $results };
}

###############################################################################
#
sub userLogout {
    my( $className, $request ) = @_;

    my $results = handle($request, 'UserLogout');
    return { 'userLogoutResponse' => $results };
}

###############################################################################
#
sub userQuery {
    my( $className, $request ) = @_;

    my $results = handle($request, 'UserQuery');
    return { 'userQueryResponse' => $results };
}

###############################################################################
#
sub userModify {
    my( $className, $request ) = @_;

    my $results = handle($request, 'UserModify');
    return { 'userModifyResponse' => $results };
}

###############################################################################
#
sub institutionList {
    my( $className, $request ) = @_;

    my $results = handle($request, 'InstitutionList');
    return { 'institutionListResponse' => $results };
}

###############################################################################
#
sub queryReservation {
    my( $className, $request ) = @_;

    my $results = handle($request, 'QueryReservation');
    return { 'queryReservationResponse' => $results };
}

###############################################################################
#
sub createReservation {
    my( $className, $request ) = @_;

    my $results = handle($request, 'CreateReservation');
    return { 'createReservationResponse' => $results };
}

###############################################################################
#
sub modifyReservation {
    my( $className, $request ) = @_;

    my $results = handle($request, 'ModifyReservation');
    return { 'modifyReservationResponse' => $results };
}

###############################################################################
#
sub cancelReservation {
    my( $className, $request ) = @_;

    my $results = handle($request, 'CancelReservation');
    return { 'cancelReservationResponse' => $results };
}

###############################################################################
#
sub listReservations {
    my( $className, $request ) = @_;

    my $results = handle($request, 'ListReservations');
    return { 'listReservationsResponse' => $results };
}

### internal methods

###############################################################################
#
sub userAdd {
    my( $className, $request ) = @_;

    my $results = handle($request, 'UserAdd');
    return { 'userAddResponse' => $results };
}

###############################################################################
#
sub userRemove {
    my( $className, $request ) = @_;

    my $results = handle($request, 'UserRemove');
    return { 'userRemoveResponse' => $results };
}

###############################################################################
#
sub userList {
    my( $className, $request ) = @_;

    my $results = handle($request, 'UserList');
    return { 'userListResponse' => $results };
}

###############################################################################
#
sub permissionList {
    my( $className, $request ) = @_;

    my $results = handle($request, 'PermissionList');
    return { 'permissionListResponse' => $results };
}

###############################################################################
#
sub resourceList {
    my( $className, $request ) = @_;

    my $results = handle($request, 'ResourceList');
    return { 'resourceListResponse' => $results };
}

###############################################################################
#
sub authorizationList {
    my( $className, $request ) = @_;

    my $results = handle($request, 'AuthorizationList');
    return { 'authorizationListResponse' => $results };
}

###############################################################################
#
sub reservationPending {
    my( $className, $request ) = @_;

    my $results = handle($request, 'ReservationPending');
    return { 'reservationPendingResponse' => $results };
}

###############################################################################
#
sub reservationExpired {
    my( $className, $request ) = @_;

    my $results = handle($request, 'ReservationExpired');
    return { 'reservationExpiredResponse' => $results };
}

###############################################################################
#
sub topologyUpdate {
    my( $className, $request ) = @_;

    my $results = handle($request, 'TopologyUpdate');
    return { 'topologyUpdateResponse' => $results };
}

# public Interdomain (currently in Intradomain)

###############################################################################
#
sub forward {
    my( $className, $request ) = @_;

    my $results = handle($request, 'Forward');
    return { 'forwardResponse' => $results };
}

###############################################################################
#
sub handle {
    my( $request, $method ) = @_;

    my $ex;
    my( $user, $handler, $som );

    # top level is request object (e.g. userLoginRequest); strip it off
    # in document/literal, will be only one top level, and one underlying hash
    for my $t ( keys %{$request} ) {
        $request = $request->{$t};
    }
    $request->{method} = $method;
    my $logger = OSCARS::Logger->new('method' => $method);
    $logger->set_level($NetLogger::INFO);
    if ( $request->{login} ) { $logger->setUserLogin($request->{login}); }
    $logger->open('/home/oscars/logs/oscars.log');
    my $response = {};
    try {
        $user = $authN->authenticate($daemon, $request);
	$logger->setUserLogin($user->{login});
        $handler = $factory->instantiate( $user, $method );
        # Handles SOAP method.  Handler may make other SOAP calls to
	# accomplish its task.
        $response = $handler->soapMethod($request, $logger);
    }
    catch Error::Simple with { $ex = shift; }
    otherwise { $ex = shift; }
    finally {
        if ($ex) {
            print STDERR $ex->{-text}, "\n";
            $logger->warning("exception: $ex->{-text}", $request);
	    $logger->close();
                # caught by SOAP to indicate fault
            die SOAP::Fault->faultcode('Server')
                 ->faultstring($ex->{-text});
        }
        elsif ($handler) { $handler->postProcess($request, $response); }
        if ($method eq 'userLogout') {
            $authN->removeUser($request->{login});
        }
        $logger->close();
    };
    return $response;
} #____________________________________________________________________________


######
1;
