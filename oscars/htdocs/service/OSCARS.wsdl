<?xml version="1.0" encoding="UTF-8"?>
<wsdl:definitions name="OSCARS"
	targetNamespace="http://oscars.es.net/OSCARS/Dispatcher"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
	xmlns:tns="http://oscars.es.net/OSCARS/Dispatcher">

	<wsdl:documentation>
		This is WSDL for the OSCARS public reservation interface. DRAFT
		V0.2.3  July 17, 2006
	</wsdl:documentation>

	<!-- Element definitons -->
	<wsdl:types>
		<xsd:schema
			elementFormDefault="qualified"
			targetNamespace="http://oscars.es.net/OSCARS/Dispatcher"
			xmlns:xsd="http://www.w3.org/2001/XMLSchema"
			xmlns:tns="http://oscars.es.net/OSCARS/Dispatcher">

			<xsd:element name="createReservation"
				type="tns:resCreateContent" />

			<xsd:element name="createReservationResponse"
				type="tns:createReply"/>

			<xsd:element name="cancelReservation" 
			        type="tns:resTag" />

			<xsd:element name="cancelReservationResponse"
				type="tns:resStatus" />

			<xsd:element name="queryReservation" 
				type="tns:resTag" />

			<xsd:element name="queryReservationResponse"
				type="tns:resDetails" />

			<xsd:element name="forward">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="payload"
							type="tns:forwardPayload" />
						<xsd:element name="payloadSender"
							type="xsd:string" />
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="forwardResponse" 
			      type="tns:forwardReply" />

			<xsd:element name="testForward">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="payload"
							type="tns:forwardPayload" />
						<xsd:element name="payloadSender"
							type="xsd:string" />
						<xsd:element name="userLogin" type="tns:login" />
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="testForwardResponse" 
				type="tns:forwardReply" />

			<xsd:element name="createReservationOSCARSException"
				type="tns:OSCARSExceptionType" />
			<xsd:element name="cancelReservationOSCARSException"
				type="tns:OSCARSExceptionType" />
			<xsd:element name="queryReservationOSCARSException"
				type="tns:OSCARSExceptionType" />
			<xsd:element name="forwardOSCARSException"
				type="tns:OSCARSExceptionType" />
			<xsd:element name="testForwardOSCARSException"
				type="tns:OSCARSExceptionType" />

			<!--  Types  -->

			<xsd:simpleType name="createRouteDirectionType">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="FORWARD" />
					<xsd:enumeration value="REVERSE" />
				</xsd:restriction>
			</xsd:simpleType>

			<xsd:complexType name="resCreateContent">
				<xsd:sequence>
					<xsd:element name="srcHost" type="xsd:string" />
					<xsd:element name="destHost" type="xsd:string" />
					<xsd:element name="startTime" type="xsd:dateTime" />
					<xsd:element name="endTime" type="xsd:dateTime" />
					<xsd:element name="origTimeZone" type="xsd:string" />
					<xsd:element name="bandwidth" type="xsd:int" />
					<xsd:element name="description" type="xsd:string" />
					<xsd:element name="ingressRouterIP"
						type="xsd:string" maxOccurs="1" minOccurs="0" />
					<xsd:element name="egressRouterIP" type="xsd:string"
						maxOccurs="1" minOccurs="0" />
					<!-- forward means create path from src to dst, reverse
						means create path from dst to src (done by switching src &
						dst when you reach dst and setting this to forward-->
					<xsd:element name="createRouteDirection"
						type="tns:createRouteDirectionType" />
					<xsd:element name="protocol"
						type="tns:resProtocolType" maxOccurs="1" minOccurs="0" />
					<xsd:element name="srcPort" type="xsd:int"
						maxOccurs="1" minOccurs="0" />
					<xsd:element name="destPort" type="xsd:int"
						maxOccurs="1" minOccurs="0" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="createReply">
				<xsd:sequence>
					<xsd:element name="tag" type="xsd:string"/>
					<xsd:element name="status" type="tns:resStatus"/>
				</xsd:sequence>
			</xsd:complexType>
			
			<xsd:complexType name="resInfoContent">
				<xsd:sequence>
					<xsd:element name="tag" type="xsd:string" />
					<xsd:element name="status" type="tns:resStatus" />
					<xsd:element name="srcHost" type="xsd:string" />
					<xsd:element name="destHost" type="xsd:string" />
					<xsd:element name="startTime" type="xsd:dateTime" />
					<xsd:element name="endTime" type="xsd:dateTime" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="resDetails">
				<xsd:sequence>
					<xsd:element name="tag" type="xsd:string" />
					<xsd:element name ="status" type="tns:resStatus"/>
					<xsd:element name="srcHost" type="xsd:string" />
					<xsd:element name="destHost" type="xsd:string" />
					<xsd:element name="startTime" type="xsd:dateTime" />
					<xsd:element name="endTime" type="xsd:dateTime" />
					<xsd:element name="origTimeZone" type="xsd:string" />
					<xsd:element name="createTime" type="xsd:dateTime" />
					<xsd:element name="bandwidth" type="xsd:int" />
					<xsd:element name="burstLimit" type="xsd:int" />
					<xsd:element name="resClass" type="xsd:string" />
					<!-- list of routers (hops) -->
					<xsd:element name="path" type="xsd:string" />
					<xsd:element name="description" type="xsd:string" />
					<xsd:element name="protocol"
						type="tns:resProtocolType" maxOccurs="1" minOccurs="0" />
					<xsd:element name="srcPort" type="xsd:int"
						maxOccurs="1" minOccurs="0" />
					<xsd:element name="destPort" type="xsd:int"
						maxOccurs="1" minOccurs="0" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="forwardPayload">
				<xsd:sequence>
					<xsd:element name="contentType"
						type="tns:payloadContentType" />
					<xsd:element name="createReservation"
						type="tns:resCreateContent" maxOccurs="1" minOccurs="0" />
					<xsd:element name="cancelReservation" type="tns:resTag"
						maxOccurs="1" minOccurs="0" />
					<xsd:element name="queryReservation" type="tns:resTag"
						maxOccurs="1" minOccurs="0" />
				</xsd:sequence>
			</xsd:complexType>
			
			<xsd:complexType name="forwardReply">
			     	<xsd:sequence>
					<xsd:element name="contentType"
						type="tns:payloadContentType" />
					<xsd:element name="createReservation"
						type="tns:createReply" maxOccurs="1" minOccurs="0" />
					<xsd:element name="cancelReservation" type="tns:resStatus"
						maxOccurs="1" minOccurs="0" />
					<xsd:element name="queryReservation" type="tns:resDetails"
						maxOccurs="1" minOccurs="0" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:simpleType name="resProtocolType">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="UDP" />
					<xsd:enumeration value="TCP" />
				</xsd:restriction>
			</xsd:simpleType>

			<xsd:complexType name="login">
				<xsd:sequence>
					<xsd:element name="userName" type="xsd:string"></xsd:element>
					<xsd:element name="password" type="xsd:string"></xsd:element>
				</xsd:sequence>
			</xsd:complexType>

			<xsd:simpleType name="payloadContentType">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="createReservation"/>
					<xsd:enumeration value="queryReservation"/>
					<xsd:enumeration value="cancelReservation"/>
				</xsd:restriction>
			</xsd:simpleType>
			
			<xsd:complexType name="OSCARSExceptionType">
				<xsd:sequence>
					<xsd:element name="msg" type="xsd:string" />
				</xsd:sequence>
			</xsd:complexType>
			
			<!--  WS1-BP approved way to pass null arguments -->
			<xsd:complexType name="emptyArg">
			       <xsd:sequence>
			       		<xsd:element name="msg" minOccurs = "0"
						type="xsd:string" >
					</xsd:element>
				</xsd:sequence>
			</xsd:complexType>	
			
			<!--  borrowed from GEANT2 -->
			<xsd:simpleType name="resStatus">
			   <xsd:restriction base="xsd:string">
				  <xsd:enumeration value="PENDING"/>
				  <xsd:enumeration value="ACTIVE"/>
				  <xsd:enumeration value="FINISHED"/>
				  <xsd:enumeration value="CANCELLED"/>
				  <xsd:enumeration value="FAILED"/>
				  <xsd:enumeration value="PENDINGCANCEL"/>
				  <xsd:enumeration value="PRECANCEL"/>
			   </xsd:restriction>
			</xsd:simpleType>
			     

                     <!--  All the  top level elements that should be simpletypes need to be complexTypes that
                              contain a named element because the SOAP::Lite server insists on including a lease one
                              tagged element within the soap body
                               -->
			<xsd:complexType name="resTag">
				<xsd:sequence>
					<xsd:element name="tag" type="xsd:string" />
				</xsd:sequence>
			</xsd:complexType>			

		</xsd:schema>
	</wsdl:types>

	<!--   Message definitions -->

	<wsdl:message name="createReservation">
		<wsdl:part name="createReservation"
			element="tns:createReservation">
		</wsdl:part>
	</wsdl:message>
	<wsdl:message name="createReservationResponse">
		<wsdl:part name="createReservationResponse"
			element="tns:createReservationResponse" />
	</wsdl:message>

	<wsdl:message name="cancelReservation">
		<wsdl:part name="cancelReservation"
			element="tns:cancelReservation">
		</wsdl:part>
	</wsdl:message>
	<wsdl:message name="cancelReservationResponse">
		<wsdl:part name="cancelReservationResponse"
			element="tns:cancelReservationResponse" />
	</wsdl:message>

	<wsdl:message name="queryReservation">
		<wsdl:part name="queryReservation"
			element="tns:queryReservation" />
	</wsdl:message>
	<wsdl:message name="queryReservationResponse">
		<wsdl:part name="queryReservationResponse"
			element="tns:queryReservationResponse" />
	</wsdl:message>

	<wsdl:message name="forward">
		<wsdl:part name="forward" element="tns:forward" />
	</wsdl:message>
	<wsdl:message name="forwardResponse">
		<wsdl:part name="forwardResponse"
			element="tns:forwardResponse">
		</wsdl:part>
	</wsdl:message>

	<wsdl:message name="testForward">
		<wsdl:part name="testForward" element="tns:testForward">
		</wsdl:part>
	</wsdl:message>
	<wsdl:message name="testForwardResponse">
		<wsdl:part name="testForwardResponse"
			element="tns:testForwardResponse">
		</wsdl:part>
	</wsdl:message>

	<wsdl:message name="createReservationOSCARSException">
		<wsdl:part name="createReservationOSCARSException"
			element="tns:createReservationOSCARSException" />
	</wsdl:message>

	<wsdl:message name="cancelReservationOSCARSException">
		<wsdl:part name="cancelReservationOSCARSException"
			element="tns:cancelReservationOSCARSException" />
	</wsdl:message>

	<wsdl:message name="queryReservationOSCARSException">
		<wsdl:part name="queryReservationOSCARSException"
			element="tns:queryReservationOSCARSException" />
	</wsdl:message>

	<wsdl:message name="forwardOSCARSException">
		<wsdl:part name="forwardOSCARSException"
			element="tns:forwardOSCARSException">
		</wsdl:part>
	</wsdl:message>

	<wsdl:message name="testForwardOSCARSException">
		<wsdl:part name="testForwardOSCARSException"
			element="tns:testForwardOSCARSException">
		</wsdl:part>
	</wsdl:message>

	<wsdl:portType name="OSCARS">
		<wsdl:operation name="createReservation">
			<wsdl:input message="tns:createReservation" />
			<wsdl:output message="tns:createReservationResponse" />
			<wsdl:fault name="OSCARSException"
				message="tns:createReservationOSCARSException" />

		</wsdl:operation>
		<wsdl:operation name="cancelReservation">
			<wsdl:input message="tns:cancelReservation"></wsdl:input>
			<wsdl:output message="tns:cancelReservationResponse" />
			<wsdl:fault name="OSCARSException"
				message="tns:cancelReservationOSCARSException" />

		</wsdl:operation>
		<wsdl:operation name="queryReservation">
			<wsdl:input message="tns:queryReservation" />
			<wsdl:output message="tns:queryReservationResponse" />
			<wsdl:fault name="OSCARSException"
				message="tns:queryReservationOSCARSException" />

		</wsdl:operation>

		<wsdl:operation name="forward">
			<wsdl:input message="tns:forward"></wsdl:input>
			<wsdl:output message="tns:forwardResponse"></wsdl:output>
			<wsdl:fault name="OSCARSException"
				message="tns:forwardOSCARSException">
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="testForward">
			<wsdl:input message="tns:testForward"></wsdl:input>
			<wsdl:output message="tns:testForwardResponse"></wsdl:output>
			<wsdl:fault name="OSCARSException"
				message="tns:testForwardOSCARSException">
			</wsdl:fault>
		</wsdl:operation>
	</wsdl:portType>

	<wsdl:binding name="OSCARSSOAP" type="tns:OSCARS">
		<soap:binding style="document"
			transport="http://schemas.xmlsoap.org/soap/http" />

		<wsdl:operation name="createReservation">
			<soap:operation style="document"
				soapAction="http://oscars.es.net/OSCARS/Dispatcher/createReservation" />
			<wsdl:input>
				<soap:body use="literal" parts="createReservation" />
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"
					parts="createReservationResponse" />
			</wsdl:output>
			<wsdl:fault name="OSCARSException">
				<soap:fault name="OSCARSException" use="literal" />
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="queryReservation">
			<soap:operation style="document"
				soapAction="http://oscars.es.net/OSCARS/Dispatcher/queryReservation" />
			<wsdl:input>
				<soap:body use="literal" parts="queryReservation" />
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"
					parts="queryReservationResponse" />
			</wsdl:output>
			<wsdl:fault name="OSCARSException">
				<soap:fault name="OSCARSException" use="literal" />
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="cancelReservation">
			<soap:operation
				soapAction="http://oscars.es.net/OSCARS/Dispatcher/cancelReservation" />
			<wsdl:input>
				<soap:body use="literal" parts=" cancelReservation" />
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"
					parts=" cancelReservationResponse" />
			</wsdl:output>
			<wsdl:fault name="OSCARSException">
				<soap:fault use="literal" name="OSCARSException" />
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="forward">
			<soap:operation
				soapAction="http://oscars.es.net/OSCARS/Dispatcher/forward" />
			<wsdl:input>
				<soap:body use="literal" parts=" forward" />
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" parts=" forwardResponse" />
			</wsdl:output>
			<wsdl:fault name="OSCARSException">
				<soap:fault use="literal" name="OSCARSException" />
			</wsdl:fault>
		</wsdl:operation>
		<wsdl:operation name="testForward">
			<soap:operation
				soapAction="http://oscars.es.net/OSCARS/Dispatcher/testForward" />
			<wsdl:input>
				<soap:body use="literal" parts=" testForward" />
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" parts=" testForwardResponse" />
			</wsdl:output>
			<wsdl:fault name="OSCARSException">
				<soap:fault use="literal" name="OSCARSException" />
			</wsdl:fault>
		</wsdl:operation>
	</wsdl:binding>


	<wsdl:service name="OSCARS">
		<wsdl:port name="OSCARSSOAP" binding="tns:OSCARSSOAP">
			<soap:address
				location="https://oscars.es.net/OSCARS/Dispatcher" />
		</wsdl:port>
	</wsdl:service>
</wsdl:definitions>
