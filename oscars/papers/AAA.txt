Authentication, Authorization and Auditing (AAA)

Authentication
    OSCARS authenticates the creation and management of
reservations. The web based interface and the SOAP server API use the
authentication mechanism that is most natural for them. The web server
requires a username and password for authentication on the first
access during which it creates session information for the user and a
8-hour cookie referencing this information to be used on subsequent
connections. All communication with the web server takes place over
encrypted https in order to protect against the stealing of passwords
or cookies. The SOAP API requires digitally signed messages [digSig]
and verifies the signature and the signing certificate to authenticate
the user. It then uses the subject name from the signing certificate
to identify the user. Both mechanisms use the database user table to
determine if the request is coming from a legitimate user. This table
contains a mapping of the OSCARS user name, password, subject name
from the certificate and the certificate itself, as well as other
information about the user.
  Requests for or about interdomain
reservations are authenticated in the originating domain on the basis
of an individual user, and in the subsequent domains on the basis of
the reservation server in the adjacent domain. Normally all requests
between domains will be a SOAP "forward" operation and be in messages
signed by the reservation server. Each domain has a list of the
co-operating domain server certificates as well as a list of
permissions for that domain. In effect a service level agreement gets
implemented in the users and authorization databases. The forward
message includes the name of the originating user, in case other
domains wish to use that information for authorization. Currently, at
the time of provisioning no further authentication is
done. Provisioning is triggered by the time of the reservation. Once
the provisioning has been completed, any traffic coming from the
specified ingress router is able to use the higher class of bandwidth.


Authorization
   Once a request has been authenticated as from a registered OSCARS
users, that user's authorization is checked against an authorization
table in the database. This implementation was inspired by one of the
author's experience with the ROAM authorization service of the
FusionGrid [ROAM]. This approach allows the use of standard database
commands to define resources and permissions and to manage and check
authorizations. As long as there are not too many resources,
permissions or users, it provides simple to manage and understand
access control. In the case of OSCARS, we control access to the
classes of reservations, users and domains. The permissions that can
be granted are view, manage(modify), maximum-bandwidth for a
reservation, duration of a reservation and the right to specify
routing.  We anticipate that the total number of authorized users will
be no greater than 50, remembering that OSCARS only needs to know
about users at ESnet sites who have the rights to schedule
high-bandwidth service and co-operating reservation servers in other
domains. If the users grow beyond this point, the tables can be
expanded to define groups (roles, or projects) of users.


Auditing
   At this point, the OSCARS server logs all significant activity such as
creating or canceling reservations. In addition a list of all
reservations is kept and can be read with the listReservations
operation. As was mentioned above, in interdomain requests, the name
of the originating user is passed to the next domain where it can be
used for either authorization or auditing.

